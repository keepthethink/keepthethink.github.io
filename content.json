[{"title":"慢慢的，就没有了，就像从未存在过","date":"2019-07-02T15:20:19.000Z","path":"archives/3811762271/","text":"几年以前，我曾经嘲笑过某科技界大佬。当时他说：也许90后、95后会慢慢不知道谷歌是什么网站。 那一年，这对于我来说简直就是世界上最好笑的笑话。谷歌，全世界最卓越的互联网公司，活在互联网的一代中国人，会不知道他们的网站？ 今天，我收回这句嘲笑。因为这件不可能的事，它慢慢变成了现实。 没有人再关注什么谷歌不谷歌。对他们来说，百度也蛮好用的，反正他们几乎没用过谷歌。没有谷歌又怎样？大家还是开心的刷微博，看微信，听歌，看娱乐节目。对于从来就不知道谷歌的人来说，少了谷歌又有什么影响？ 多年前，我们也是可以登陆Facebook的。其实这个网站和校内一样，也挺蠢的。可在上面你能看到老外们的生活，可以轻易的跟一万公里以外的人互相拜访，可以看到很多根本不会开到校内上的主页。你用汉语回复，下面给你聊起来的可能是香港仔，可能是台湾人。你用英语回复，说不定有比你英语用的更蹩脚的寂寞的北欧人来跟你搭讪。你感觉地球真的变成了地球村，你还没拉门走出去，别人就推门走了进来。 然后，它就没有了。起初，它的失踪激起了很大的声音，后来，声音就消失了。 多年前，我们也是可以登陆Twitter的。其实这个网站和微博一样，也不过是些信息流，刷上一整天，也不见得有什么用处。但至少，你可以以最快速度获取你想知道的任何新事，你会真正了解什么事情在全世界是流行的，而不是经过各种截图、翻译、转发，甚至曲解、断章取义、黑白颠倒的东西。你知道的是真相，赤裸裸的，也许有点太短的真相。但至少中间不会有无数人的加工与再加工，偏激、片面，就在这个过程中产生了，不管后来者有意还是无意。 然后，它就没有了。首先是它的本体没有了，然后它的模仿者也没有了，模仿者的模仿者也没有了。只剩一个模仿者的模仿者的模仿者，现在你每天能在上面看到无数广告。 多年前，我们也是可以登陆YouTube的。对于有的人来说，这个网站就是个大型优酷，当年有人信誓旦旦的说，没有YouTube，我们中国人会很快让优酷超过YouTube。可这么多年过去了，视频还是那么卡，内容还是那么垃圾，原创还是那么容易被盗窃，视频丰富度还是那么的可怜。在YouTube上，你能看到全世界最棒的手艺人，最逗乐的笑话，最天马行空的创意，最激荡人心的音乐，最美好的完美瞬间，可在优酷上，你想看一分钟视频，请先看半分钟广告。 哦，对了。Instagram，有些人可能感觉它和QQ空间也差不多。可我在上面关注了六百多个摄影师，它们都是顶好顶好的影像记录者，每天看他们的作品，我感觉到很幸福，那种即使没有到那里去，也身临其境的幸福。我还在上面认识了一个日本的爱自拍的帅小伙，一个爱喝酒的韩国大叔，一个十年前到过中国今天会在每张我发的紫禁城照片下点赞的美国大爷，一个美丽无比的俄罗斯妹子，我和他们基本上都难以交流，语言是很大的障碍，但几个简单的单词，心意也就到了，这种感觉，有时候比多年老友相聚还兴奋。因为这是人类不同族群自由交流互相沟通的过程，这种过程很神奇，真的很神奇。 可现在，它没有了，它之所以没有就因为在某个特定的时间你在搜索特定的词汇时，会搜出来特定的照片。虽然这么搜的人并不多，虽然看到的人也不会大惊小怪，也不会觉得天黑了，天亮了，天要塌了，天要变了。可它就是没了，Instagram，就这么没了。谷歌也是这么没的，Twitter也是这么没的，Facebook也是这么没的。不知道是什么人，在什么场合，说了什么话，下了什么决定。就要有超过十亿人像陷于哥谭市的孤岛里一样，看着一座又一座桥梁被炸掉，又被炸掉，又被炸掉，然后，就什么都没了。 我时常觉得悲哀，真的好悲哀，一个我根本不认识也不知道是谁的人，也许是一个群体，在不断抢走我身边的东西，而我却无能为力。我抱怨一声，他听不到，任何人都听不到。我怒吼一句，身边的大多数人却像看疯子一样的看着我。我哀嚎一声，这声音被阻碍在黑黑的幕墙以里。我发出尖锐的嘶吼，这声音传不了多远，就和我那被抢走的东西一样，消失了，不见了，就像从来没存在过一样。 对于本来就没存在过的东西，有谁又会觉得在意呢？那些本来拥有又被掠夺的人的哀愁，后来的人又怎么懂呢？我曾经是拥有一切的，我曾经是拥有世界的，我站在这片土地上，呼吸的是自由的空气，饮下的是自由的琼浆玉液。就在长的无法计数的时间里，我自由生命的一部分又一部分就这么被杀死了，突然就杀死了。可我还始终觉得，它们还奄奄一息的活着，就像它们是慢慢的死去的一样。 可它们终归是死了，而且随着它们的死，愈来愈多的事情慢慢的发生了，很慢很慢，几乎不被人察觉，可还是发生了。 没有谷歌，我可以用百度呀。可某些结果被越挪越后，越挪越后，最后就不见了。就像本来就不该搜出这个结果一样。 没有Facebook，我可以用校内呀。可你想发只有在Facebook上能发的文章，很快在校内上就失踪了。接着，校内变成了人人，话题变成了人人都关心的话题。大家都在抢着看星座、明星、八卦、娱乐。没有人会关心什么消失了，反正它们本来也没多少存在感。 没有YouTube，我可以用优酷呀。可你却经常只能在优酷上看到抄袭别人的作品，而且还不署名，而且还洋洋得意，而且还自我陶醉，就好像那个idea本来属于他自己一样。你看了还要惊呼，他是如此的有创意！好一个抄袭的创意，可你却不知道，因为你不知道这个世界上有个网站叫YouTube。 没有Twitter，我还可以用微博呀。可你想知道最近发生了什么，你搜的越勤快，越能看到越明显的“根据相关法律法规，相关搜索结果不予显示”。时间长了，你想，反正知道了也没什么用，不如不看了。 慢慢的，一扇又一扇的门关上了。今天你打开世界上最大的博客网站，发现它没了。明天你一看，世界上最好的设计师分享网站没了，一开始是刷新的很慢很慢，后来它就没了。过两天再一看，平常每天都会读两篇文章的媒体网站没了，那里的文章缤纷多彩，最后都变成了该页无法显示几个字。再过几个月，大学的网站不让上了，摄影师的网站不让上了，就连百度日本这种自家网站，也没了。 接着，漫画看不了了，接着，动画看不成了。接着，美剧英剧失踪了。下载美剧英剧的网站又又又失踪了。尊重正版，保护权益，行吧，然后字幕网站也没了。 游戏没了，你习惯性登陆的游戏网站，发现下载栏正在整治中。论坛关了，天天都在看的论坛，突然接到相关部门的电话，因为“报备问题”不让办了。个人网站，私人博客，对不起，说没就没有，你在上面存了多少多年辛勤耕耘的东西都没用。 你关注的人，有一天你登陆微博，发现他怎么好久都没说话了，然后你搜索了一下，发现他的账号不存在了，而且你搜他的名字，他的名字未予显示。 一盏一盏的灯，灭了。四面八方的光源，消失了。我们生活的五光十色的世界，变成了一片黑色。 天黑了，那么睡觉吧，但愿长醉不复醒。 最后，我们变成了一群做梦的人，这个梦的名字，叫根据相关法律法规，相关搜索结果不予显示梦。 作者：小海，来源：豆瓣网，原文已被和谐","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>几年以前，我曾经嘲笑过某科技界大佬。当时他说：也许90后、95后会慢慢不知道谷歌是什么网站。</p>\n<p>那一年，这对于我来说简直就是世界上最好笑的笑话。谷歌，全世界最卓越的互联网公司，活在互联网的一代中国人，会不知道他们的网站？</p>\n<p>今天，我收回这句嘲笑。因为这件不可能的事，它慢慢变成了现实。</p>\n<p>没有人再关注什么谷歌不谷歌。对他们来说，百度也蛮好用的，反正他们几乎没用过谷歌。没有谷歌又怎样？大家还是开心的刷微博，看微信，听歌，看娱乐节目。对于从来就不知道谷歌的人来说，少了谷歌又有什么影响？</p>\n<p><img src alt=\"慢慢的，就没有了，就像从未存在过\"></p>\n<p>多年前，我们也是可以登陆Facebook的。其实这个网站和校内一样，也挺蠢的。可在上面你能看到老外们的生活，可以轻易的跟一万公里以外的人互相拜访，可以看到很多根本不会开到校内上的主页。你用汉语回复，下面给你聊起来的可能是香港仔，可能是台湾人。你用英语回复，说不定有比你英语用的更蹩脚的寂寞的北欧人来跟你搭讪。你感觉地球真的变成了地球村，你还没拉门走出去，别人就推门走了进来。</p>\n<p>然后，它就没有了。起初，它的失踪激起了很大的声音，后来，声音就消失了。</p>\n<p>多年前，我们也是可以登陆Twitter的。其实这个网站和微博一样，也不过是些信息流，刷上一整天，也不见得有什么用处。但至少，你可以以最快速度获取你想知道的任何新事，你会真正了解什么事情在全世界是流行的，而不是经过各种截图、翻译、转发，甚至曲解、断章取义、黑白颠倒的东西。你知道的是真相，赤裸裸的，也许有点太短的真相。但至少中间不会有无数人的加工与再加工，偏激、片面，就在这个过程中产生了，不管后来者有意还是无意。</p>\n<p>然后，它就没有了。首先是它的本体没有了，然后它的模仿者也没有了，模仿者的模仿者也没有了。只剩一个模仿者的模仿者的模仿者，现在你每天能在上面看到无数广告。</p>\n<p>多年前，我们也是可以登陆YouTube的。对于有的人来说，这个网站就是个大型优酷，当年有人信誓旦旦的说，没有YouTube，我们中国人会很快让优酷超过YouTube。可这么多年过去了，视频还是那么卡，内容还是那么垃圾，原创还是那么容易被盗窃，视频丰富度还是那么的可怜。在YouTube上，你能看到全世界最棒的手艺人，最逗乐的笑话，最天马行空的创意，最激荡人心的音乐，最美好的完美瞬间，可在优酷上，你想看一分钟视频，请先看半分钟广告。</p>\n<p>哦，对了。Instagram，有些人可能感觉它和QQ空间也差不多。可我在上面关注了六百多个摄影师，它们都是顶好顶好的影像记录者，每天看他们的作品，我感觉到很幸福，那种即使没有到那里去，也身临其境的幸福。我还在上面认识了一个日本的爱自拍的帅小伙，一个爱喝酒的韩国大叔，一个十年前到过中国今天会在每张我发的紫禁城照片下点赞的美国大爷，一个美丽无比的俄罗斯妹子，我和他们基本上都难以交流，语言是很大的障碍，但几个简单的单词，心意也就到了，这种感觉，有时候比多年老友相聚还兴奋。因为这是人类不同族群自由交流互相沟通的过程，这种过程很神奇，真的很神奇。</p>\n<p>可现在，它没有了，它之所以没有就因为在某个特定的时间你在搜索特定的词汇时，会搜出来特定的照片。虽然这么搜的人并不多，虽然看到的人也不会大惊小怪，也不会觉得天黑了，天亮了，天要塌了，天要变了。可它就是没了，Instagram，就这么没了。谷歌也是这么没的，Twitter也是这么没的，Facebook也是这么没的。不知道是什么人，在什么场合，说了什么话，下了什么决定。就要有超过十亿人像陷于哥谭市的孤岛里一样，看着一座又一座桥梁被炸掉，又被炸掉，又被炸掉，然后，就什么都没了。</p>\n<p>我时常觉得悲哀，真的好悲哀，一个我根本不认识也不知道是谁的人，也许是一个群体，在不断抢走我身边的东西，而我却无能为力。我抱怨一声，他听不到，任何人都听不到。我怒吼一句，身边的大多数人却像看疯子一样的看着我。我哀嚎一声，这声音被阻碍在黑黑的幕墙以里。我发出尖锐的嘶吼，这声音传不了多远，就和我那被抢走的东西一样，消失了，不见了，就像从来没存在过一样。</p>\n<p>对于本来就没存在过的东西，有谁又会觉得在意呢？那些本来拥有又被掠夺的人的哀愁，后来的人又怎么懂呢？我曾经是拥有一切的，我曾经是拥有世界的，我站在这片土地上，呼吸的是自由的空气，饮下的是自由的琼浆玉液。就在长的无法计数的时间里，我自由生命的一部分又一部分就这么被杀死了，突然就杀死了。可我还始终觉得，它们还奄奄一息的活着，就像它们是慢慢的死去的一样。</p>\n<p>可它们终归是死了，而且随着它们的死，愈来愈多的事情慢慢的发生了，很慢很慢，几乎不被人察觉，可还是发生了。</p>\n<p>没有谷歌，我可以用百度呀。可某些结果被越挪越后，越挪越后，最后就不见了。就像本来就不该搜出这个结果一样。</p>\n<p>没有Facebook，我可以用校内呀。可你想发只有在Facebook上能发的文章，很快在校内上就失踪了。接着，校内变成了人人，话题变成了人人都关心的话题。大家都在抢着看星座、明星、八卦、娱乐。没有人会关心什么消失了，反正它们本来也没多少存在感。</p>\n<p>没有YouTube，我可以用优酷呀。可你却经常只能在优酷上看到抄袭别人的作品，而且还不署名，而且还洋洋得意，而且还自我陶醉，就好像那个idea本来属于他自己一样。你看了还要惊呼，他是如此的有创意！好一个抄袭的创意，可你却不知道，因为你不知道这个世界上有个网站叫YouTube。</p>\n<p>没有Twitter，我还可以用微博呀。可你想知道最近发生了什么，你搜的越勤快，越能看到越明显的“根据相关法律法规，相关搜索结果不予显示”。时间长了，你想，反正知道了也没什么用，不如不看了。</p>\n<p>慢慢的，一扇又一扇的门关上了。今天你打开世界上最大的博客网站，发现它没了。明天你一看，世界上最好的设计师分享网站没了，一开始是刷新的很慢很慢，后来它就没了。过两天再一看，平常每天都会读两篇文章的媒体网站没了，那里的文章缤纷多彩，最后都变成了该页无法显示几个字。再过几个月，大学的网站不让上了，摄影师的网站不让上了，就连百度日本这种自家网站，也没了。</p>\n<p>接着，漫画看不了了，接着，动画看不成了。接着，美剧英剧失踪了。下载美剧英剧的网站又又又失踪了。尊重正版，保护权益，行吧，然后字幕网站也没了。</p>\n<p>游戏没了，你习惯性登陆的游戏网站，发现下载栏正在整治中。论坛关了，天天都在看的论坛，突然接到相关部门的电话，因为“报备问题”不让办了。个人网站，私人博客，对不起，说没就没有，你在上面存了多少多年辛勤耕耘的东西都没用。</p>\n<p>你关注的人，有一天你登陆微博，发现他怎么好久都没说话了，然后你搜索了一下，发现他的账号不存在了，而且你搜他的名字，他的名字未予显示。</p>\n<p>一盏一盏的灯，灭了。四面八方的光源，消失了。我们生活的五光十色的世界，变成了一片黑色。</p>\n<p>天黑了，那么睡觉吧，但愿长醉不复醒。</p>\n<p>最后，我们变成了一群做梦的人，这个梦的名字，叫根据相关法律法规，相关搜索结果不予显示梦。</p>\n<p>作者：小海，来源：豆瓣网，原文已被和谐</p>\n","tags":[]},{"title":"OIer's News 【创刊期】","date":"2019-06-27T08:11:57.000Z","path":"archives/3790557036/","text":"创刊期 创刊期 大家坚定一个信念吧: 我们是OIER 我们是O——I——E——R！ 我们是OIer， 所以我们 不用在跑道上挥汗如雨； 不用在球场上健步如飞； 更不用在没事的时候， 经受非人的体能训练…… 但是， 我们却要把头脑 高速运转， 还要接受一大堆 大学生也只是 “了解即可”的知识， 把一个个抽象的问题 转化为一篇篇 优美的代码， 才能在F9按下以后 获得欢呼。 不要以为我们 机房里没有风吹， 没有日晒， 就比勤劳的体育生们轻松， 只不过是大脑和四肢 的区别罢了。 可是， OIer的寂寞和委屈又有谁能懂？ 自习课鏖战机房， 却被认为而是逃课上网； 为荣耀耽误考试去比赛， 却被认为是逃避。 体育的同学们虽然辛苦， 但在挥汗如雨的背后， 有人在喝彩鼓掌； 在风吹日晒的同时， 有粉丝在仰慕。 而我们呢？ 与UnAC较劲的时候， 只有那一遍遍的运行窗口， 知道我们的不屈； 刷题的漫漫长夜， 只有陪伴我们的笔记本电脑， 知道我们的不懈； 在自习课别人学习的时候， 只有板砖般的算法导论， 知道我们的进取； 在机房泡得抢不上饭的时候， 只有五毛一包的干脆面， 知道我们的执着…… 没有人会理解， OIer见面， 除了程序、算法之外 别无他言。 我们的世界里， 从来不会有游戏、歌星的出现。 这不是被家长逼迫的“小三门”， 是我们的兴趣， 我们的爱好， 乃至我们的事业。 每一个OIer都幻想着 自己脖子上可以 挂上一块沉甸甸的金牌， 而不是 万恶的应试教育的枷锁。 没准哪个OIer， 就是下一个艾伦•图灵， 挑战头脑的极限， 去做最不平凡的自己。。。。。。。 版权 一天 一天,我听我同学说: “有一群人,她们天天不分昼夜的从床上爬起来,说什么“0点打卡祭”什么鬼的。 每天坐在电脑前敲着一些奇奇怪怪的看不懂的鬼东西。 然后为了一个看不懂的绿色框框和一个AC\\color{green}ACAC不分昼夜的坐在电脑前。 还有,天天坐在电脑前不开一个游戏! 开什么叫做LuoGu啊,CSDN啦,博客园什么的鬼网页。 以及…… 真搞不懂！” 我笑了,这不就是我吗? 我转身归去。 他叫道:“喂！别跑！” 我没有停,只静静地留下一句:“有朝一日,你也会像他们一样,而我,已经是了……”","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"创刊期\"><a class=\"markdownIt-Anchor\" href=\"#创刊期\"></a> 创刊期</h2>\n<h3 id=\"创刊期-2\"><a class=\"markdownIt-Anchor\" href=\"#创刊期-2\"></a> 创刊期</h3>\n<p>大家坚定一个信念吧:</p>\n<p><img src=\"https://i.loli.net/2019/03/16/5c8c92d2107f5.png\" alt></p>\n<h2 id=\"我们是oier\"><a class=\"markdownIt-Anchor\" href=\"#我们是oier\"></a> 我们是OIER</h2>\n<h3 id=\"我们是oier-2\"><a class=\"markdownIt-Anchor\" href=\"#我们是oier-2\"></a> 我们是O——I——E——R！</h3>\n<p>我们是OIer， 所以我们 不用在跑道上挥汗如雨； 不用在球场上健步如飞； 更不用在没事的时候， 经受非人的体能训练……</p>\n<p>但是， 我们却要把头脑 高速运转， 还要接受一大堆 大学生也只是 “了解即可”的知识， 把一个个抽象的问题 转化为一篇篇 优美的代码， 才能在F9按下以后 获得欢呼。</p>\n<p>不要以为我们 机房里没有风吹， 没有日晒， 就比勤劳的体育生们轻松， 只不过是大脑和四肢 的区别罢了。</p>\n<p>可是， OIer的寂寞和委屈又有谁能懂？ 自习课鏖战机房， 却被认为而是逃课上网； 为荣耀耽误考试去比赛， 却被认为是逃避。 体育的同学们虽然辛苦， 但在挥汗如雨的背后， 有人在喝彩鼓掌； 在风吹日晒的同时， 有粉丝在仰慕。</p>\n<p>而我们呢？ 与UnAC较劲的时候， 只有那一遍遍的运行窗口， 知道我们的不屈； 刷题的漫漫长夜， 只有陪伴我们的笔记本电脑， 知道我们的不懈； 在自习课别人学习的时候， 只有板砖般的算法导论， 知道我们的进取； 在机房泡得抢不上饭的时候， 只有五毛一包的干脆面， 知道我们的执着……</p>\n<p>没有人会理解， OIer见面， 除了程序、算法之外 别无他言。 我们的世界里， 从来不会有游戏、歌星的出现。 这不是被家长逼迫的“小三门”， 是我们的兴趣， 我们的爱好， 乃至我们的事业。</p>\n<p>每一个OIer都幻想着 自己脖子上可以 挂上一块沉甸甸的金牌， 而不是 万恶的应试教育的枷锁。 没准哪个OIer， 就是下一个艾伦•图灵， 挑战头脑的极限， 去做最不平凡的自己。。。。。。。</p>\n<h4 id=\"版权\"><a class=\"markdownIt-Anchor\" href=\"#版权\"></a> 版权</h4>\n<p><img src=\"https://i.loli.net/2019/03/23/5c95ec9f01e9f.png\" alt=\"版权.PNG\"></p>\n<h3 id=\"一天\"><a class=\"markdownIt-Anchor\" href=\"#一天\"></a> 一天</h3>\n<p>一天,我听我同学说:</p>\n<p>“有一群人,<s>她</s>们天天不分昼夜的从床上爬起来,说什么“0点打卡祭”什么鬼的。</p>\n<p>每天坐在电脑前敲着一些奇奇怪怪的看不懂的鬼东西。</p>\n<p>然后为了一个看不懂的绿色框框和一个<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mstyle mathcolor=\"green\"><mi>A</mi><mi>C</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{green}AC</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"color:green;\">A</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;color:green;\">C</span></span></span></span>不分昼夜的坐在电脑前。</p>\n<p>还有,天天坐在电脑前不开一个游戏!</p>\n<p>开什么叫做LuoGu啊,CSDN啦,博客园什么的鬼网页。</p>\n<p>以及……</p>\n<p>真搞不懂！”</p>\n<p>我笑了,这不就是我吗?</p>\n<p>我转身归去。</p>\n<p>他叫道:“喂！别跑！”</p>\n<p>我没有停,只静静地留下一句:“有朝一日,你也会像他们一样,而我,已经是了……”</p>\n","tags":[]},{"title":"写代码的小女孩","date":"2019-05-30T16:02:57.000Z","path":"archives/1301002429/","text":"天冷极了，下着雪，又快黑了。这是NOIP的前夜。在这又冷又黑的晚上，一个衣衫破烂的小女孩在机房敲着代码。她从班里逃出来的时候还拿着一本算导，但是有什么用呢？那是一本很破旧的书——那么大，一向是她妈妈垫桌角的。她默写SPFA的时候，年级主任突然冲进机房，吓得她把算导都丢掉了。书叫一个学数竞捡起来拿着跑了。他说，他可以用那本书当草纸，证明切比雪夫定理。 小女孩只好自己写二叉堆，一双小脚冻得红一块青一块的。她面前的草纸堆得满满的，上面全是DP转移方程。这一整天，没有一个OJ让她AC一道题，她已经交了32遍采药了。 可怜的小女孩！她又冷又饿，浑身战栗地写着二叉堆。CRT显示器发出的光落在她的枯黄的长头发上，那干枯的头发打成卷儿披在肩上，看上去就像二叉树，不过她没注意这些。每个显示器里都透出光来，机房里飘着一股CPU发糊的怪味，因为这是NOIP前夜——她可忘不了这个。 她在主函数前面停了下来，蜷着趴在键盘上。她觉得更冷了。她不敢回家，因为她还没调完二叉堆，没写对一个DP方程，教练一定会骂她的。再说，换成别的数据结构，一样写不出来。这些题都太水，虽然神犇都写过题解了，但是题解上一般都只有三个字：傻X题。 她几乎绝望了。啊，哪怕一个函数不会RE，对她也是有好处的！她每写一遍程序，跑出来的结果就不一样，要是她有数据，她就知道哪一个程序是算对了的。她得不到数据了，因为机房上不去网了，全校的网速都让隔壁的年级主任拿来下小电影了。如果能保证下一个程序能AC，她就敢再写几十KB的代码，但是她是不敢啊，她怕又算出来一个奇葩的结果来。 她新建了一个cpp重写了程序。编译通过了了，样例过了。这次，她感觉自己站在IOI的考场中AK。学校的大门上，贴着“我校学生以国际金牌向110周年校庆献礼”的条幅。在班级内的非诚勿扰中，全班男生都给她留了灯。这时候，程序又RE了，她面前只有cmd上的黑底白字。 她又写了一道模拟。这一回，她坐在美丽的二叉堆下。这棵二叉堆，比她在丽洁代码中看到的常数还要小，还要短。眼前是许多优美动人的ASCII码，那些都是她写的程序，各种可爱的指针在跳跃着，满世界都是系统栈，都在向她眨眼睛。小女孩向眼前的系统栈伸出手去。这时候，眼前的ASCII码还在，条幅还在，指针还在，年级主任还是和蔼地微笑着。只见那些代码那些指针越升越高越升越高，最后成了在天空中闪烁的星星。有一颗星星落下来了，在天空中划出了一道细长的红光。 “有一个什么人快要死了。”小女孩说。唯一疼她的学姐保送之前告诉过她：一颗星星落下来，就有一个灵魂要到上帝那儿去了。 她notepad++中又写了一个快排。这一回，她把能用的IDE都用了。学姐出现在亮光里，是那么温和，那么快乐。 “学姐！”小女孩叫起来，“啊！请把我带走吧！我知道，系统栈一溢出，您就会不见的，像那校门的条幅，浮点数的精度，循环队列的空间一个样，就会不见的！” 她赶紧编译了5KB的高精度模板，要把学姐留住。一大把程序发出强烈的光，把机房照得跟白天一样明亮。学姐从来没有像现在这样温柔，这样美丽。她把小女孩抱起来，搂在怀里。她们俩在光明和快乐中飞走了，越飞越高，飞到那没有DP，没有图论，也没有数据结构的地方去了。 第二天清晨，这个小女孩坐在机房里，两腮通红，嘴上带着微笑。她死了，在NOIP的前夜死了。NOIP Day1的太阳升起来了，照在她小小的尸体上。小女孩坐在那儿，显示器上还有一坨编译过的代码。 “她想好好复习复赛。”人们说。谁也不知道她曾经看到过多么美丽的东西，她曾经多么幸福，跟着她学姐一起走向新世界的幸福中去。","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>天冷极了，下着雪，又快黑了。这是NOIP的前夜。在这又冷又黑的晚上，一个衣衫破烂的小女孩在机房敲着代码。她从班里逃出来的时候还拿着一本算导，但是有什么用呢？那是一本很破旧的书——那么大，一向是她妈妈垫桌角的。她默写SPFA的时候，年级主任突然冲进机房，吓得她把算导都丢掉了。书叫一个学数竞捡起来拿着跑了。他说，他可以用那本书当草纸，证明切比雪夫定理。</p>\n<p>小女孩只好自己写二叉堆，一双小脚冻得红一块青一块的。她面前的草纸堆得满满的，上面全是DP转移方程。这一整天，没有一个OJ让她AC一道题，她已经交了32遍采药了。</p>\n<p>可怜的小女孩！她又冷又饿，浑身战栗地写着二叉堆。CRT显示器发出的光落在她的枯黄的长头发上，那干枯的头发打成卷儿披在肩上，看上去就像二叉树，不过她没注意这些。每个显示器里都透出光来，机房里飘着一股CPU发糊的怪味，因为这是NOIP前夜——她可忘不了这个。</p>\n<p>她在主函数前面停了下来，蜷着趴在键盘上。她觉得更冷了。她不敢回家，因为她还没调完二叉堆，没写对一个DP方程，教练一定会骂她的。再说，换成别的数据结构，一样写不出来。这些题都太水，虽然神犇都写过题解了，但是题解上一般都只有三个字：傻X题。</p>\n<p>她几乎绝望了。啊，哪怕一个函数不会RE，对她也是有好处的！她每写一遍程序，跑出来的结果就不一样，要是她有数据，她就知道哪一个程序是算对了的。她得不到数据了，因为机房上不去网了，全校的网速都让隔壁的年级主任拿来下小电影了。如果能保证下一个程序能AC，她就敢再写几十KB的代码，但是她是不敢啊，她怕又算出来一个奇葩的结果来。 　　她新建了一个cpp重写了程序。编译通过了了，样例过了。这次，她感觉自己站在IOI的考场中AK。学校的大门上，贴着“我校学生以国际金牌向110周年校庆献礼”的条幅。在班级内的非诚勿扰中，全班男生都给她留了灯。这时候，程序又RE了，她面前只有cmd上的黑底白字。</p>\n<p>她又写了一道模拟。这一回，她坐在美丽的二叉堆下。这棵二叉堆，比她在丽洁代码中看到的常数还要小，还要短。眼前是许多优美动人的ASCII码，那些都是她写的程序，各种可爱的指针在跳跃着，满世界都是系统栈，都在向她眨眼睛。小女孩向眼前的系统栈伸出手去。这时候，眼前的ASCII码还在，条幅还在，指针还在，年级主任还是和蔼地微笑着。只见那些代码那些指针越升越高越升越高，最后成了在天空中闪烁的星星。有一颗星星落下来了，在天空中划出了一道细长的红光。</p>\n<p>“有一个什么人快要死了。”小女孩说。唯一疼她的学姐保送之前告诉过她：一颗星星落下来，就有一个灵魂要到上帝那儿去了。</p>\n<p>她notepad++中又写了一个快排。这一回，她把能用的IDE都用了。学姐出现在亮光里，是那么温和，那么快乐。 “学姐！”小女孩叫起来，“啊！请把我带走吧！我知道，系统栈一溢出，您就会不见的，像那校门的条幅，浮点数的精度，循环队列的空间一个样，就会不见的！”</p>\n<p>她赶紧编译了5KB的高精度模板，要把学姐留住。一大把程序发出强烈的光，把机房照得跟白天一样明亮。学姐从来没有像现在这样温柔，这样美丽。她把小女孩抱起来，搂在怀里。她们俩在光明和快乐中飞走了，越飞越高，飞到那没有DP，没有图论，也没有数据结构的地方去了。</p>\n<p>第二天清晨，这个小女孩坐在机房里，两腮通红，嘴上带着微笑。她死了，在NOIP的前夜死了。NOIP Day1的太阳升起来了，照在她小小的尸体上。小女孩坐在那儿，显示器上还有一坨编译过的代码。</p>\n<p>“她想好好复习复赛。”人们说。谁也不知道她曾经看到过多么美丽的东西，她曾经多么幸福，跟着她学姐一起走向新世界的幸福中去。</p>\n","tags":[]},{"title":"摘录自「SCP基金会」中的一些句子","date":"2019-05-28T14:34:00.000Z","path":"archives/2032683215/","text":"已死之人，向赴死者致敬。 我想要宪法赋予我的那个世界。 大概你的确是死了，但我们还在前行，消逝的能够被盖棺定论，而还存在着的仿徨呐喊抗争着，却在眨眼就会丧命，空中会窜出无敌吃人大蜥蜴，永远有儿童和女孩在惨叫的世界的黄昏里，拾起那一朵清晨看见过的花。 当你们的时代过去，请继续送出信息，好让下一个声音响起来对抗黑暗。 他们很快乐，至少在最后之前。不是所有的船都得在黑夜中航行。 你已经做完了你必须去做的事，现在，请休息吧，晚安。 我会使得我们的宇宙成为一个值得拯救的宇宙的。 她死在一个遥远的地方，脸上带着笑容，手里握着武器，身边围着敌人。她向我们展示了一个真正的战士应该是什么样子。 我看到一片广阔的海岸，在我们面前展现的事物超越头脑所能理解的范畴，沙滩上的每一粒沙子，每一滴水和空气分子都是在讲述一个故事。每个都是要被唱响的歌。他们每个人都充满生机，笑声，苦难和仇恨。他们都是一样的，即使他们都是不同的。 我爱你，红。我爱你，安娜。五年，十一个月，二十天。 那些受影响的人，是因为他们失去了他们内心世界的孩子。他们不能只看到最表面的东西，他们把自己的观点注入一切然后从中获取乐趣。 神破碎自己，我们才得完整. 所以我央求你：这—真知—绝不能被抹去、遗忘。这不是收容。这是疯狂。 大概人们能哀叹于你的不幸，但没人有资格评论你为&quot;不争&quot;。在这个遍布异常的世界里，努力在绝大多数人眼前拉上一张布帘。从无数扭曲而血腥的异常下保护绝大多数人类的我们，可能面对着每天都有值得尊敬的人因异常而死亡的不幸，但也能在和这一切抗争着的同时，期冀着一个立于晨间，蝴蝶环绕翩翩飞舞的世界。 他想起内布拉斯加的麦田。 用伤害无辜者来掩盖自己的错误是心虚的体现，也永远掩盖不了。 他们也一样。 根据完整版资料我发现，601被姜特工发现的地方，就在那段时期执行流产手术频率最高的医院原址，更精确一点说，就在那个医院的化粪池原址。那一百天内被强制流产或者“生下来就掐死”的数以万计的婴儿，他们本可能成为你，可能成为我，可能成为这个世界上的任何一个人和任何一个人的爱人，但他们的生命还没开始，就被埋葬在了那个化粪池。 ……是神又怎么样呢。这个国家最早的传说里并没有神的席位，取而代之的是被山挡住就决定挖山的农夫，被海淹死就去填海的小女孩，被太阳炙烤便搭箭指向太阳的猎人，或者从神那里偷来土壤治水的老人。“王侯将相，宁有种乎”，没错吧？我们的历史，从来不是由神兽或妖，而是由普通人来书写的。","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><blockquote>\n<p>已死之人，向赴死者致敬。</p>\n<p>我想要宪法赋予我的那个世界。</p>\n<p>大概你的确是死了，但我们还在前行，消逝的能够被盖棺定论，而还存在着的仿徨呐喊抗争着，却在眨眼就会丧命，空中会窜出无敌吃人大蜥蜴，永远有儿童和女孩在惨叫的世界的黄昏里，拾起那一朵清晨看见过的花。</p>\n<p>当你们的时代过去，请继续送出信息，好让下一个声音响起来对抗黑暗。</p>\n<p>他们很快乐，至少在最后之前。不是所有的船都得在黑夜中航行。</p>\n<p>你已经做完了你必须去做的事，现在，请休息吧，晚安。</p>\n<p>我会使得我们的宇宙成为一个值得拯救的宇宙的。</p>\n<p>她死在一个遥远的地方，脸上带着笑容，手里握着武器，身边围着敌人。她向我们展示了一个真正的战士应该是什么样子。</p>\n<p>我看到一片广阔的海岸，在我们面前展现的事物超越头脑所能理解的范畴，沙滩上的每一粒沙子，每一滴水和空气分子都是在讲述一个故事。每个都是要被唱响的歌。他们每个人都充满生机，笑声，苦难和仇恨。他们都是一样的，即使他们都是不同的。</p>\n<p>我爱你，红。我爱你，安娜。五年，十一个月，二十天。</p>\n<p>那些受影响的人，是因为他们失去了他们内心世界的孩子。他们不能只看到最表面的东西，他们把自己的观点注入一切然后从中获取乐趣。</p>\n<p>神破碎自己，我们才得完整.</p>\n<p>所以我央求你：这—真知—绝不能被抹去、遗忘。这不是收容。这是疯狂。</p>\n<p>大概人们能哀叹于你的不幸，但没人有资格评论你为&quot;不争&quot;。在这个遍布异常的世界里，努力在绝大多数人眼前拉上一张布帘。从无数扭曲而血腥的异常下保护绝大多数人类的我们，可能面对着每天都有值得尊敬的人因异常而死亡的不幸，但也能在和这一切抗争着的同时，期冀着一个立于晨间，蝴蝶环绕翩翩飞舞的世界。</p>\n<p>他想起内布拉斯加的麦田。</p>\n<p>用伤害无辜者来掩盖自己的错误是心虚的体现，也永远掩盖不了。</p>\n<p>他们也一样。</p>\n<p>根据完整版资料我发现，601被姜特工发现的地方，就在那段时期执行流产手术频率最高的医院原址，更精确一点说，就在那个医院的化粪池原址。那一百天内被强制流产或者“生下来就掐死”的数以万计的婴儿，他们本可能成为你，可能成为我，可能成为这个世界上的任何一个人和任何一个人的爱人，但他们的生命还没开始，就被埋葬在了那个化粪池。</p>\n<p>……是神又怎么样呢。这个国家最早的传说里并没有神的席位，取而代之的是被山挡住就决定挖山的农夫，被海淹死就去填海的小女孩，被太阳炙烤便搭箭指向太阳的猎人，或者从神那里偷来土壤治水的老人。“王侯将相，宁有种乎”，没错吧？我们的历史，从来不是由神兽或妖，而是由普通人来书写的。</p>\n</blockquote>\n","tags":[{"name":"SCP","slug":"SCP","permalink":"https://keepthethink.github.io/tags/SCP/"}]},{"title":"「文章转载」时代的悲哀","date":"2019-05-12T03:34:00.000Z","path":"archives/2640828482/","text":"周六晚，影响中国2018年度物颁奖典礼在国宾馆举行。杨超越获“影响中国年度演艺人物”奖项，人们不禁感慨： 真是一个敢给，一个敢接，杨超越怎么影响中国了？ 在微博热评中，有这样一句评论发人深省：“从这个人身上看到只要长得好看，就可以不劳而获。” “影响中国”这四个字何其之重？ 明星被捧上神坛，袁隆平却遭到辱骂，又是何等的悲哀？ “去年的今天超越还在村里，一年后的今天在钓鱼台国宾馆，什么小说也不敢这么写，魔幻现实主义。” 2018年对于杨超越是咸鱼翻身的一年。 一位从选秀节目《创造101》走红的选手，哭了整整一个夏天后，“蜕变”为国民锦鲤。 她在整个赛程中，几乎毫无进步，跳舞技能为零。 关键时刻只会哭，靠着傻白甜的人设收割大批粉丝，真正诠释了“爱哭的女孩运气不会太差。” 有人怒喊：“杨超越，你欠我10公升的公平和正义！” 从那之后，“杨超越”这三个字化身为锦鲤的存在，大量的粉丝应运而生。 “转发这个杨超越，不努力交白卷也能考第一名。” “转发杨超越，睡到心上人。” 王思聪在微博上说：“杨超越的出道是侮辱了其它十个人，侮辱了她们的努力、她们的汗水，她们的业务能力。” 可怕的不是锦鲤，而是转发锦鲤的人，真的相信杨超越的“成功”是一种偶然。 这个奖项不免让人想起今年5月份崔永元发的一个微博：一个真敢发，一个真敢领。 这条微博所指的正是范冰冰在今年获得了“国家精神造就者荣誉奖”事件。 相信大家心里都有共同的疑惑：她是如何代表国家精神的？ 后来，范冰冰缴纳了8.84亿的巨额罚款。 群众们纷纷表示：贫穷限制了我的想象力。 彼时一位老兵感概地说到: “8.84亿，是一名40岁的中国军人奋斗7998年的收入;8.84亿，足够列装一架歼20;8.84亿，能使中国多少贫困人口达到小康啊!” 字里行间，无不透露出这位八旬老人内心的苦楚与无奈。 2016年8月16日凌晨1点40分，由中国科学家自主研制的世界首颗量子科学实验卫星“墨子号”在酒泉卫星发射中心成功发射。 当英国等众多国家为之警惕、拍案叫绝时，我国人民却在“一心一意”关注王宝强与马蓉的离婚事件。 当屠呦呦获得诺贝尔奖时，黄晓明与Angelababy的婚礼热度已经让微博系统瘫痪。 后半段：之前网上晒出的当红演员的片酬表，Angelababy片酬8000万，鹿晗的报价竟高达1个亿！ 演着最烂的戏，拿着巨额片酬，享受前呼后拥的待遇。 当这些数字赤裸裸的出现时，我们一次次地感受到了痛彻心扉的悲凉。 我们不是没有英雄可以敬重，我们不是没有功臣可以仰慕。 但我们的生活，却为何在不知不觉中，被流量明星给占满了？ 前段时间，“杂交水稻之父“袁隆平上了热搜，不是被感恩，而是被辱骂。 有的人一转身，已为社会奉献半生心血。 晚年时，却等来一番莫须有的羞辱。 而所有的起因只是：袁隆平买了两部华为手机，摸了一下豪车，拥有一套别墅。 只因这些，网上就有人咒他暴毙。 “你是一个科学家，你怎么能那么有钱买两个华为手机？你怎么可以住豪宅？你怎么能摸豪车？“ 他们只看到了他摸豪车，却不知道他现在开的只是一辆不到十万元的国产代步车，只因年龄大了，无法再骑电动车。 他们只看到了他拥有一栋豪宅，却不知道这是国家奖励给他的，辛苦了一辈子这是他应得的。 这栋豪宅如今已被他改造为研究水稻的科研室。袁隆平就在这栋豪宅里，日夜劳作，成功孕育出了海水种植耐盐碱水稻。 只靠这一项成果，我国一年可以增产粮食500亿公斤，可以多养活2亿中国人。 而这吃着粮食的人，却正在骂他晚年不保。 就在今年11月18日，第三届未来科学大奖颁奖典礼在北京举行，袁隆平获得未来科学大奖——生命科学奖的消息，早已淹没在各种明星八卦的热搜里。 没有人再去关注当年那个为了让中国人吃饱肚子，而倾尽一生的袁隆平。 他们更不知道，在今年的未来科学大奖典礼上，袁隆平老先生，倾诉了自己的两个梦想。 他眼里含着热泪说： “我有两个梦，一个是禾下乘凉梦；还有一个梦，就是杂交水稻走向世界，覆盖全球梦。让杂交水稻能造福世界人民，为保障世界粮食安全发挥重大作用。” 每一句，都深深刺痛了大家的心。 当有些人舒舒服服坐在空调房里，为抖音主播刷礼物时。这位88岁的老人，仍然拖着年老的身体，在炎炎夏日蹒跚踱步，到了田地里。中暑是常有的事，他会随身带着药片防止晕倒。 袁隆平说：“我毕生的追求，就是让所有人都远离饥饿。” 2016年《面对面》采访袁隆平，他用近乎哽咽的声音说： “我86岁了，身体不好了。” 早在几年前，老先生就被查出患有慢阻肺。这种病的治愈率非常低，目前能被治愈的患者只有不到30%。 他的家人都担心他的身体，劝他退休，不要再下田了。 可袁隆平老先生却始终坚持： “我要在90岁前能够实现杂交水稻大面积示范亩产1200公斤，向党的100岁生日献礼，这是我的一个愿望。” 一字一句，满是真心。 老先生很少在媒体上露面，只因为：太浪费时间了，他的大量时间都是在稻田里，拖着年迈的身体，顶着烈日劳作。 他平时穿的衣服，简单素朴，没有名牌，一件衣服只花几十块钱。 在许多吃饱了肚子的农民眼里，袁隆平是“米菩萨”，是“神农下凡”。 当他听到这番盛赞时，急忙说到：“不敢当，实在不敢当啊。 菩萨在老百姓心中是能救苦救难的，我又何德何能，我就是个种了一辈子稻子的农民而已。” 明星出轨了，有人站出来这有什么大不了的，一个巴掌拍不响；明星家暴了，有人分分钟站出来为他澄清；明星吸毒了，有人立马说他只是一时糊涂，原谅他吧。 而如今，袁隆平老先生只是买了两个华为手机，就被诅咒暴毙。 在他们的眼里，作为一个科学家，你必须穷！ 他们战战兢兢了一辈子，到头来却不允许他们过上好的生活。 这不禁让人想起那些坚持原创的独立音乐人，当他们过上好的生活后，人们会质疑他变了，撂下一句：“你作为一个独立音乐人，让你穷着挺好的。” 迟暮英雄被辱骂诅咒，流量明星拿着高价片酬，扪心自问一下，我们真的问心无愧吗？ 现如今孩子们的梦想不再是当科学家，老师，工程师……而是整容当网红，做主播，参加选秀节目当明星。 宋丹丹曾在全国政协十二届第五次会议发出了这样的感慨：“那么多年轻人都想做网红，我很担忧。“ 当下的网红门槛极低，没有学历要求，只要你拥有一张好看的脸蛋，敢于上镜头，世界就是你的。 网络上的主播坐在几平米的房间里，浓妆艳抹，打上灯光，和屏幕那头的粉丝们聊聊天、唱唱歌、讲讲笑话就可以收入几千甚至几万块。 越来越多的年轻人不再追求理想，也早已忘记初心。认为只要长得好看，就可以当饭吃。 十月份，一名叫“莉哥”的网红女主播因涉嫌在直播过程中，有辱国歌尊严，引发网民反感。 前段时间，有一名叫“蛇哥”的男主播为了吸人眼球，在自己妻子生产时，竟然打开了手机，在生产当天开启了直播！让大家看着他老婆生孩子！足足有50万人来围观！ 蛇哥的妻子躺在产房里很害怕，他边直播边安慰说：“别怕，有这么多人陪着你。” 然而，就在蛇哥和看直播的粉丝互相竞猜孩子是男孩还是女孩时，直播间被虎牙官方直接封禁。 类似的事情数不胜数，让人不禁感慨到：是什么让这些人肆无忌惮？ 其实人们担忧的不是网红本身，而是当下越来越多的年轻人的价值观发生了扭曲，认为读书无用，只要长得好看就可以赢得掌声和鲜花。 鲁迅说：“我们自古以来，就有埋头苦干的人，有拼命硬干的人，有为民请命的人，有舍身求法的人…… 虽是等于为帝王将相作家谱的所谓‘正史’，也往往掩不住他们的光耀，这就是中国的脊梁。” 今日，我们虽不缺乏鲁迅口中的苦干、硬干、实干家，也不缺为民请命的理想者，但却缺少了一份敬重，缺少了一份理性。 今日，我们虽然需要蓬勃发展的文化生活，需要技艺精湛、德才兼备的好艺术家，但却真的不需要那些流量明星和低俗文化霸占热搜榜。 在追求流量的时代，人们渐渐地失掉初心与本真，不再思考生命与自我的意义，而是追求虚无的浮华。 狄更斯说：“这是一个最好的时代，这是一个最坏的时代。 人们面前应有尽有，人们面前一无所有。” 时代的好坏，取决于我们每一个人，究竟是选择沉沦，还是选择思考。 希望我们身边，能少一些端起碗来吃饭、放下筷子骂人的喷子，能多一些像袁隆平这样的实干家！","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>周六晚，影响中国2018年度物颁奖典礼在国宾馆举行。杨超越获“影响中国年度演艺人物”奖项，人们不禁感慨：</p>\n<p>真是一个敢给，一个敢接，杨超越怎么影响中国了？</p>\n<p>在微博热评中，有这样一句评论发人深省：“从这个人身上看到只要长得好看，就可以不劳而获。”</p>\n<p>“影响中国”这四个字何其之重？</p>\n<p>明星被捧上神坛，袁隆平却遭到辱骂，又是何等的悲哀？</p>\n<p>“去年的今天超越还在村里，一年后的今天在钓鱼台国宾馆，什么小说也不敢这么写，魔幻现实主义。”</p>\n<p>2018年对于杨超越是咸鱼翻身的一年。</p>\n<p>一位从选秀节目《创造101》走红的选手，哭了整整一个夏天后，“蜕变”为国民锦鲤。</p>\n<p>她在整个赛程中，几乎毫无进步，跳舞技能为零。</p>\n<p>关键时刻只会哭，靠着傻白甜的人设收割大批粉丝，真正诠释了“爱哭的女孩运气不会太差。”</p>\n<p>有人怒喊：“杨超越，你欠我10公升的公平和正义！”</p>\n<p>从那之后，“杨超越”这三个字化身为锦鲤的存在，大量的粉丝应运而生。</p>\n<p>“转发这个杨超越，不努力交白卷也能考第一名。” “转发杨超越，睡到心上人。”</p>\n<p>王思聪在微博上说：“杨超越的出道是侮辱了其它十个人，侮辱了她们的努力、她们的汗水，她们的业务能力。”</p>\n<p>可怕的不是锦鲤，而是转发锦鲤的人，真的相信杨超越的“成功”是一种偶然。</p>\n<p>这个奖项不免让人想起今年5月份崔永元发的一个微博：一个真敢发，一个真敢领。</p>\n<p>这条微博所指的正是范冰冰在今年获得了“国家精神造就者荣誉奖”事件。</p>\n<p>相信大家心里都有共同的疑惑：她是如何代表国家精神的？</p>\n<p>后来，范冰冰缴纳了8.84亿的巨额罚款。</p>\n<p>群众们纷纷表示：贫穷限制了我的想象力。</p>\n<p>彼时一位老兵感概地说到:</p>\n<p>“8.84亿，是一名40岁的中国军人奋斗7998年的收入;8.84亿，足够列装一架歼20;8.84亿，能使中国多少贫困人口达到小康啊!”</p>\n<p>字里行间，无不透露出这位八旬老人内心的苦楚与无奈。</p>\n<p>2016年8月16日凌晨1点40分，由中国科学家自主研制的世界首颗量子科学实验卫星“墨子号”在酒泉卫星发射中心成功发射。</p>\n<p>当英国等众多国家为之警惕、拍案叫绝时，我国人民却在“一心一意”关注王宝强与马蓉的离婚事件。</p>\n<p>当屠呦呦获得诺贝尔奖时，黄晓明与Angelababy的婚礼热度已经让微博系统瘫痪。</p>\n<p>后半段：之前网上晒出的当红演员的片酬表，Angelababy片酬8000万，鹿晗的报价竟高达1个亿！</p>\n<p>演着最烂的戏，拿着巨额片酬，享受前呼后拥的待遇。</p>\n<p>当这些数字赤裸裸的出现时，我们一次次地感受到了痛彻心扉的悲凉。</p>\n<p>我们不是没有英雄可以敬重，我们不是没有功臣可以仰慕。</p>\n<p>但我们的生活，却为何在不知不觉中，被流量明星给占满了？</p>\n<p>前段时间，“杂交水稻之父“袁隆平上了热搜，不是被感恩，而是被辱骂。</p>\n<p>有的人一转身，已为社会奉献半生心血。</p>\n<p>晚年时，却等来一番莫须有的羞辱。</p>\n<p>而所有的起因只是：袁隆平买了两部华为手机，摸了一下豪车，拥有一套别墅。</p>\n<p>只因这些，网上就有人咒他暴毙。</p>\n<p>“你是一个科学家，你怎么能那么有钱买两个华为手机？你怎么可以住豪宅？你怎么能摸豪车？“</p>\n<p>他们只看到了他摸豪车，却不知道他现在开的只是一辆不到十万元的国产代步车，只因年龄大了，无法再骑电动车。</p>\n<p>他们只看到了他拥有一栋豪宅，却不知道这是国家奖励给他的，辛苦了一辈子这是他应得的。</p>\n<p>这栋豪宅如今已被他改造为研究水稻的科研室。袁隆平就在这栋豪宅里，日夜劳作，成功孕育出了海水种植耐盐碱水稻。</p>\n<p>只靠这一项成果，我国一年可以增产粮食500亿公斤，可以多养活2亿中国人。</p>\n<p>而这吃着粮食的人，却正在骂他晚年不保。</p>\n<p>就在今年11月18日，第三届未来科学大奖颁奖典礼在北京举行，袁隆平获得未来科学大奖——生命科学奖的消息，早已淹没在各种明星八卦的热搜里。</p>\n<p>没有人再去关注当年那个为了让中国人吃饱肚子，而倾尽一生的袁隆平。</p>\n<p>他们更不知道，在今年的未来科学大奖典礼上，袁隆平老先生，倾诉了自己的两个梦想。</p>\n<p>他眼里含着热泪说：</p>\n<p>“我有两个梦，一个是禾下乘凉梦；还有一个梦，就是杂交水稻走向世界，覆盖全球梦。让杂交水稻能造福世界人民，为保障世界粮食安全发挥重大作用。”</p>\n<p>每一句，都深深刺痛了大家的心。</p>\n<p>当有些人舒舒服服坐在空调房里，为抖音主播刷礼物时。这位88岁的老人，仍然拖着年老的身体，在炎炎夏日蹒跚踱步，到了田地里。中暑是常有的事，他会随身带着药片防止晕倒。</p>\n<p>袁隆平说：“我毕生的追求，就是让所有人都远离饥饿。”</p>\n<p>2016年《面对面》采访袁隆平，他用近乎哽咽的声音说：</p>\n<p>“我86岁了，身体不好了。”</p>\n<p>早在几年前，老先生就被查出患有慢阻肺。这种病的治愈率非常低，目前能被治愈的患者只有不到30%。</p>\n<p>他的家人都担心他的身体，劝他退休，不要再下田了。</p>\n<p>可袁隆平老先生却始终坚持：</p>\n<p>“我要在90岁前能够实现杂交水稻大面积示范亩产1200公斤，向党的100岁生日献礼，这是我的一个愿望。”</p>\n<p>一字一句，满是真心。</p>\n<p>老先生很少在媒体上露面，只因为：太浪费时间了，他的大量时间都是在稻田里，拖着年迈的身体，顶着烈日劳作。</p>\n<p>他平时穿的衣服，简单素朴，没有名牌，一件衣服只花几十块钱。</p>\n<p>在许多吃饱了肚子的农民眼里，袁隆平是“米菩萨”，是“神农下凡”。</p>\n<p>当他听到这番盛赞时，急忙说到：“不敢当，实在不敢当啊。</p>\n<p>菩萨在老百姓心中是能救苦救难的，我又何德何能，我就是个种了一辈子稻子的农民而已。”</p>\n<p>明星出轨了，有人站出来这有什么大不了的，一个巴掌拍不响；明星家暴了，有人分分钟站出来为他澄清；明星吸毒了，有人立马说他只是一时糊涂，原谅他吧。</p>\n<p>而如今，袁隆平老先生只是买了两个华为手机，就被诅咒暴毙。</p>\n<p>在他们的眼里，作为一个科学家，你必须穷！</p>\n<p>他们战战兢兢了一辈子，到头来却不允许他们过上好的生活。</p>\n<p>这不禁让人想起那些坚持原创的独立音乐人，当他们过上好的生活后，人们会质疑他变了，撂下一句：“你作为一个独立音乐人，让你穷着挺好的。”</p>\n<p>迟暮英雄被辱骂诅咒，流量明星拿着高价片酬，扪心自问一下，我们真的问心无愧吗？</p>\n<p>现如今孩子们的梦想不再是当科学家，老师，工程师……而是整容当网红，做主播，参加选秀节目当明星。</p>\n<p>宋丹丹曾在全国政协十二届第五次会议发出了这样的感慨：“那么多年轻人都想做网红，我很担忧。“</p>\n<p>当下的网红门槛极低，没有学历要求，只要你拥有一张好看的脸蛋，敢于上镜头，世界就是你的。</p>\n<p>网络上的主播坐在几平米的房间里，浓妆艳抹，打上灯光，和屏幕那头的粉丝们聊聊天、唱唱歌、讲讲笑话就可以收入几千甚至几万块。</p>\n<p>越来越多的年轻人不再追求理想，也早已忘记初心。认为只要长得好看，就可以当饭吃。</p>\n<p>十月份，一名叫“莉哥”的网红女主播因涉嫌在直播过程中，有辱国歌尊严，引发网民反感。</p>\n<p>前段时间，有一名叫“蛇哥”的男主播为了吸人眼球，在自己妻子生产时，竟然打开了手机，在生产当天开启了直播！让大家看着他老婆生孩子！足足有50万人来围观！</p>\n<p>蛇哥的妻子躺在产房里很害怕，他边直播边安慰说：“别怕，有这么多人陪着你。”</p>\n<p>然而，就在蛇哥和看直播的粉丝互相竞猜孩子是男孩还是女孩时，直播间被虎牙官方直接封禁。</p>\n<p>类似的事情数不胜数，让人不禁感慨到：是什么让这些人肆无忌惮？<br>\n其实人们担忧的不是网红本身，而是当下越来越多的年轻人的价值观发生了扭曲，认为读书无用，只要长得好看就可以赢得掌声和鲜花。</p>\n<p>鲁迅说：“我们自古以来，就有埋头苦干的人，有拼命硬干的人，有为民请命的人，有舍身求法的人……</p>\n<p>虽是等于为帝王将相作家谱的所谓‘正史’，也往往掩不住他们的光耀，这就是中国的脊梁。”</p>\n<p>今日，我们虽不缺乏鲁迅口中的苦干、硬干、实干家，也不缺为民请命的理想者，但却缺少了一份敬重，缺少了一份理性。</p>\n<p>今日，我们虽然需要蓬勃发展的文化生活，需要技艺精湛、德才兼备的好艺术家，但却真的不需要那些流量明星和低俗文化霸占热搜榜。</p>\n<p>在追求流量的时代，人们渐渐地失掉初心与本真，不再思考生命与自我的意义，而是追求虚无的浮华。</p>\n<p>狄更斯说：“这是一个最好的时代，这是一个最坏的时代。</p>\n<p>人们面前应有尽有，人们面前一无所有。”</p>\n<p>时代的好坏，取决于我们每一个人，究竟是选择沉沦，还是选择思考。</p>\n<p>希望我们身边，能少一些端起碗来吃饭、放下筷子骂人的喷子，能多一些像袁隆平这样的实干家！</p>\n","tags":[{"name":"转载","slug":"转载","permalink":"https://keepthethink.github.io/tags/转载/"},{"name":"社会","slug":"社会","permalink":"https://keepthethink.github.io/tags/社会/"},{"name":"网络","slug":"网络","permalink":"https://keepthethink.github.io/tags/网络/"}]},{"title":"洛谷题解 P1226 【【模板】快速幂||取余运算】","date":"2019-04-30T07:04:00.000Z","path":"archives/3299158642/","text":"题目描述 洛谷P1226 说明 看到题解里貌似并没有Python的题解，我来发一个，共两行。 众所周知，为什么有时候洛谷er们要用Python呢？因为Python里已经包装了很多算法，用在OI中基本上等于打游戏时开外挂。虽然 对于这道题，Python 3中有一个数学函数pow()，它在help()函数中的说明是这样的： pow(x, y, z=None, /) Equivalent to x**y (with two arguments) or x**y % z (with three arguments) Some types, such as ints, are able to use a more efficient algorithm when invoked using the three argument form. x**y % z，这正好就是这道题所用到的算法，所以直接调用pow(b, p, k)就OK了。一般来说，编程语言本身的库函数都会往死里优化，基本上不用担心时间复杂度的问题。（除了某些特别坑的） 最后要注意的一点就是，很多人提交Python都莫名RE，原因是Python 3的input()函数返回的是字符串，必须用int()转换为整数。如果一行有多个数字，则调用split()方法分割成多个字符串。 上代码： a = input().split() print(a[0] + '^' + a[1] + ' mod ' + a[2] + '=' + str(pow(int(a[0]), int(a[1]), int(a[2]))))","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\"></a> 题目描述</h1>\n<p><a href=\"https://www.luogu.org/problemnew/show/P1226\" target=\"_blank\" rel=\"noopener\">洛谷P1226</a></p>\n<h1 id=\"说明\"><a class=\"markdownIt-Anchor\" href=\"#说明\"></a> 说明</h1>\n<p>看到题解里貌似并没有Python的题解，我来发一个，共两行。</p>\n<p>众所周知，为什么有时候洛谷er们要用Python呢？因为Python里已经包装了很多算法，用在OI中基本上等于打游戏时开外挂。虽然</p>\n<p>对于这道题，Python 3中有一个数学函数pow()，它在help()函数中的说明是这样的：</p>\n<pre class=\"highlight\"><code class=\"python\">pow(x, y, z=<span class=\"hljs-literal\">None</span>, /)\n    Equivalent to x**y (<span class=\"hljs-keyword\">with</span> two arguments) <span class=\"hljs-keyword\">or</span> x**y % z (<span class=\"hljs-keyword\">with</span> three arguments)\n\n    Some types, such <span class=\"hljs-keyword\">as</span> ints, are able to use a more efficient algorithm when\n    invoked using the three argument form.\n</code></pre>\n<p><code>x**y % z</code>，这正好就是这道题所用到的算法，所以直接调用<code>pow(b, p, k)</code>就OK了。一般来说，编程语言本身的库函数都会往死里优化，基本上不用担心时间复杂度的问题。（除了某些特别坑的）</p>\n<p>最后要注意的一点就是，很多人提交Python都莫名RE，原因是Python 3的<code>input()</code>函数返回的是字符串，必须用<code>int()</code>转换为整数。如果一行有多个数字，则调用<code>split()</code>方法分割成多个字符串。</p>\n<p>上代码：</p>\n<pre class=\"highlight\"><code class=\"python\">a = input().split()\nprint(a[<span class=\"hljs-number\">0</span>] + <span class=\"hljs-string\">'^'</span> + a[<span class=\"hljs-number\">1</span>] + <span class=\"hljs-string\">' mod '</span> + a[<span class=\"hljs-number\">2</span>] + <span class=\"hljs-string\">'='</span> + str(pow(int(a[<span class=\"hljs-number\">0</span>]), int(a[<span class=\"hljs-number\">1</span>]), int(a[<span class=\"hljs-number\">2</span>]))))\n</code></pre>\n","tags":[{"name":"洛谷","slug":"洛谷","permalink":"https://keepthethink.github.io/tags/洛谷/"},{"name":"题解","slug":"题解","permalink":"https://keepthethink.github.io/tags/题解/"}]},{"title":"「文章转载」赛博空间独立宣言","date":"2019-04-26T09:27:15.000Z","path":"archives/142292747/","text":"工业世界的政府，你们这些肉体和钢铁的巨人，令人厌倦，我来自赛博空间，思维的新家园。以未来的名义，我要求属于过去的你们，不要干涉我们的自由。我们不欢迎你们，我们聚集的地方，你们不享有主权。 我们没有民选政府，将来也不会有，所以我现在跟你们讲话，运用的不过是自由言说的权威。我宣布，我们建立的全球社会空间，自然地不受你们强加给我们的专制的约束。你们没有任何道德权利统治我们，你们也没有任何强制方法，让我们真的有理由恐惧。 政府的正当权利来自被统治者的同意。你们从来没有要求过我们的同意，你们也没有得到我们的同意。我们没有邀请你来，你们不了解我们，不了解我们的世界。赛博空间不在你们的疆界之内。不要认为你们可以建造这样一个疆界，好像建造一座公共建筑。你们没有这个能力。这个疆界是一件自然行为，它将从我们的集体行动中生发出来。 你们从来没有参加过我们的大会，你们也没有创造我们的市场财富。对我们的文化，我们的道德，我们的不成文法典，你们一无所知，这些法典已经在维护我们社会的秩序，比你们的任何强制所能达到的要好得多。 你们说我们有问题，你们要解决这些问题。你们用这个借口侵犯我们的领地。你们所宣称的这些问题，许多都不存在。真正冲突出现的时候，不公正出现的时候，我们自己会鉴定它，用自己的方式解决它。我们正在形成我们自己的社会契约。治理将出现，但根据的是我们世界的情况，不是你们的。我们的世界，是不同的。 赛博空间由交易、关系和思想本身构成，它们像一道永恒的波浪，在我们的交流之网上部署着。我们的世界无处不在，又无处可寻，我们的世界不是肉体存在的世界。 我们正在创造一个新世界，人人都可以进入这个世界，而不必考虑由种族、经济力、武力、出生地而来的特权或偏见。 我们正在创造一个新世界，人人、处处可以表达他或她的信仰，无论这种信仰是多么古怪，而不再害怕被强制沉默或强制一律。 你们关于财产、表达、身份、迁徙的法律概念及其关联对我们不适用。这些概念建立在物质的基础上，我们这里没有物质。 我们的身份不涉及肉体，所以和你们不一样，我们不能通过肉体的强制来获得秩序。我们相信，我们的治道将从伦理、明智的自我利益和公益中产生出来。我们的身份可能分布在你们许许多多的法律管辖中。我们全部的立宪文化能够普遍认可的唯一法律就是这样一个法则：己所不欲，勿施予人。我们希望能在这个基础上确立我们特殊的解决方案。但是我们不能接受你们企图强加给我们的解决方案。","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>工业世界的政府，你们这些肉体和钢铁的巨人，令人厌倦，我来自赛博空间，思维的新家园。以未来的名义，我要求属于过去的你们，不要干涉我们的自由。我们不欢迎你们，我们聚集的地方，你们不享有主权。</p>\n<p>我们没有民选政府，将来也不会有，所以我现在跟你们讲话，运用的不过是自由言说的权威。我宣布，我们建立的全球社会空间，自然地不受你们强加给我们的专制的约束。你们没有任何道德权利统治我们，你们也没有任何强制方法，让我们真的有理由恐惧。</p>\n<p>政府的正当权利来自被统治者的同意。你们从来没有要求过我们的同意，你们也没有得到我们的同意。我们没有邀请你来，你们不了解我们，不了解我们的世界。赛博空间不在你们的疆界之内。不要认为你们可以建造这样一个疆界，好像建造一座公共建筑。你们没有这个能力。这个疆界是一件自然行为，它将从我们的集体行动中生发出来。</p>\n<p>你们从来没有参加过我们的大会，你们也没有创造我们的市场财富。对我们的文化，我们的道德，我们的不成文法典，你们一无所知，这些法典已经在维护我们社会的秩序，比你们的任何强制所能达到的要好得多。</p>\n<p>你们说我们有问题，你们要解决这些问题。你们用这个借口侵犯我们的领地。你们所宣称的这些问题，许多都不存在。真正冲突出现的时候，不公正出现的时候，我们自己会鉴定它，用自己的方式解决它。我们正在形成我们自己的社会契约。治理将出现，但根据的是我们世界的情况，不是你们的。我们的世界，是不同的。</p>\n<p>赛博空间由交易、关系和思想本身构成，它们像一道永恒的波浪，在我们的交流之网上部署着。我们的世界无处不在，又无处可寻，我们的世界不是肉体存在的世界。</p>\n<p>我们正在创造一个新世界，人人都可以进入这个世界，而不必考虑由种族、经济力、武力、出生地而来的特权或偏见。</p>\n<p>我们正在创造一个新世界，人人、处处可以表达他或她的信仰，无论这种信仰是多么古怪，而不再害怕被强制沉默或强制一律。</p>\n<p>你们关于财产、表达、身份、迁徙的法律概念及其关联对我们不适用。这些概念建立在物质的基础上，我们这里没有物质。</p>\n<p>我们的身份不涉及肉体，所以和你们不一样，我们不能通过肉体的强制来获得秩序。我们相信，我们的治道将从伦理、明智的自我利益和公益中产生出来。我们的身份可能分布在你们许许多多的法律管辖中。我们全部的立宪文化能够普遍认可的唯一法律就是这样一个法则：己所不欲，勿施予人。我们希望能在这个基础上确立我们特殊的解决方案。但是我们不能接受你们企图强加给我们的解决方案。</p>\n","tags":[{"name":"转载","slug":"转载","permalink":"https://keepthethink.github.io/tags/转载/"},{"name":"网络","slug":"网络","permalink":"https://keepthethink.github.io/tags/网络/"}]},{"title":"DNS-over-HTTPS(DoH)简析与配置","date":"2019-04-15T13:45:00.000Z","path":"archives/2251452003/","text":"本文同步发布于 Heliumの博客，到我的博客阅读体验更佳QwQ DNS是什么 DNS（Domain Name System）是一项网络服务，用途是对全球各个网站的域名进行解析。如果听不懂上面这句话也没关系，接下来会讲解。如果你是网络方面的大牛可以直接跳过或关闭此网页。 简明易懂的DNS 举个例子，从前有个叫小明的人（目测此人已累死），开了一家商店。一开始顾客要去购物时,就直接去商店里买。 但由于网络环境的复杂性，让顾客直接记住地址是不太可能的。（你试试看？）于是就有人动了脑筋，推出了一样类似DNS的服务：你只需要说出地点（小明杂货店），服务商就会开车送你去目的地。 很多大公司实际上都推出了这份服务，例如阿里，百度，谷歌，Cloudflare等。 实际网络中的DNS，则是向服务器询问域名，而服务器返回IP地址。 顺便推荐几个质量好的良心DNS如下： Cloudflare DNS: 1.1.1.1, 1.0.0.1 Google Public DNS: 8.8.8.8, 8.8.4.4 OpenDNS 208.67.222.222, 208.67.220.220 DNS查询 看到这里你可能有疑惑了，难道每一台DNS服务器都储存了很多IP地址和域名的对应吗？不是。一这很浪费空间，二这样很难更新。 以我的博客地址keepthethink.github.io为例，当你输入地址后： 1.你的电脑首先会去询问DNS服务器； 这个“DNS服务器”可能在任何地方，可能就在你家的路由器上，也有可能在万里之遥的灯塔国QwQ（如果你是非酋 当然，一般来讲你的路由器上不会真的有一个DNS服务端，如果你在本地登录912.168.0.1或192.168.1.1，你就会看到在“DNS”设置那一栏会有你的ISP的DNS地址（当然，如果你想把它换成公共DNS也可以，但要为你自己的网速负责。） 2.DNS服务器询问所谓“根服务器”； 根服务器询问.io域名的权威服务器； .io域名的权威服务器询问.github.io域名的权威服务器; .github.io域名的权威服务器将IP告知你的电脑； OK （这套措施实在是找不到合适的比喻，看不懂就跳过吧。） 注意事项 如果你访问的是一些比较国际化的网站，而且还使用了国外的DNS服务器，有可能会会给你分配个国外的IP地址。 举个最基础的例子：Hexo博客在注册网址时，进行的国内外分流。这是不排除某些睿智国外DNS不管三七二十一给你个国外地址的情形。 DNS缓存 这么干，空间的确节省了很多，但效率显然就更慢了。所以，DNS服务器中一般有个“缓存”，当你重复询问同一个网址时，直接找出缓存记录并答复。当然，每个一定的时间会更新缓存。 既然这套措施已经很完美了，那DoH是干嘛的？别急，马上就讲。 DNS劫持与HTTP劫持 DNS劫持：当DNS不那么老实 打个比方： 从前有个叫小刚的，他也开了家杂货店； 小刚发现小明的杂货店有很多客户，分外眼红，便拿钱贿赂了DNS服务商，于是，当顾客要求DNS服务商将其带到“小明杂货店”是，DNS会不管三七二十一将其带到“小刚杂货店”。在网络中，则是DNS服务器故意给出错误的IP地址。 这显然是无计可施的，一般来说，遇到这种人品烂的掉渣的服务商，最好的办法就是换一家，好在这年头网络条件不错，大多数DNS都不搞这种事。 但是，对于DNS劫持，刚才讲的一种情况并非最常见的，最常见的事下面这种： 假设只有服务商A收了贿赂，而服务商B没有。当你向DNS服务商B打电话时，你的电话服务商将其转接到服务商A，那你就前功尽弃了。唯一的方法是使用DNS-over-HTTPS，后面会讲解。 HTTP劫持：当ISP不那么老实 假设你向DNS服务器打了个电话，“我要去小明杂货店。”结果你的电话服务商窃听了这句话，得知了你的行程；甚至将其修改为“我要去小刚杂货店。”，然后你就不明不白的被带到了另一个地方。 在这种情况下，你的DNS服务商是老实可靠的，但你的ISP（网络服务提供商）则不那么可靠。当然，一般的ISP并没有那么猖狂，他们最多不过是往你身上塞几张奇♂怪♂的广♂告♂（想必大家都有这样的经历。）你有时候会不会发现你看到的广告就是最近曾经关注过的事物？ 你也许会说，可以修改DNS来解决这个问题，但如果你的ISP让 Google Public DNS 跳转到 ... 之类与其同流合污的DNS地址怎没办？图样图森破。 注意 有哪些进行HTTP劫持的ISP？基本上都有：移动，联通，电信，天下乌鸦一般黑，呵呵。 一个极其明显的例子如下： 这种劫持的关键在于，DNS服务器与你之间的链接为“明文传输”，而非“加密传输”。这就导致每一个环节上的人都能随意修改你的链接。幸运的是，在生产力高度发达的9102年，加密技术早已像烂柿子一样成熟了，如HTTPS。 DoH的具体原理 DoH的具体原理其实就是在DNS外面套一层HTTPS。（而且更慢了）即流程变成了 你的电脑 -&gt; DoH服务器 -&gt; DNS服务器 -&gt; DoH服务器 -&gt; 你的电脑 以上流程中的一个箭头代表一个HTTPS加密链接，使得该过程中的所有流量皆受到强加密，这样一来，除非拖出量子计算机或智子，否则绝无可能被破解。 （当然，如果HTTPS本身出现漏洞，流量自然就会被破解。但这样一来所有与网络有关的事务都会彻底崩溃，不多你一个。） 提示 本人电脑为macOS + Firefox，亲测有效。 新疆OIer会因为某些原因而无法使用DoH。 在Firefox浏览器中体验DoH 首先，把你的Firefox Quantum更新到最新版。（废话） 点击右侧的“菜单”，就是那个三条横线的图标； 在菜单里点击“首选项”； 进入“常规”选项； 滚动页面到最下方，选择“网络设置”； 在弹出窗口的最下方选择“启用基于HTTPS的DNS”，点击“使用默认值”即可。 在Google Chrome中体验DoH 遗憾的是，直到这篇科普写完时，Chrome仍然不支持直接配置DoH。如果你希望使用Chrome，请参见下面的教程。 在Windows上使用DoH 想再Windows上使用DoH？直接安装Firefox不就好了？ 当然，如果你是一名狂信徒，非要使用其他浏览器，我这里倒是有个思路： 买一台服务器，系统是Linux。 在服务器上重复“在Linux中体验DoH”中的方案 把你的DNS服务器地址设为你的服务器的公网IP地址 当然，可能你自己得花点钱。 在macOS中体验DoH 首先，为了安装必要的组件，我们首先要安装Homebrew软件包管理器。在终端中输入： /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" 安装完成后，输入以下命令安装cloudflared： brew install cloudflare/cloudflare/cloudflared 等待安装，这段时间内你可以去换（chuan）件（shang）衣（nv）服（zhuang）。 然后，我们要修改一下配置文件，新建一个文件/usr/local/etc/cloudflared/config.yaml，输入如下内容： proxy-dns: true proxy-dns-upstream: - https://1.1.1.1/dns-query - https://1.0.0.1/dns-query （顺便提一下，如果1.1.1.1和1.0.0.1两个都连不上，可以把网址删除换成https://dns.google.com/experimental试试， 好了不要吵了我知道这是天方夜谭） 配置结束，启动服务： sudo cloudflared service install QED！现在你的电脑已经成了一台DoH服务器，高兴的话你也可以把它当作DNS服务器来用。打开 系统首选项 -&gt; 网络 -&gt; 高级 -&gt; DNS，在列表的最顶端添加 127.0.0.1 即可。 在Linux中体验DoH 同macOS，但安装时一定要记得加PPA源～ DoH的使用测试 用dig命令测试一下，发现DOH的使用体验还是相当不错的。对域名www.google.com的查询结果如下： $ dig @127.0.0.1 www.google.com ; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; @127.0.0.1 www.google.com ; (1 server found) ;; global options: +cmd ;; Got answer: ;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 48175 ;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 1452 ; PAD: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 (&quot;.................................................................&quot;) ;; QUESTION SECTION: ;www.google.com. IN A ;; ANSWER SECTION: www.google.com. 66 IN A 216.58.194.196 ;; Query time: 165 msec ;; SERVER: 127.0.0.1#53(127.0.0.1) ;; WHEN: Tue Apr 16 16:33:38 CST 2019 ;; MSG SIZE rcvd: 142 注意最下方几行：165毫秒的查询时间不可谓不快。 总结 事实上，如果你饱受各种小广告弹窗之苦，DoH是个不错的应对措施； 如果你的运营商直接进行DNS劫持，建议投诉或诉诸法律； 如果你的运营商进行HTTP劫持，推荐DoH。 点个赞再走吧(๑•́₃ •̀๑)","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>本文同步发布于 <a href=\"https://keepthethink.github.io/archives/2251452003/\">Heliumの博客</a>，到我的博客阅读体验更佳QwQ</p>\n<h1 id=\"dns是什么\"><a class=\"markdownIt-Anchor\" href=\"#dns是什么\"></a> DNS是什么</h1>\n<p>DNS（Domain Name System）是一项网络服务，用途是对全球各个网站的域名进行解析。如果听不懂上面这句话也没关系，接下来会讲解。如果你是网络方面的大牛可以直接跳过或关闭此网页。</p>\n<h2 id=\"简明易懂的dns\"><a class=\"markdownIt-Anchor\" href=\"#简明易懂的dns\"></a> 简明易懂的DNS</h2>\n<p>举个例子，从前有个叫小明的人（目测此人已累死），开了一家商店。一开始顾客要去购物时,就直接去商店里买。</p>\n<p>但由于网络环境的复杂性，让顾客直接记住地址是不太可能的。（你试试看？）于是就有人动了脑筋，推出了一样类似DNS的服务：你只需要说出地点（小明杂货店），服务商就会开车送你去目的地。</p>\n<p>很多大公司实际上都推出了这份服务，例如阿里，百度，谷歌，Cloudflare等。</p>\n<p>实际网络中的DNS，则是向服务器询问域名，而服务器返回IP地址。</p>\n<p>顺便推荐几个质量好的良心DNS如下：</p>\n<h3 id=\"cloudflare-dns\"><a class=\"markdownIt-Anchor\" href=\"#cloudflare-dns\"></a> Cloudflare DNS:</h3>\n<p>1.1.1.1, 1.0.0.1</p>\n<h3 id=\"google-public-dns\"><a class=\"markdownIt-Anchor\" href=\"#google-public-dns\"></a> Google Public DNS:</h3>\n<p>8.8.8.8, 8.8.4.4</p>\n<h3 id=\"opendns\"><a class=\"markdownIt-Anchor\" href=\"#opendns\"></a> OpenDNS</h3>\n<p>208.67.222.222, 208.67.220.220</p>\n<h2 id=\"dns查询\"><a class=\"markdownIt-Anchor\" href=\"#dns查询\"></a> DNS查询</h2>\n<p>看到这里你可能有疑惑了，难道每一台DNS服务器都储存了很多IP地址和域名的对应吗？不是。一这很浪费空间，二这样很难更新。</p>\n<p>以我的博客地址<code>keepthethink.github.io</code>为例，当你输入地址后：</p>\n<p>1.你的电脑首先会去询问DNS服务器；</p>\n<p>这个“DNS服务器”可能在任何地方，可能就在你家的路由器上，也有可能在万里之遥的灯塔国QwQ（如果你是非酋</p>\n<p>当然，一般来讲你的路由器上不会真的有一个DNS服务端，如果你在本地登录912.168.0.1或192.168.1.1，你就会看到在“DNS”设置那一栏会有你的ISP的DNS地址（当然，如果你想把它换成公共DNS也可以，但要为你自己的网速负责。）</p>\n<p>2.DNS服务器询问所谓“根服务器”；</p>\n<p>根服务器询问.io域名的权威服务器；</p>\n<p>.io域名的权威服务器询问.github.io域名的权威服务器;</p>\n<p>.github.io域名的权威服务器将IP告知你的电脑；</p>\n<p>OK</p>\n<p>（这套措施实在是找不到合适的比喻，看不懂就跳过吧。）</p>\n<h2 id=\"注意事项\"><a class=\"markdownIt-Anchor\" href=\"#注意事项\"></a> 注意事项</h2>\n<p>如果你访问的是一些比较国际化的网站，而且还使用了国外的DNS服务器，有可能会会给你分配个国外的IP地址。</p>\n<p>举个最基础的例子：Hexo博客在注册网址时，进行的国内外分流。这是不排除某些睿智国外DNS不管三七二十一给你个国外地址的情形。</p>\n<h2 id=\"dns缓存\"><a class=\"markdownIt-Anchor\" href=\"#dns缓存\"></a> DNS缓存</h2>\n<p>这么干，空间的确节省了很多，但效率显然就更慢了。所以，DNS服务器中一般有个“缓存”，当你重复询问同一个网址时，直接找出缓存记录并答复。当然，每个一定的时间会更新缓存。</p>\n<p>既然这套措施已经很完美了，那DoH是干嘛的？别急，马上就讲。</p>\n<h2 id=\"dns劫持与http劫持\"><a class=\"markdownIt-Anchor\" href=\"#dns劫持与http劫持\"></a> DNS劫持与HTTP劫持</h2>\n<h3 id=\"dns劫持当dns不那么老实\"><a class=\"markdownIt-Anchor\" href=\"#dns劫持当dns不那么老实\"></a> DNS劫持：当DNS不那么老实</h3>\n<p>打个比方：</p>\n<p>从前有个叫小刚的，他也开了家杂货店；</p>\n<p>小刚发现小明的杂货店有很多客户，分外眼红，便拿钱贿赂了DNS服务商，于是，当顾客要求DNS服务商将其带到“小明杂货店”是，DNS会不管三七二十一将其带到“小刚杂货店”。在网络中，则是DNS服务器故意给出错误的IP地址。</p>\n<p>这显然是无计可施的，一般来说，遇到这种人品烂的掉渣的服务商，最好的办法就是换一家，好在这年头网络条件不错，大多数DNS都不搞这种事。</p>\n<p><strong>但是</strong>，对于DNS劫持，刚才讲的一种情况并非最常见的，最常见的事下面这种：</p>\n<p>假设只有服务商A收了贿赂，而服务商B没有。当你向DNS服务商B打电话时，你的<strong>电话服务商</strong>将其转接到服务商A，那你就前功尽弃了。唯一的方法是使用DNS-over-HTTPS，后面会讲解。</p>\n<h3 id=\"http劫持当isp不那么老实\"><a class=\"markdownIt-Anchor\" href=\"#http劫持当isp不那么老实\"></a> HTTP劫持：当ISP不那么老实</h3>\n<p>假设你向DNS服务器打了个电话，“我要去小明杂货店。”结果你的电话服务商窃听了这句话，得知了你的行程；甚至将其修改为“我要去小刚杂货店。”，然后你就不明不白的被带到了另一个地方。</p>\n<p>在这种情况下，你的DNS服务商是老实可靠的，但你的ISP（网络服务提供商）则不那么可靠。当然，一般的ISP并没有那么猖狂，他们最多不过是往你身上塞几张奇♂怪♂的广♂告♂（想必大家都有这样的经历。）你有时候会不会发现你看到的广告就是最近曾经关注过的事物？</p>\n<p>你也许会说，可以修改DNS来解决这个问题，但如果你的ISP让 Google Public DNS 跳转到 <em>.</em>.<em>.</em> 之类与其同流合污的DNS地址怎没办？图样图森破。</p>\n<p><strong>注意</strong></p>\n<p>有哪些进行HTTP劫持的ISP？基本上都有：移动，联通，电信，天下乌鸦一般黑，呵呵。<br>\n一个极其明显的例子如下：</p>\n<p><img src=\"https://i.loli.net/2019/04/26/5cc2c1cf0d688.jpg\" alt=\"yunyingshangjiechi04.jpg\"></p>\n<p>这种劫持的关键在于，DNS服务器与你之间的链接为“明文传输”，而非“加密传输”。这就导致每一个环节上的人都能随意修改你的链接。幸运的是，在生产力高度发达的9102年，加密技术早已像烂柿子一样成熟了，如HTTPS。</p>\n<h1 id=\"doh的具体原理\"><a class=\"markdownIt-Anchor\" href=\"#doh的具体原理\"></a> DoH的具体原理</h1>\n<p>DoH的具体原理其实就是在DNS外面套一层HTTPS。（而且更慢了）即流程变成了</p>\n<blockquote>\n<p>你的电脑 -&gt; DoH服务器 -&gt; DNS服务器 -&gt; DoH服务器 -&gt; 你的电脑</p>\n</blockquote>\n<p>以上流程中的一个箭头代表一个HTTPS加密链接，使得该过程中的所有流量皆受到强加密，这样一来，除非拖出量子计算机或智子，否则绝无可能被破解。</p>\n<p>（当然，如果HTTPS本身出现漏洞，流量自然就会被破解。但这样一来所有与网络有关的事务都会彻底崩溃，不多你一个。）</p>\n<h2 id=\"提示\"><a class=\"markdownIt-Anchor\" href=\"#提示\"></a> 提示</h2>\n<ol>\n<li>本人电脑为macOS + Firefox，亲测有效。</li>\n<li>新疆OIer会因为某些原因而无法使用DoH。</li>\n</ol>\n<h2 id=\"在firefox浏览器中体验doh\"><a class=\"markdownIt-Anchor\" href=\"#在firefox浏览器中体验doh\"></a> 在Firefox浏览器中体验DoH</h2>\n<p>首先，把你的Firefox Quantum更新到最新版。（废话）</p>\n<p>点击右侧的“菜单”，就是那个三条横线的图标；</p>\n<p>在菜单里点击“首选项”；</p>\n<p>进入“常规”选项；</p>\n<p><img src=\"https://keepthethink.github.io/images/Jietu20190416-142149@2x.jpg\" alt></p>\n<p>滚动页面到最下方，选择“网络设置”；</p>\n<p><img src=\"https://keepthethink.github.io/images/Jietu20190416-142524@2x.jpg\" alt></p>\n<p>在弹出窗口的最下方选择“启用基于HTTPS的DNS”，点击“使用默认值”即可。</p>\n<h2 id=\"在google-chrome中体验doh\"><a class=\"markdownIt-Anchor\" href=\"#在google-chrome中体验doh\"></a> 在Google Chrome中体验DoH</h2>\n<p>遗憾的是，直到这篇科普写完时，Chrome仍然不支持直接配置DoH。如果你希望使用Chrome，请参见下面的教程。</p>\n<h2 id=\"在windows上使用doh\"><a class=\"markdownIt-Anchor\" href=\"#在windows上使用doh\"></a> 在Windows上使用DoH</h2>\n<p>想再Windows上使用DoH？直接安装Firefox不就好了？</p>\n<p>当然，如果你是一名狂信徒，非要使用其他浏览器，我这里倒是有个思路：</p>\n<ol>\n<li>\n<p>买一台服务器，系统是Linux。</p>\n</li>\n<li>\n<p>在服务器上重复“在Linux中体验DoH”中的方案</p>\n</li>\n<li>\n<p>把你的DNS服务器地址设为你的服务器的公网IP地址</p>\n</li>\n</ol>\n<p>当然，可能你自己得花点钱。</p>\n<h2 id=\"在macos中体验doh\"><a class=\"markdownIt-Anchor\" href=\"#在macos中体验doh\"></a> 在macOS中体验DoH</h2>\n<p>首先，为了安装必要的组件，我们首先要安装Homebrew软件包管理器。在终端中输入：</p>\n<pre class=\"highlight\"><code class=\"shell\">/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n</code></pre>\n<p>安装完成后，输入以下命令安装cloudflared：</p>\n<pre class=\"highlight\"><code class>brew install cloudflare/cloudflare/cloudflared\n</code></pre>\n<p>等待安装，这段时间内你可以去换（chuan）件（shang）衣（nv）服（zhuang）。</p>\n<p>然后，我们要修改一下配置文件，新建一个文件<code>/usr/local/etc/cloudflared/config.yaml</code>，输入如下内容：</p>\n<pre class=\"highlight\"><code class>proxy-dns: true\nproxy-dns-upstream:\n  - https://1.1.1.1/dns-query\n  - https://1.0.0.1/dns-query\n</code></pre>\n<p>（顺便提一下，如果1.1.1.1和1.0.0.1两个都连不上，可以把网址删除换成<code>https://dns.google.com/experimental</code>试试，</p>\n<p>好了不要吵了我知道这是天方夜谭）</p>\n<p>配置结束，启动服务：</p>\n<pre class=\"highlight\"><code class>sudo cloudflared service install\n</code></pre>\n<p>QED！现在你的电脑已经成了一台DoH服务器，高兴的话你也可以把它当作DNS服务器来用。打开 系统首选项 -&gt; 网络 -&gt; 高级 -&gt; DNS，在列表的最顶端添加 127.0.0.1 即可。</p>\n<h2 id=\"在linux中体验doh\"><a class=\"markdownIt-Anchor\" href=\"#在linux中体验doh\"></a> 在Linux中体验DoH</h2>\n<p>同macOS，但安装时一定要记得加PPA源～</p>\n<h2 id=\"doh的使用测试\"><a class=\"markdownIt-Anchor\" href=\"#doh的使用测试\"></a> DoH的使用测试</h2>\n<p>用dig命令测试一下，发现DOH的使用体验还是相当不错的。对域名www.google.com的查询结果如下：</p>\n<pre class=\"highlight\"><code class>$ dig @127.0.0.1 www.google.com\n\n; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; @127.0.0.1 www.google.com\n; (1 server found)\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 48175\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1452\n; PAD: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 (&quot;.................................................................&quot;)\n;; QUESTION SECTION:\n;www.google.com.\t\t\tIN\tA\n\n;; ANSWER SECTION:\nwww.google.com.\t\t66\tIN\tA\t216.58.194.196\n\n;; Query time: 165 msec\n;; SERVER: 127.0.0.1#53(127.0.0.1)\n;; WHEN: Tue Apr 16 16:33:38 CST 2019\n;; MSG SIZE  rcvd: 142\n</code></pre>\n<p>注意最下方几行：165毫秒的查询时间不可谓不快。</p>\n<h1 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h1>\n<p>事实上，如果你饱受各种小广告弹窗之苦，DoH是个不错的应对措施；</p>\n<p>如果你的运营商直接进行DNS劫持，建议投诉或诉诸法律；</p>\n<p>如果你的运营商进行HTTP劫持，推荐DoH。</p>\n<p><strong>点个赞再走吧(๑•́₃ •̀๑)</strong></p>\n","tags":[{"name":"网络安全","slug":"网络安全","permalink":"https://keepthethink.github.io/tags/网络安全/"}]},{"title":"「文章转载」他译作“维基”的那个网站消失在竹幕后","date":"2019-04-15T07:24:00.000Z","path":"archives/2552852216/","text":"本文放弃一切经济权利，各网站、公号和其他各类载体可在保持原文完整的基础上自由转载。 这个周末，维基百科终于整体离我们而去。它的404，意味着13亿人再次被隔离于一个“普世产品”之外。 Pingwest创始人托马斯·骆在山寨发布会群里分享了他勤奋更新的微信公众号文章，《自由和美好的事物总是戛然而止：比如约翰 列侬和维基百科》（点击链接可以访问过去，做好他的公众号无所不谈的准备，虽然都挺有趣的）。 知乎讨论这个问题的500多个回答在昨天上午戛然而止，消失无踪。托马斯的这篇文字也不知道能生存到何时。互联网这片沃土在别的地方长出了很多参天大树，在中国却总像城市人行道水泥砖之间的野草，顽强地露头，被碾压而过；又螳臂挡车地冒头，再被碾压。周而复始。 在这些野草之中，我翻出了2010年时采访第一个中文维基百科词条创建者、“维基”这个译名的提出者的随笔。当他以及最早期的维基中文十三人确定这个译名并胼手砥足地一条一条建立起中文维基时，未必能看到这灰暗的未来。但他接受采访时的淡然和话语间隐隐透露出的理想主义，却正是这些年来激励人们前赴后继地传播光明的原动力。 这篇东西同样不知道能存活多久，所以本文开头我就放弃了关于本文的一切权利，希望尽量多的自媒体、网站和无处不在的SEO页能收录它、转发它，让人知道中文互联网世界一直燃烧不灭的微弱火种。即使不转发，也可以把它发到邮箱里，存到梯子通达的墙外，在隐秘的一个个圈子里流传。在历史无法书写之处，我们口口相传。仿佛华氏451那个时代，消防员以焚书为业；但热爱文字的人们仍然找到办法，他们分工合作，背下了每一本人类历史的名著；他们 跟普通人没什么两样，像是跑完了一段长路，经过漫长的寻觅，见过美好的事物被焚毁，如今已垂垂老矣，聚在一起等待曲终人散，灯干油尽。他们并不肯定自己脑中所记载的一切，能使未来每一个日出发出更纯净的光辉，他们对此并无把握。但他们确知，那些书储存在他们平静的眼眸之后，完好无缺地等待着将来某一天，那些手指干净或肮脏的读者再来翻动。 以下为原文。斜体字为今日所加。 那些改变中国互联网的小人物之一：维基百科命名者苑明理 2002年10月24日，苑明理（维基用户名 mountain）撰写了第一个具有中文内容的维基百科主页。 此前，或许有其他用户也曾想尝试，但当时的维基主页不支持中文输入。借由工具软件，mountain巧妙地绕过了这个障碍。维基媒体基金会发现了这个微小但意义深远的变化，三天后，中文维基百科有了自己的服务器、域名，同时，后台程序也升级为支持中文输入的版本。世界上最大的百科全书与使用人口最多的语言成功握手。作为中文维基百科的第一位参与用户，苑明理启动了这一进程。 在完成了第一篇中文条目“计算机科学”后，苑明理又提出了中文命名的提案。尽管已经有了中文内容，但这个百科全书的命名仍然用英文名字Wikipedia。 当时正在北大读应用数学研究生的苑明理引经据典，提出以“维基百科”作为Wikipedia的中文名称。苑明理向淼叔解释了当时的思路：“维”的本意是系物的大绳，由“纲举目张”转引到“网”的含义。而在此前，“万维网”作为WWW流传最广中文译名，已经认可了“维”与互联网的对应；“维基百科”，基于互联网的百科全书，这个译名成为Web2.0概念中音义俱佳的翻译，其流行程度仅次于“博客”（但后者并未得到普遍认同，现在仍有大量业者坚持称为“网志”）。一年之后的2003年10月，中文维基的13个管理员用户投票决定正式中文名，其中有9人选择了“维基百科”。在今天看来，这次投票的意义堪比埃尔隆德会议。 发布首个维基百科中文条目，以及命名维基百科，这两项里程碑式工作，完成任何一项都可以在IT史甚至学术史上留名；但苑明理并不认为这些有多么重要。 “我不做，总有人会做。当时国内已经有一些人在英文维基上学习了。至于命名，其实当时参与投票的其他译名也有很不错的”。很难说这是一种故作姿态的谦虚， 因为相比浩淼如海的维基百科，无论是参与者，还是使用者，都会为海量的知识目眩神迷。 Wikipedia 自2001年在美国建立以来，迄今已经拥有1200万个以上的条目，最大的英文维基拥有316万个条目（大英百科全书不到七万条）；中文维基自建立以来， 也已经拥有将近30万个条目。截至2007年10月，维基百科已经经历了四亿次编辑。相对地，维基的注册用户达1500万之众——要知道，维基百科的查阅甚至修改都无需注册。 在这些数据背后，是仍然不断汇聚而来的知识，更多的编辑者，更多的条目，更多次搜索。苑明理参与维基社区时，中文用户寥寥，条目也以编译英文条目为主。“维基”之译名，自提案而至表决，长达一年。倒并非是争论激烈，而是一开始人数太少，不好遽然而定。“中文维基属于所有中文用户，人数太少时定下名字，对其他人不是很不公平。” 苑明理坦承，维基所倡导的民主与自由，对其自身影响很大。维基的原则是每一个人均可参与编辑，人人平等；由于每一个人均可以编辑条目、增删内容，因此所有用户在维基面前平等。即使作为开创者和管理员，苑明理也并未享有太多的特权。管理员所作的，更多是维持编辑秩序，锁定或清理恶意编辑者。而对条目的修改，管理员与普通用户权限并无不同，都需要反复讨论、辨析，表明观点。这使维基的管理员远远不像一些论坛版主那样跋扈，所有参与者的讨论反映到条目上，也显得冷静而客观。 早期参与编辑维基的用户，素质都较为卓越。“我从他们身上学到了很多。”苑明理很怀念一位新加坡籍管理员，后者致力于中文维基社区规则的建立与完善。维基开放给所有用户编写，汇聚知识领域的微力量，带来的副作用可能是信息杂化，和编辑者之间的争吵。既然管理员不能以权威压人，此时便需要依规则调解。另有管理员引入“共识”的标准，成为解决条目争议的重要规则。 “早期中文维基的管理者贡献良多。”苑明理回忆。他们贡献的不止是中文条目，更在于及时将中文维基解决争端、协调众声的机制和规则建立起来。作为一个参与者几乎无限的项目，维基能够在高速增长的同时，仍维持条目令人惊奇的准确与中立，规则之完善与争端调解机制的建立，功不可没。 在飞速发展的同时，维基百科也并非没有遇到障碍。尽管拥有世界上最高超的调和艺术和顶尖人才，但维基仍然常常爆发“编辑战”，即各位编辑者就词条的表达与取舍进行的激烈论战。较为典型的是，伊朗现任总统内贾德的词条，从他还是一个默默无闻的候选人时就出现在百科页面上，随着他仕途的通达和不断发表的争议性言论，维基内部也一次次爆发论战。他的哪些言行需要载入页面，哪些判断适合进入百科，“每一个字上都展开了殊死搏斗”。 内贾德代表了世界上所有尖锐的冲突：东方主义下的东西方冲突，文明冲突论下的伊斯兰文明与基督教文明冲突，政治学意义下的学者与政客的冲突。反映到维基百科上，就是长达三年的争吵，三个调解员因此去职，单一个积极用户就作了近400次修改；最后完成的词条力争记录了内贾德的言论，却仍然被指责为“过长，但没有信息量”。筋疲力尽的维基人们告诉后来者：“可以重新开始讨论……可是我们已经没有精力再参与”（本段内容参考了南方都市报的相关报道）。 中文维基百科面临相似的困扰，据mountain回忆，有时他甚至声称要因此退出维基项目。与大部分争吵的原因不同，对内容的讨论主要围绕中立原则，只不 过各方对“中立”的理解不同。维基的词条就是在这样严格得近乎苛刻的审查中诞生，每一个词条看上去都冷淡，平静，客观，不带任何感情色彩和倾向。维基的编写是天下大同的缩写，呈现出来的结果却是万籁俱寂的白描。“维基最大的特点，就是在规则之下的众声喧哗，直到共识。”苑明理总结。 除了内容上的争论，中文维基还面临许多“特色国情”的挑战。作为百科全书，基本目的就是无所不包，除了“根据当地的法律法规不予显示”的内容。但是，当法律法规并未明确规定内容的界限时，无所不包就成为一种冒险的行为。中文维基百科自2005年后，访问上始终存在一些滞涩。有时一些页面会载入后无法显示，有 些时候则干脆整站无法访问。在这段时间，百度百科、互动百科等国产百科开始占领市场。 在注意力就是资源的互联网，苑明理对这种蚕食并不是太在意。“维基百科不会死，其他山寨版不尊重版权，随意拷贝媒体内容，没有真正创作和学习的乐趣，对维基百科不会形成真正威胁。”似乎是为了证明这一点，科普作家方舟子在博客上发文，痛斥国内某搜索引擎的在线百科不尊重版权，随意剽窃他文章的内容，还设置了繁琐的投诉程序。 “海纳百川，有容乃大”是中文维基百科的副标题，苑明理似乎从这句话中获得了更多从容的力量。“英文维基不会死，维基用户数量就有了保障。竞争再激烈，时间总会说明一切。坚持中立、包容和分享知识的乐趣，维基精神就不灭。”在关于维基你或许不知道的十件事这个条目下，最后一条就是“维基是一个百年大计”。既然能长寿到所有敌人都死去，那还有什么值得焦躁和忧愁呢？ “维基汇聚了所有普通人的力量，分享着所有用户的知识，并以此为基础记录人类文明的成果。”苑明理终于谈到了自己的理想：“这就是我想要的，世界公民。” 补记：苑明理已经于三年前离开了他服务多年的国际IT巨头。现在他在知春路的一家创业公司中埋头做一款叫做“彩云天气”的产品。除此之外，生活没有任何变化。","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><blockquote>\n<p>本文放弃一切经济权利，各网站、公号和其他各类载体可在保持原文完整的基础上自由转载。</p>\n</blockquote>\n<p>这个周末，维基百科终于整体离我们而去。它的404，意味着13亿人再次被隔离于一个“普世产品”之外。</p>\n<p>Pingwest创始人托马斯·骆在山寨发布会群里分享了他勤奋更新的微信公众号文章，<a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzc1NTkwNQ==&amp;mid=400989696&amp;idx=1&amp;sn=d36df590742255b0cb95d054376149d2&amp;scene=25&amp;srcid=1206Z80ZDGf1hSTlJarvNJ9i#wechat_redirect\" target=\"_blank\" rel=\"noopener\">《自由和美好的事物总是戛然而止：比如约翰 列侬和维基百科》</a>（点击链接可以访问过去，做好他的公众号无所不谈的准备，虽然都挺有趣的）。</p>\n<p>知乎讨论这个问题的500多个回答在昨天上午戛然而止，消失无踪。托马斯的这篇文字也不知道能生存到何时。互联网这片沃土在别的地方长出了很多参天大树，在中国却总像城市人行道水泥砖之间的野草，顽强地露头，被碾压而过；又螳臂挡车地冒头，再被碾压。周而复始。</p>\n<p>在这些野草之中，我翻出了2010年时采访第一个中文维基百科词条创建者、“维基”这个译名的提出者的随笔。当他以及最早期的维基中文十三人确定这个译名并胼手砥足地一条一条建立起中文维基时，未必能看到这灰暗的未来。但他接受采访时的淡然和话语间隐隐透露出的理想主义，却正是这些年来激励人们前赴后继地传播光明的原动力。</p>\n<p>这篇东西同样不知道能存活多久，所以本文开头我就放弃了关于本文的一切权利，希望尽量多的自媒体、网站和无处不在的SEO页能收录它、转发它，让人知道中文互联网世界一直燃烧不灭的微弱火种。即使不转发，也可以把它发到邮箱里，存到梯子通达的墙外，在隐秘的一个个圈子里流传。在历史无法书写之处，我们口口相传。仿佛华氏451那个时代，消防员以焚书为业；但热爱文字的人们仍然找到办法，他们分工合作，背下了每一本人类历史的名著；他们</p>\n<blockquote>\n<p>跟普通人没什么两样，像是跑完了一段长路，经过漫长的寻觅，见过美好的事物被焚毁，如今已垂垂老矣，聚在一起等待曲终人散，灯干油尽。他们并不肯定自己脑中所记载的一切，能使未来每一个日出发出更纯净的光辉，他们对此并无把握。但他们确知，那些书储存在他们平静的眼眸之后，完好无缺地等待着将来某一天，那些手指干净或肮脏的读者再来翻动。</p>\n</blockquote>\n<p>以下为原文。斜体字为今日所加。</p>\n<p><strong>那些改变中国互联网的小人物之一：维基百科命名者苑明理</strong></p>\n<p>2002年10月24日，苑明理（维基用户名 mountain）撰写了第一个具有中文内容的维基百科主页。</p>\n<p>此前，或许有其他用户也曾想尝试，但当时的维基主页不支持中文输入。借由工具软件，mountain巧妙地绕过了这个障碍。维基媒体基金会发现了这个微小但意义深远的变化，三天后，中文维基百科有了自己的服务器、域名，同时，后台程序也升级为支持中文输入的版本。世界上最大的百科全书与使用人口最多的语言成功握手。作为中文维基百科的第一位参与用户，苑明理启动了这一进程。</p>\n<p>在完成了第一篇中文条目“计算机科学”后，苑明理又提出了中文命名的提案。尽管已经有了中文内容，但这个百科全书的命名仍然用英文名字Wikipedia。 当时正在北大读应用数学研究生的苑明理引经据典，提出以“维基百科”作为Wikipedia的中文名称。苑明理向淼叔解释了当时的思路：“维”的本意是系物的大绳，由“纲举目张”转引到“网”的含义。而在此前，“万维网”作为WWW流传最广中文译名，已经认可了“维”与互联网的对应；“维基百科”，基于互联网的百科全书，这个译名成为Web2.0概念中音义俱佳的翻译，其流行程度仅次于“博客”（但后者并未得到普遍认同，现在仍有大量业者坚持称为“网志”）。一年之后的2003年10月，中文维基的13个管理员用户投票决定正式中文名，其中有9人选择了“维基百科”。在今天看来，这次投票的意义堪比埃尔隆德会议。</p>\n<p>发布首个维基百科中文条目，以及命名维基百科，这两项里程碑式工作，完成任何一项都可以在IT史甚至学术史上留名；但苑明理并不认为这些有多么重要。 “我不做，总有人会做。当时国内已经有一些人在英文维基上学习了。至于命名，其实当时参与投票的其他译名也有很不错的”。很难说这是一种故作姿态的谦虚， 因为相比浩淼如海的维基百科，无论是参与者，还是使用者，都会为海量的知识目眩神迷。</p>\n<p>Wikipedia 自2001年在美国建立以来，迄今已经拥有1200万个以上的条目，最大的英文维基拥有316万个条目（大英百科全书不到七万条）；中文维基自建立以来， 也已经拥有将近30万个条目。截至2007年10月，维基百科已经经历了四亿次编辑。相对地，维基的注册用户达1500万之众——要知道，维基百科的查阅甚至修改都无需注册。</p>\n<p>在这些数据背后，是仍然不断汇聚而来的知识，更多的编辑者，更多的条目，更多次搜索。苑明理参与维基社区时，中文用户寥寥，条目也以编译英文条目为主。“维基”之译名，自提案而至表决，长达一年。倒并非是争论激烈，而是一开始人数太少，不好遽然而定。“中文维基属于所有中文用户，人数太少时定下名字，对其他人不是很不公平。”</p>\n<p>苑明理坦承，维基所倡导的民主与自由，对其自身影响很大。维基的原则是每一个人均可参与编辑，人人平等；由于每一个人均可以编辑条目、增删内容，因此所有用户在维基面前平等。即使作为开创者和管理员，苑明理也并未享有太多的特权。管理员所作的，更多是维持编辑秩序，锁定或清理恶意编辑者。而对条目的修改，管理员与普通用户权限并无不同，都需要反复讨论、辨析，表明观点。这使维基的管理员远远不像一些论坛版主那样跋扈，所有参与者的讨论反映到条目上，也显得冷静而客观。</p>\n<p>早期参与编辑维基的用户，素质都较为卓越。“我从他们身上学到了很多。”苑明理很怀念一位新加坡籍管理员，后者致力于中文维基社区规则的建立与完善。维基开放给所有用户编写，汇聚知识领域的微力量，带来的副作用可能是信息杂化，和编辑者之间的争吵。既然管理员不能以权威压人，此时便需要依规则调解。另有管理员引入“共识”的标准，成为解决条目争议的重要规则。</p>\n<p>“早期中文维基的管理者贡献良多。”苑明理回忆。他们贡献的不止是中文条目，更在于及时将中文维基解决争端、协调众声的机制和规则建立起来。作为一个参与者几乎无限的项目，维基能够在高速增长的同时，仍维持条目令人惊奇的准确与中立，规则之完善与争端调解机制的建立，功不可没。</p>\n<p>在飞速发展的同时，维基百科也并非没有遇到障碍。尽管拥有世界上最高超的调和艺术和顶尖人才，但维基仍然常常爆发“编辑战”，即各位编辑者就词条的表达与取舍进行的激烈论战。较为典型的是，伊朗现任总统内贾德的词条，从他还是一个默默无闻的候选人时就出现在百科页面上，随着他仕途的通达和不断发表的争议性言论，维基内部也一次次爆发论战。他的哪些言行需要载入页面，哪些判断适合进入百科，“每一个字上都展开了殊死搏斗”。</p>\n<p>内贾德代表了世界上所有尖锐的冲突：东方主义下的东西方冲突，文明冲突论下的伊斯兰文明与基督教文明冲突，政治学意义下的学者与政客的冲突。反映到维基百科上，就是长达三年的争吵，三个调解员因此去职，单一个积极用户就作了近400次修改；最后完成的词条力争记录了内贾德的言论，却仍然被指责为“过长，但没有信息量”。筋疲力尽的维基人们告诉后来者：“可以重新开始讨论……可是我们已经没有精力再参与”（本段内容参考了南方都市报的相关报道）。</p>\n<p>中文维基百科面临相似的困扰，据mountain回忆，有时他甚至声称要因此退出维基项目。与大部分争吵的原因不同，对内容的讨论主要围绕中立原则，只不 过各方对“中立”的理解不同。维基的词条就是在这样严格得近乎苛刻的审查中诞生，每一个词条看上去都冷淡，平静，客观，不带任何感情色彩和倾向。维基的编写是天下大同的缩写，呈现出来的结果却是万籁俱寂的白描。“维基最大的特点，就是在规则之下的众声喧哗，直到共识。”苑明理总结。</p>\n<p>除了内容上的争论，中文维基还面临许多“特色国情”的挑战。作为百科全书，基本目的就是无所不包，除了“根据当地的法律法规不予显示”的内容。但是，当法律法规并未明确规定内容的界限时，无所不包就成为一种冒险的行为。中文维基百科自2005年后，访问上始终存在一些滞涩。有时一些页面会载入后无法显示，有 些时候则干脆整站无法访问。在这段时间，百度百科、互动百科等国产百科开始占领市场。</p>\n<p>在注意力就是资源的互联网，苑明理对这种蚕食并不是太在意。“维基百科不会死，其他山寨版不尊重版权，随意拷贝媒体内容，没有真正创作和学习的乐趣，对维基百科不会形成真正威胁。”似乎是为了证明这一点，科普作家方舟子在博客上发文，痛斥国内某搜索引擎的在线百科不尊重版权，随意剽窃他文章的内容，还设置了繁琐的投诉程序。</p>\n<p>“海纳百川，有容乃大”是中文维基百科的副标题，苑明理似乎从这句话中获得了更多从容的力量。“英文维基不会死，维基用户数量就有了保障。竞争再激烈，时间总会说明一切。坚持中立、包容和分享知识的乐趣，维基精神就不灭。”在关于维基你或许不知道的十件事这个条目下，最后一条就是“维基是一个百年大计”。既然能长寿到所有敌人都死去，那还有什么值得焦躁和忧愁呢？</p>\n<p>“维基汇聚了所有普通人的力量，分享着所有用户的知识，并以此为基础记录人类文明的成果。”苑明理终于谈到了自己的理想：“这就是我想要的，世界公民。”</p>\n<p>补记：苑明理已经于三年前离开了他服务多年的国际IT巨头。现在他在知春路的一家创业公司中埋头做一款叫做“彩云天气”的产品。除此之外，生活没有任何变化。</p>\n","tags":[{"name":"转载","slug":"转载","permalink":"https://keepthethink.github.io/tags/转载/"}]},{"title":"洛谷题解 P1003 【铺地毯】","date":"2019-04-13T01:50:00.000Z","path":"archives/1438989892/","text":"题目描述 为了准备一个独特的颁奖典礼，组织者在会场的一片矩形区域（可看做是平面直角坐标系的第一象限）铺上一些矩形地毯。一共有 nnn 张地毯，编号从 111 到nnn。现在将这些地毯按照编号从小到大的顺序平行于坐标轴先后铺设，后铺的地毯覆盖在前面已经铺好的地毯之上。 地毯铺设完成后，组织者想知道覆盖地面某个点的最上面的那张地毯的编号。注意：在矩形地毯边界和四个顶点上的点也算被地毯覆盖。 输入输出格式 输入格式： 输入共n+2n+2n+2行 第一行，一个整数nnn，表示总共有nnn张地毯 接下来的nnn行中，第 i+1i+1i+1行表示编号ii的地毯的信息，包含四个正整数a,b,g,ka ,b ,g ,ka,b,g,k ，每两个整数之间用一个空格隔开，分别表示铺设地毯的左下角的坐标(a,b)(a,b)(a,b)以及地毯在xxx轴和yyy轴方向的长度 第n+2n+2n+2行包含两个正整数xxx和yyy，表示所求的地面的点的坐标(x,y)(x,y)(x,y) 输出格式： 输出共111行，一个整数，表示所求的地毯的编号；若此处没有被地毯覆盖则输出−1−1−1 输入输出样例 输入样例#1： 3 1 0 2 3 0 2 3 3 2 1 3 3 2 2 输出样例#1： 3 输入样例#2： 3 1 0 2 3 0 2 3 3 2 1 3 3 4 5 输出样例#2： -1 说明 【样例解释1】 如下图，11 号地毯用实线表示，22 号地毯用虚线表示，33 号用双实线表示，覆盖点(2,2)(2,2)的最上面一张地毯是 33 号地毯。 【数据范围】 对于30% 的数据，有 n≤2n ≤ 2n≤2 ； 对于50% 的数据，0≤a,b,g,k≤1000 ≤a, b, g, k≤1000≤a,b,g,k≤100； 对于100%的数据，有 0≤n≤10,0000 ≤n ≤10,0000≤n≤10,000 ，0≤a,b,g,k≤100,0000≤a, b, g, k ≤100,0000≤a,b,g,k≤100,000。 noip2011提高组day1第1题 说明 看标签 枚举，模拟，暴力。 很容易想到开一个大小N * N 的二维数组，然而数据范围是0 ≤ N ≤10,000 数组大小：10000 * 10000 = 100000000 Byte = 100000 KB = 100MB 刚好跨过了RE与MLE的红线。 另外一种方法是用四个数组来记录长方形的四个参数，再扫一遍检查最上面的地毯。 亲测，完美AC。 代码 #include&lt;stdio.h&gt; const int MAXN = 10000 + 5;//程序里出现幻数可不是好习惯哦~ int a[MAXN], b[MAXN], g[MAXN], k[MAXN]; int main() { int n, x, y; scanf(\"%d\", &amp;n); for(int i = 0; i &lt; n; i++) { scanf(\"%d%d%d%d\", &amp;a[i], &amp;b[i], &amp;g[i], &amp;k[i]);//输入 } scanf(\"%d%d\", &amp;x, &amp;y); int ans = -1; for(int i = 0; i &lt; n; i++) { if(x &gt;= a[i] &amp;&amp; y &gt;= b[i] &amp;&amp; x &lt;= a[i] + g[i] &amp;&amp; y &lt;= b[i] + k[i]) { ans = i + 1;//ans的最终值恰好是最上面的那张地毯编号 } } printf(\"%d\\n\", ans);//输出结果 return 0; }","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\"></a> 题目描述</h1>\n<p>为了准备一个独特的颁奖典礼，组织者在会场的一片矩形区域（可看做是平面直角坐标系的第一象限）铺上一些矩形地毯。一共有 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> 张地毯，编号从 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> 到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>。现在将这些地毯按照编号从小到大的顺序平行于坐标轴先后铺设，后铺的地毯覆盖在前面已经铺好的地毯之上。</p>\n<p>地毯铺设完成后，组织者想知道覆盖地面某个点的最上面的那张地毯的编号。注意：在矩形地毯边界和四个顶点上的点也算被地毯覆盖。</p>\n<h1 id=\"输入输出格式\"><a class=\"markdownIt-Anchor\" href=\"#输入输出格式\"></a> 输入输出格式</h1>\n<h2 id=\"输入格式\"><a class=\"markdownIt-Anchor\" href=\"#输入格式\"></a> 输入格式：</h2>\n<p>输入共<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">n+2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>行</p>\n<p>第一行，一个整数<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>，表示总共有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>张地毯</p>\n<p>接下来的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>行中，第 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">i+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>行表示编号ii的地毯的信息，包含四个正整数<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>g</mi><mo separator=\"true\">,</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">a ,b ,g ,k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span> ，每两个整数之间用一个空格隔开，分别表示铺设地毯的左下角的坐标<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(a,b)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">)</span></span></span></span>以及地毯在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>轴和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span>轴方向的长度</p>\n<p>第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">n+2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>行包含两个正整数<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span>，表示所求的地面的点的坐标<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x,y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"输出格式\"><a class=\"markdownIt-Anchor\" href=\"#输出格式\"></a> 输出格式：</h2>\n<p>输出共<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>行，一个整数，表示所求的地毯的编号；若此处没有被地毯覆盖则输出<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">−</mi><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">−1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span></p>\n<h1 id=\"输入输出样例\"><a class=\"markdownIt-Anchor\" href=\"#输入输出样例\"></a> 输入输出样例</h1>\n<h2 id=\"输入样例1\"><a class=\"markdownIt-Anchor\" href=\"#输入样例1\"></a> 输入样例#1：</h2>\n<p>3</p>\n<p>1 0 2 3</p>\n<p>0 2 3 3</p>\n<p>2 1 3 3</p>\n<p>2 2</p>\n<h2 id=\"输出样例1\"><a class=\"markdownIt-Anchor\" href=\"#输出样例1\"></a> 输出样例#1：</h2>\n<p>3</p>\n<h2 id=\"输入样例2\"><a class=\"markdownIt-Anchor\" href=\"#输入样例2\"></a> 输入样例#2：</h2>\n<p>3</p>\n<p>1 0 2 3</p>\n<p>0 2 3 3</p>\n<p>2 1 3 3</p>\n<p>4 5</p>\n<h2 id=\"输出样例2\"><a class=\"markdownIt-Anchor\" href=\"#输出样例2\"></a> 输出样例#2：</h2>\n<p>-1</p>\n<h1 id=\"说明\"><a class=\"markdownIt-Anchor\" href=\"#说明\"></a> 说明</h1>\n<p>【样例解释1】</p>\n<p>如下图，11 号地毯用实线表示，22 号地毯用虚线表示，33 号用双实线表示，覆盖点(2,2)(2,2)的最上面一张地毯是 33 号地毯。</p>\n<p>【数据范围】</p>\n<p>对于30% 的数据，有 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">n ≤ 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> ；<br>\n对于50% 的数据，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>g</mi><mo separator=\"true\">,</mo><mi>k</mi><mo>≤</mo><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">0 ≤a, b, g, k≤100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>；<br>\n对于100%的数据，有 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>10</mn><mo separator=\"true\">,</mo><mn>000</mn></mrow><annotation encoding=\"application/x-tex\">0 ≤n ≤10,000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span> ，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>g</mi><mo separator=\"true\">,</mo><mi>k</mi><mo>≤</mo><mn>100</mn><mo separator=\"true\">,</mo><mn>000</mn></mrow><annotation encoding=\"application/x-tex\">0≤a, b, g, k ≤100,000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>。</p>\n<p>noip2011提高组day1第1题</p>\n<h1 id=\"说明-2\"><a class=\"markdownIt-Anchor\" href=\"#说明-2\"></a> 说明</h1>\n<p>看标签<br>\n<strong>枚举，模拟，暴力</strong>。</p>\n<p>很容易想到开一个大小N * N 的二维数组，然而数据范围是0 ≤ N ≤10,000</p>\n<p>数组大小：10000 * 10000 = 100000000 Byte = 100000 KB = 100MB</p>\n<p>刚好跨过了RE与MLE的红线。</p>\n<p>另外一种方法是用四个数组来记录长方形的四个参数，再扫一遍检查最上面的地毯。</p>\n<p>亲测，完美AC。</p>\n<h1 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h1>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> MAXN = <span class=\"hljs-number\">10000</span> + <span class=\"hljs-number\">5</span>;<span class=\"hljs-comment\">//程序里出现幻数可不是好习惯哦~</span>\n\n<span class=\"hljs-keyword\">int</span> a[MAXN], b[MAXN], g[MAXN], k[MAXN];\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">int</span> n, x, y;\n    \n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>, &amp;n);\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d%d%d%d\"</span>, &amp;a[i], &amp;b[i], &amp;g[i], &amp;k[i]);<span class=\"hljs-comment\">//输入</span>\n    }\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d%d\"</span>, &amp;x, &amp;y);\n    \n    <span class=\"hljs-keyword\">int</span> ans = <span class=\"hljs-number\">-1</span>;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n        <span class=\"hljs-keyword\">if</span>(x &gt;= a[i] &amp;&amp; y &gt;= b[i] &amp;&amp; x &lt;= a[i] + g[i] &amp;&amp; y &lt;= b[i] + k[i]) {\n            ans = i + <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//ans的最终值恰好是最上面的那张地毯编号</span>\n        }\n    }\n    \n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\\n\"</span>, ans);<span class=\"hljs-comment\">//输出结果</span>\n    \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n","tags":[{"name":"洛谷","slug":"洛谷","permalink":"https://keepthethink.github.io/tags/洛谷/"},{"name":"题解","slug":"题解","permalink":"https://keepthethink.github.io/tags/题解/"}]},{"title":"人类首张黑洞照片","date":"2019-04-13T01:39:00.000Z","path":"archives/2078626702/","text":"2019年4月10日9：00，人类首张对黑洞进行直接拍摄的照片发布。 这张照片可能并不符合许多人想象中常见的“漩涡”形象，但这是最符合目前学术界公认理论的形象。爱因斯坦，史瓦西，克尔，霍金等历代科学家的理论终于在这一天得到了论证，只不过他们都没有活到看到他们预言之物终于被光学设备记录到的那一天。 “黑洞”这个概念在20世纪就早已名扬四海，但这个概念一直只是存在于物理学家的计算中，这多少让人想起海王星，但海王星被计算出后几乎是立刻就被天文望远镜所发现，而黑洞从被计算出（1915年12月德国天文学家卡尔·史瓦西计算出爱因斯坦方程的黑洞解。）到2019年黑洞终于被人类的天文望远镜拍摄到，时隔整整103年。","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>2019年4月10日9：00，人类首张对黑洞进行直接拍摄的照片发布。</p>\n<p><img src=\"https://i.loli.net/2019/04/12/5cb090dea8dcc.jpg\" alt></p>\n<p>这张照片可能并不符合许多人想象中常见的“漩涡”形象，但这是最符合目前学术界公认理论的形象。爱因斯坦，史瓦西，克尔，霍金等历代科学家的理论终于在这一天得到了论证，只不过他们都没有活到看到他们预言之物终于被光学设备记录到的那一天。</p>\n<p>“黑洞”这个概念在20世纪就早已名扬四海，但这个概念一直只是存在于物理学家的计算中，这多少让人想起海王星，但海王星被计算出后几乎是立刻就被天文望远镜所发现，而黑洞从被计算出（1915年12月德国天文学家卡尔·史瓦西计算出爱因斯坦方程的黑洞解。）到2019年黑洞终于被人类的天文望远镜拍摄到，时隔整整103年。</p>\n","tags":[{"name":"随笔","slug":"随笔","permalink":"https://keepthethink.github.io/tags/随笔/"},{"name":"天文","slug":"天文","permalink":"https://keepthethink.github.io/tags/天文/"}]},{"title":"洛谷题解 P1002 【过河卒】","date":"2019-04-12T12:34:00.000Z","path":"archives/2197869946/","text":"题目描述 棋盘上AAA点有一个过河卒，需要走到目标BBB点。卒行走的规则：可以向下、或者向右。同时在棋盘上CCC点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。 棋盘用坐标表示，AAA点(0,0)(0, 0)(0,0)、BBB点(n,m)(n, m)(n,m)(nnn, mmm为不超过202020的整数)，同样马的位置坐标是需要给出的。 现在要求你计算出卒从AAA点能够到达BBB点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。 输入输出格式 输入格式： 一行四个数据，分别表示BBB点坐标和马的坐标。 输出格式： 一个数据，表示所有的路径条数。 输入输出样例 输入样例#1： 6 6 3 3 输出样例#1： 6 说明 结果可能很大！ 看到题目二话不说用了搜索，直到在提交前看了一下算法标签，又看了一下数据范围。。。 状态转移方程的推导并不复杂，每次判断卒是否能走到这个格子，不可以则为0（显而易见），可以则为下方与左方的值之和。 上代码，这道题算是一道DP入门题吧。 #include&lt;stdio.h&gt; const int MAXN = 20 + 5; const int attack[9][2] = &lt;!--￼0--&gt;; long long dist[MAXN][MAXN]; int map[MAXN][MAXN]; int n, m, x, y; void init(void) { for(int i = 0; i &lt; 9; i++) { if(x + attack[i][0] &lt;= n &amp;&amp; x + attack[i][0] &gt;= 0) { if(y + attack[i][1] &lt;= m &amp;&amp; y + attack[i][1] &gt;= 0) { map[x + attack[i][0]][y + attack[i][1]] = true; } } } } int main() { scanf(\"%d%d%d%d\", &amp;n, &amp;m, &amp;x, &amp;y); init(); int k = 1; for(int i = 0; i &lt;= n; i++) { dist[i][0] = map[i][0] ? k = 0 : k; } k = 1; for(int i = 0; i &lt;= m; i++) { dist[0][i] = map[0][i] ? k = 0 : k; } for(int i = 1; i &lt;= n; i++) { for(int j = 1; j &lt;= m; j++) { dist[i][j] = map[i][j] ? 0 : dist[i - 1][j] + dist[i][j - 1]; } } printf(\"%lld\\n\", dist[n][m]); return 0; }","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\"></a> 题目描述</h1>\n<p>棋盘上<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span>点有一个过河卒，需要走到目标<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>点。卒行走的规则：可以向下、或者向右。同时在棋盘上<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span>点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。</p>\n<p>棋盘用坐标表示，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span>点<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0, 0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>点<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(n, m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mclose\">)</span></span></span></span>(<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span>为不超过<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>20</mn></mrow><annotation encoding=\"application/x-tex\">20</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span></span></span></span>的整数)，同样马的位置坐标是需要给出的。</p>\n<p>现在要求你计算出卒从<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span>点能够到达<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。</p>\n<h1 id=\"输入输出格式\"><a class=\"markdownIt-Anchor\" href=\"#输入输出格式\"></a> 输入输出格式</h1>\n<h2 id=\"输入格式\"><a class=\"markdownIt-Anchor\" href=\"#输入格式\"></a> 输入格式：</h2>\n<p>一行四个数据，分别表示<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>点坐标和马的坐标。</p>\n<h2 id=\"输出格式\"><a class=\"markdownIt-Anchor\" href=\"#输出格式\"></a> 输出格式：</h2>\n<p>一个数据，表示所有的路径条数。</p>\n<h1 id=\"输入输出样例\"><a class=\"markdownIt-Anchor\" href=\"#输入输出样例\"></a> 输入输出样例</h1>\n<h2 id=\"输入样例1\"><a class=\"markdownIt-Anchor\" href=\"#输入样例1\"></a> 输入样例#1：</h2>\n<p>6 6 3 3</p>\n<h2 id=\"输出样例1\"><a class=\"markdownIt-Anchor\" href=\"#输出样例1\"></a> 输出样例#1：</h2>\n<p>6</p>\n<h1 id=\"说明\"><a class=\"markdownIt-Anchor\" href=\"#说明\"></a> 说明</h1>\n<p>结果可能很大！</p>\n<hr>\n<p>看到题目二话不说用了搜索，直到在提交前看了一下算法标签，又看了一下数据范围。。。</p>\n<p>状态转移方程的推导并不复杂，每次判断卒是否能走到这个格子，不可以则为0（显而易见），可以则为下方与左方的值之和。</p>\n<p>上代码，这道题算是一道DP入门题吧。</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> MAXN = <span class=\"hljs-number\">20</span> + <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> attack[<span class=\"hljs-number\">9</span>][<span class=\"hljs-number\">2</span>] = &lt;!--￼<span class=\"hljs-number\">0</span>--&gt;;\n<span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> dist[MAXN][MAXN];\n<span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">map</span>[MAXN][MAXN];\n<span class=\"hljs-keyword\">int</span> n, m, x, y;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">9</span>; i++) {\n        <span class=\"hljs-keyword\">if</span>(x + attack[i][<span class=\"hljs-number\">0</span>] &lt;= n &amp;&amp; x + attack[i][<span class=\"hljs-number\">0</span>] &gt;= <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">if</span>(y + attack[i][<span class=\"hljs-number\">1</span>] &lt;= m &amp;&amp; y + attack[i][<span class=\"hljs-number\">1</span>] &gt;= <span class=\"hljs-number\">0</span>) {\n                <span class=\"hljs-built_in\">map</span>[x + attack[i][<span class=\"hljs-number\">0</span>]][y + attack[i][<span class=\"hljs-number\">1</span>]] = <span class=\"hljs-literal\">true</span>;\n            }\n        }\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d%d%d%d\"</span>, &amp;n, &amp;m, &amp;x, &amp;y);\n    \n    init();\n    \n    <span class=\"hljs-keyword\">int</span> k = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;= n; i++) {\n        dist[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-built_in\">map</span>[i][<span class=\"hljs-number\">0</span>] ? k = <span class=\"hljs-number\">0</span> : k;\n    }\n    k = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;= m; i++) {\n        dist[<span class=\"hljs-number\">0</span>][i] = <span class=\"hljs-built_in\">map</span>[<span class=\"hljs-number\">0</span>][i] ? k = <span class=\"hljs-number\">0</span> : k;\n    }\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i++) {\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= m; j++) {\n            dist[i][j] = <span class=\"hljs-built_in\">map</span>[i][j] ? <span class=\"hljs-number\">0</span> : dist[i - <span class=\"hljs-number\">1</span>][j] + dist[i][j - <span class=\"hljs-number\">1</span>];\n        }\n    }\n    \n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%lld\\n\"</span>, dist[n][m]);\n    \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n","tags":[{"name":"洛谷","slug":"洛谷","permalink":"https://keepthethink.github.io/tags/洛谷/"},{"name":"题解","slug":"题解","permalink":"https://keepthethink.github.io/tags/题解/"}]},{"title":"理性看待CCF","date":"2019-04-06T01:41:00.000Z","path":"archives/2538557693/","text":"写在前面 先说结论：CCF的问题在于，他们在OIer们需要时无法提供帮助，在自己需要时却一点都不为OIer们考虑。 几个月过去了，关于CCF的一切事件基本上都已经风平浪静。 从事实角度来讲，CCF的大部分行为是无可厚非的，CCF垄断国内OI界并不停抬价，由于OI不属于商业范畴，似乎不违反现有任何法律；抬价，似乎也没有抬到诸位承担不起的地步。当然，这些报名费里面有多少用于比赛举办，可能还得打个问号，但这里要注意两点： CCF不是政府机构，也就是说他们并不是广大OIer们的公仆，不像我们交的税，全部都用于国家发展与建设。 CCF这么个庞然大物一般的组织若要运转，需要很大一笔资金。 其实NOIP2018时CCF就已经将评测机换成了i7-8700K 32GB RAM，但其耗费的资金必然只占我们的报名费中的一小部分。[1]简单估计一下，这台电脑撑死也就……5万？10万？但考虑到这之前的两点，这也不是什么奇怪的事。我们每年交了几百万上千万了，已经相当于一个中型企业的年收入。一言以蔽之，“把CCF的财务部门与CCF的竞赛组织部门的人对调，CCF的所有问题都会得到解决。” 既然CCF激起如此民愤，说他们什么亏心事都没做未免说不过去。只是要告诉屏幕前的各位，在对CCF进行道德判断时，应该以一种更为中肯的角度去看待。 关于省队名额 先谈省队。省队是什么？ 省队是各省参加全国赛的代表队，各个省队的名额有复杂的计算公式，一般和之前的成绩和参赛人数有关。[2] 省队相当于什么难度？以下几个知识点取自“洛谷试炼场”： 网络流 单调队列 概率期望 二分图 点分治 后缀数组 主席树 数位DP AC自动机 平衡树 树链剖分 动态树 树套树 可持久化Trie树 莫队 分块 莫比乌斯反演 要让以上知识点全部过关，刷题什么的暂且不提，文化课必定已经彻底停了。（不排除有同时AK文化课的大佬的存在，但这毕竟是个案。）在这种情况下，这位OIer必然是已经将自己的全部前途作为筹码押在了OI这条路上，要么是极其的热爱信息学，要么是坚信自己必然能夺魁榜首。几年来在各大OJ上留下的AC记录，几年来的无数个不眠之夜，几年来留下的汗水，却全都因为一句简单的“有复杂的计算公式，一般和之前的成绩和参赛人数有关”就被一笔勾销！在我们眼里这是个悲剧，在CCF眼里这想必就是一个统计数字！（魔改自斯大林某句被后人强行断章取义的话） 自法国大革命以后，世界的的主流价值观便是人文主义。人文主义的核心是什么？人是世界的中心！当我们判断一个OIer能否参加省选时，我们应该判断TA作为一个人的真才实学，而不是什么复杂的计算公式得到的数目！今天██省因为[数据删除]被减了名额，明天██省又因为[数据删除]被减了名额，其中到底有多少是我们广大OIer的过错呢？CCF吸金什么的倒不是主要问题，但他们到底要不要把OIer的前途放在眼里？ CCF关于NOIP2017复赛违规省份的处罚公告 呵呵，通报批评一下就了事了，真当我们是傻子？而且这不是重点，提高分数线是怎么回事？ CCF 关于NOIP2016违规事件的处罚公告 处罚作弊者是理所当然的，但整个学校禁赛一年？喵喵喵？这是退回的封建时代了，诛九族？ 若一个省发生了作弊等乱象，犯错的是什么？在CCF眼里，犯错的主体是这个省，所以惩罚就降临到了这个省的头上：扣省队名额。请问在此项举措中，受害最大的是谁？好吧，从现实角度来讲，CCF这么大一个组织，即便是杜子徳也不是想改就能改的。但请问在CCF眼里，我们OIer到底是什么？ NOIP2018初赛的那些事儿 首先放链接： CCF关于公布NOIP2018初赛违规事件的处罚公告 毫无疑问，这事引起的争议相当的大，俞x颜也瞬间名扬天下，放眼望去遍地都是各种“俞x颜是我同学”之类的回复。扯远了，让我们先把视线聚焦在第一个事件上： 山东赛区违规情况及处罚通报 相比民主烈士俞x颜的事迹，这起事件反而不那么引人注目。但要注意的是，这起事件波及的是整个省的名额，而浙江的事件只波及到了一个人。 CCF在处理这起事件的时候，逻辑似乎是这样的： 山东赛区青州考点（青州二中）负责人潍坊青州市电化教育中心田志杰擅自提前比赛时间 山东省计算机学会对竞赛相关责任人培训不足，应对此事负责任 对山东省进行处罚，故对山东省名额进行扣除 还是那句话：在对一个省的处罚中，利益真正受到损害的是谁？CCF就算没有专心致志办比赛的诚意，起码也应该注意到谁是无辜的！如果因为选手作弊而引起“灭族”至少还可以用CCF的逻辑硬解析过去，这种因为负责人行为不当而引起的问题还要扣名额，emmmm 浙江赛区违规情况调查及处罚通报 10月16日， CCF接到实名举报，指出浙江赛区出现影响比赛秩序的行为，经调查核实，情况属实。 “出现影响比赛秩序的行为”？请问具体怎么样才算出现影响比赛秩序？有相关规定么？情况属实？这不等于开门还没见山，就先给人家俞x颜扣帽子吗？ 在竞赛前一天，10月12日15:29，余姚中学选手俞x颜（女）在网上发布名为“NOIP2018提高组初赛解析”的博客，13日下午初赛结束后，俞x颜从网上获取NOIP2018提高组初赛答案PDF版本后上传至“NOIP2018提高组初赛提高组解析”博客内。经验证，该博客网站不会显示更新的时间，而只显示该条博客内容首次发布的时间。因此，俞x颜的这一行为造成了NOIP2018提高组初赛答案泄露的假象。 所以说，这是假象？真是让人白高兴一场。 请问CCF，哪条条例规定了不能制造假象？当然了，这是我们可以援引万能的第八条条例： 选手违规行为是指： 将不允许夹带的物品带入考场并经指出后仍不予改正； 在考场通过不正当途径获得与竞赛有关的信息或为其他选手提供与竞赛有关的信息； 用不正当途径和介质将答案带入考场； 以不正当方式提前得到竞赛题目； 让他人替代参加竞赛或以他人或其他单位的名义参加竞赛； 抄袭或拷贝他人的答案或程序，有意提供给他人答案或程序； 不遵守竞赛规则和赛场规定； 其他可能影响公平竞赛的其他行为。 其他可能影响公平竞赛的其他行为。 Sorry，负责制定规则真的可以为所欲为。 “NOIP2018提高组初赛解析”博客一事系选手“俞x颜”（女）为吸引网上点击量而做出的行为，俞x颜本人也予以承认。她的这一行为在选手中造成一定的恐慌和混乱，干扰了正常的竞赛秩序，有损竞赛的声誉，也给组织方带来不必要的负担和干扰。 本人予以承认？俞同学啊，你既然有在CCF眼皮底子下玩火的觉悟，就应该有不被屈打成招的觉悟吧。你要是斩钉截铁地说就是先占坑等会来填，CCF也不至于把你弄成这样。 NOIP是CCF主办的NOI系列赛事之一。公平公正是竞赛的生命，任何违规行为对竞赛都是极大的伤害。CCF NOI各相关机构会带头遵守规则，严格保密，同时也承担维护竞赛公平公正良好秩序的重任，对任何违规或作弊的行为均按竞赛条例给予严肃处理。NOI各组织单位、学校、教师均要严格按照规定和流程开展工作，诚实守信，保证赛事的公正进行。 刚泼完脏水又来扣帽子？人家俞同学哪里破坏公平公正了？ 总结 这里引用一位大佬的话： 用伤害无辜者来掩盖自己的错误是心虚的体现，也永远掩盖不了。 ——Hannah_AI [3] 综上所述，俞同学的所作所为只不过是发博客的事件提前了一点而已，只要点进去就可以知道发生了什么。（当然，初赛完成之后可能有一点点误会，但俞同学肯定在自己的博客里注明了。）恐慌？历史上有过OIer恐慌的事吗？ CCF，你到底是想干嘛？把一个活生生的人当作垫脚石吗？ 写在后面 为什么CCF老是被人喷？因为他们在OIer们需要时无法提供帮助，在自己需要时却一点都不为OIer们考虑。 一个负责中国OI的组织，不应该是这样。 关于CCF的事，应该以一种理性的方式去看待。 以上就是个完美的反面教材 像 China Chasing-money Foundation 这种为黑而黑，真的能为广大OIer的权利起到什么帮助吗？并没有。 那么，我们到底可以为此做些什么？什么也做不了。 随笔 所谓“吃人” 吃人是什么？先想自己的利，再想别人的命，便是吃人。 所谓“连坐” 连坐是野蛮人的象征，譬如诛九族与扣省队名额。 方孝孺至少还有个成王败寇的说法，他的弟子，门生们做错了什么？ 《第八条条例》 选手违规行为是指： 将不允许夹带的物品带入考场并经指出后仍不予改正； 在考场通过不正当途径获得与竞赛有关的信息或为其他选手提供与竞赛有关的信息； 用不正当途径和介质将答案带入考场； 以不正当方式提前得到竞赛题目； 让他人替代参加竞赛或以他人或其他单位的名义参加竞赛； 抄袭或拷贝他人的答案或程序，有意提供给他人答案或程序； 不遵守竞赛规则和赛场规定； 其他可能影响公平竞赛的其他行为。 嘿我有个写小说的点子，《第八条条例》，我想它一定比《第二十二条军规》更好。 将心比心 中国的OIers若何CCFers对调一下位置，OI界所有问题都会得到解决。 （大家别光顾着指责CCF，试想若他们跑路了，我们吃什么？） （国人别光顾着指责清政府，试想他们跑路了，国人吃什么？） （德国人别光顾着指责纳粹，试想如果在工业发展期间他们跑路了，你们吃什么？） 参考文献 [1] Intel盒装处理器大涨价：i7-8700K涨至2999元 - 快科技 - 驱动之家 [2] OI赛事和赛制 [3] SCP-CN-601","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"写在前面\"><a class=\"markdownIt-Anchor\" href=\"#写在前面\"></a> 写在前面</h1>\n<p>先说结论：CCF的问题在于，他们在OIer们需要时无法提供帮助，在自己需要时却一点都不为OIer们考虑。</p>\n<p>几个月过去了，关于CCF的一切事件基本上都已经风平浪静。</p>\n<p>从事实角度来讲，CCF的<strong>大部分</strong>行为是无可厚非的，CCF垄断国内OI界并不停抬价，由于OI不属于商业范畴，似乎不违反现有任何法律；抬价，似乎也没有抬到诸位承担不起的地步。当然，这些报名费里面有多少用于比赛举办，可能还得打个问号，但这里要注意两点：</p>\n<ol>\n<li>CCF不是政府机构，也就是说他们并不是广大OIer们的公仆，不像我们交的税，全部都用于国家发展与建设。</li>\n<li>CCF这么个庞然大物一般的组织若要运转，需要很大一笔资金。</li>\n</ol>\n<p>其实NOIP2018时CCF就已经将评测机换成了i7-8700K 32GB RAM，但其耗费的资金必然只占我们的报名费中的一小部分。[1]简单估计一下，这台电脑撑死也就……5万？10万？但考虑到这之前的两点，这也不是什么奇怪的事。我们每年交了几百万上千万了，已经相当于一个中型企业的年收入。一言以蔽之，“把CCF的财务部门与CCF的竞赛组织部门的人对调，CCF的所有问题都会得到解决。”</p>\n<p>既然CCF激起如此民愤，说他们什么亏心事都没做未免说不过去。只是要告诉屏幕前的各位，在对CCF进行道德判断时，应该以一种更为中肯的角度去看待。</p>\n<h1 id=\"关于省队名额\"><a class=\"markdownIt-Anchor\" href=\"#关于省队名额\"></a> 关于省队名额</h1>\n<p>先谈省队。省队是什么？</p>\n<p>省队是各省参加全国赛的代表队，各个省队的名额有复杂的计算公式，一般和之前的成绩和参赛人数有关。[2]</p>\n<p>省队相当于什么难度？以下几个知识点取自“洛谷试炼场”：</p>\n<ul>\n<li>网络流</li>\n<li>单调队列</li>\n<li>概率期望</li>\n<li>二分图</li>\n<li>点分治</li>\n<li>后缀数组</li>\n<li>主席树</li>\n<li>数位DP</li>\n<li>AC自动机</li>\n<li>平衡树</li>\n<li>树链剖分</li>\n<li>动态树</li>\n<li>树套树</li>\n<li>可持久化Trie树</li>\n<li>莫队</li>\n<li>分块</li>\n<li>莫比乌斯反演</li>\n</ul>\n<p>要让以上知识点全部过关，刷题什么的暂且不提，文化课必定已经彻底停了。（不排除有同时AK文化课的大佬的存在，但这毕竟是个案。）在这种情况下，这位OIer必然是已经将自己的全部前途作为筹码押在了OI这条路上，要么是极其的热爱信息学，要么是坚信自己必然能夺魁榜首。几年来在各大OJ上留下的AC记录，几年来的无数个不眠之夜，几年来留下的汗水，却全都因为一句简单的“有复杂的计算公式，一般和之前的成绩和参赛人数有关”就被一笔勾销！在我们眼里这是个悲剧，在CCF眼里这想必就是一个统计数字！（魔改自斯大林某句被后人强行断章取义的话）</p>\n<p>自法国大革命以后，世界的的主流价值观便是人文主义。人文主义的核心是什么？人是世界的中心！当我们判断一个OIer能否参加省选时，我们应该判断TA作为<strong>一个人</strong>的真才实学，而不是什么复杂的计算公式得到的数目！今天██省因为[数据删除]被减了名额，明天██省又因为[数据删除]被减了名额，其中到底有多少是我们广大OIer的过错呢？CCF吸金什么的倒不是主要问题，但他们到底要不要把OIer的前途放在眼里？</p>\n<p><a href=\"http://www.noi.cn/newsview.html?id=625&amp;hash=B319A4&amp;type=1\" target=\"_blank\" rel=\"noopener\">CCF关于NOIP2017复赛违规省份的处罚公告</a></p>\n<p>呵呵，通报批评一下就了事了，真当我们是傻子？而且这不是重点，提高分数线是怎么回事？</p>\n<p><a href=\"http://www.noi.cn/newsview.html?id=568&amp;hash=8139FE&amp;type=1\" target=\"_blank\" rel=\"noopener\">CCF 关于NOIP2016违规事件的处罚公告</a></p>\n<p>处罚作弊者是理所当然的，但整个学校禁赛一年？喵喵喵？这是退回的封建时代了，诛九族？</p>\n<p>若一个省发生了作弊等乱象，犯错的是什么？在CCF眼里，犯错的主体是这个省，所以惩罚就降临到了这个省的头上：扣省队名额。请问在此项举措中，受害最大的是谁？好吧，从现实角度来讲，CCF这么大一个组织，即便是杜子徳也不是想改就能改的。但请问在CCF眼里，我们OIer到底是什么？</p>\n<h1 id=\"noip2018初赛的那些事儿\"><a class=\"markdownIt-Anchor\" href=\"#noip2018初赛的那些事儿\"></a> NOIP2018初赛的那些事儿</h1>\n<p>首先放链接：<br>\n<a href=\"http://www.noi.cn/newsview.html?id=760&amp;hash=02E485&amp;type=1\" target=\"_blank\" rel=\"noopener\">CCF关于公布NOIP2018初赛违规事件的处罚公告</a></p>\n<p>毫无疑问，这事引起的争议相当的大，俞x颜也瞬间名扬天下，放眼望去遍地都是各种“俞x颜是我同学”之类的回复。扯远了，让我们先把视线聚焦在第一个事件上：</p>\n<h2 id=\"山东赛区违规情况及处罚通报\"><a class=\"markdownIt-Anchor\" href=\"#山东赛区违规情况及处罚通报\"></a> 山东赛区违规情况及处罚通报</h2>\n<p>相比民主烈士俞x颜的事迹，这起事件反而不那么引人注目。但要注意的是，这起事件波及的是整个省的名额，而浙江的事件只波及到了一个人。</p>\n<p>CCF在处理这起事件的时候，逻辑似乎是这样的：</p>\n<ol>\n<li>山东赛区青州考点（青州二中）负责人潍坊青州市电化教育中心田志杰擅自提前比赛时间</li>\n<li>山东省计算机学会对竞赛相关责任人培训不足，应对此事负责任</li>\n<li>对山东省进行处罚，故对山东省名额进行扣除</li>\n</ol>\n<p>还是那句话：在对一个省的处罚中，利益真正受到损害的是谁？CCF就算没有专心致志办比赛的诚意，起码也应该注意到谁是无辜的！如果因为选手作弊而引起“灭族”至少还可以用CCF的逻辑硬解析过去，这种因为<strong>负责人</strong>行为不当而引起的问题还要扣名额，emmmm</p>\n<h2 id=\"浙江赛区违规情况调查及处罚通报\"><a class=\"markdownIt-Anchor\" href=\"#浙江赛区违规情况调查及处罚通报\"></a> 浙江赛区违规情况调查及处罚通报</h2>\n<blockquote>\n<p>10月16日， CCF接到实名举报，指出浙江赛区出现影响比赛秩序的行为，经调查核实，情况属实。</p>\n</blockquote>\n<p>“出现影响比赛秩序的行为”？请问具体怎么样才算出现影响比赛秩序？有相关规定么？情况属实？这不等于开门还没见山，就先给人家俞x颜扣帽子吗？</p>\n<blockquote>\n<p>在竞赛前一天，10月12日15:29，余姚中学选手俞x颜（女）在网上发布名为“NOIP2018提高组初赛解析”的博客，13日下午初赛结束后，俞x颜从网上获取NOIP2018提高组初赛答案PDF版本后上传至“NOIP2018提高组初赛提高组解析”博客内。经验证，该博客网站不会显示更新的时间，而只显示该条博客内容首次发布的时间。因此，俞x颜的这一行为造成了NOIP2018提高组初赛答案泄露的假象。</p>\n</blockquote>\n<p>所以说，这是假象？真是让人白高兴一场。</p>\n<p>请问CCF，哪条条例规定了不能制造假象？当然了，这是我们可以援引万能的<strong>第八条条例</strong>：</p>\n<blockquote>\n<p>选手违规行为是指：</p>\n<ol>\n<li>\n<pre><code> 将不允许夹带的物品带入考场并经指出后仍不予改正；\n</code></pre>\n</li>\n<li>\n<pre><code> 在考场通过不正当途径获得与竞赛有关的信息或为其他选手提供与竞赛有关的信息；\n</code></pre>\n</li>\n<li>\n<pre><code> 用不正当途径和介质将答案带入考场；\n</code></pre>\n</li>\n<li>\n<pre><code> 以不正当方式提前得到竞赛题目；\n</code></pre>\n</li>\n<li>\n<pre><code> 让他人替代参加竞赛或以他人或其他单位的名义参加竞赛；\n</code></pre>\n</li>\n<li>\n<pre><code> 抄袭或拷贝他人的答案或程序，有意提供给他人答案或程序；\n</code></pre>\n</li>\n<li>\n<pre><code> 不遵守竞赛规则和赛场规定；\n</code></pre>\n</li>\n<li>\n<pre><code> 其他可能影响公平竞赛的其他行为。\n</code></pre>\n</li>\n</ol>\n</blockquote>\n<p>其他可能影响公平竞赛的其他行为。</p>\n<p>Sorry，负责制定规则真的可以为所欲为。</p>\n<blockquote>\n<p>“NOIP2018提高组初赛解析”博客一事系选手“俞x颜”（女）为吸引网上点击量而做出的行为，<strong>俞x颜本人也予以承认</strong>。她的这一行为在选手中造成一定的恐慌和混乱，干扰了正常的竞赛秩序，有损竞赛的声誉，也给组织方带来不必要的负担和干扰。</p>\n</blockquote>\n<p>本人予以承认？俞同学啊，你既然有在CCF眼皮底子下玩火的觉悟，就应该有不被屈打成招的觉悟吧。你要是斩钉截铁地说就是先占坑等会来填，CCF也不至于把你弄成这样。</p>\n<blockquote>\n<p>NOIP是CCF主办的NOI系列赛事之一。公平公正是竞赛的生命，任何违规行为对竞赛都是极大的伤害。CCF NOI各相关机构会带头遵守规则，严格保密，同时也承担维护竞赛公平公正良好秩序的重任，对任何违规或作弊的行为均按竞赛条例给予严肃处理。NOI各组织单位、学校、教师均要严格按照规定和流程开展工作，诚实守信，保证赛事的公正进行。</p>\n</blockquote>\n<p>刚泼完脏水又来扣帽子？人家俞同学哪里破坏公平公正了？</p>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h3>\n<p>这里引用一位大佬的话：</p>\n<blockquote>\n<p>用伤害无辜者来掩盖自己的错误是心虚的体现，也永远掩盖不了。 ——Hannah_AI [3]</p>\n</blockquote>\n<p>综上所述，俞同学的所作所为只不过是发博客的事件提前了一点而已，只要点进去就可以知道发生了什么。（当然，初赛完成之后可能有一点点误会，但俞同学肯定在自己的博客里注明了。）恐慌？历史上有过OIer恐慌的事吗？</p>\n<p>CCF，你到底是想干嘛？把一个活生生的人当作垫脚石吗？</p>\n<h1 id=\"写在后面\"><a class=\"markdownIt-Anchor\" href=\"#写在后面\"></a> 写在后面</h1>\n<p>为什么CCF老是被人喷？因为他们在OIer们需要时无法提供帮助，在自己需要时却一点都不为OIer们考虑。</p>\n<p>一个负责中国OI的组织，不应该是这样。</p>\n<p>关于CCF的事，应该以一种理性的方式去看待。</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-9a49f4e1981a4653446d9b165c43a7c5_hd.jpg\" alt></p>\n<p>以上就是个完美的反面教材</p>\n<p>像 China Chasing-money Foundation 这种为黑而黑，真的能为广大OIer的权利起到什么帮助吗？并没有。</p>\n<p>那么，我们到底可以为此做些什么？什么也做不了。</p>\n<h1 id=\"随笔\"><a class=\"markdownIt-Anchor\" href=\"#随笔\"></a> 随笔</h1>\n<h2 id=\"所谓吃人\"><a class=\"markdownIt-Anchor\" href=\"#所谓吃人\"></a> 所谓“吃人”</h2>\n<p>吃人是什么？先想自己的利，再想别人的命，便是吃人。</p>\n<h2 id=\"所谓连坐\"><a class=\"markdownIt-Anchor\" href=\"#所谓连坐\"></a> 所谓“连坐”</h2>\n<p>连坐是野蛮人的象征，譬如诛九族与扣省队名额。</p>\n<p>方孝孺至少还有个成王败寇的说法，他的弟子，门生们做错了什么？</p>\n<h2 id=\"第八条条例\"><a class=\"markdownIt-Anchor\" href=\"#第八条条例\"></a> 《第八条条例》</h2>\n<blockquote>\n<p>选手违规行为是指：</p>\n<ol>\n<li>\n<pre><code> 将不允许夹带的物品带入考场并经指出后仍不予改正；\n</code></pre>\n</li>\n<li>\n<pre><code> 在考场通过不正当途径获得与竞赛有关的信息或为其他选手提供与竞赛有关的信息；\n</code></pre>\n</li>\n<li>\n<pre><code> 用不正当途径和介质将答案带入考场；\n</code></pre>\n</li>\n<li>\n<pre><code> 以不正当方式提前得到竞赛题目；\n</code></pre>\n</li>\n<li>\n<pre><code> 让他人替代参加竞赛或以他人或其他单位的名义参加竞赛；\n</code></pre>\n</li>\n<li>\n<pre><code> 抄袭或拷贝他人的答案或程序，有意提供给他人答案或程序；\n</code></pre>\n</li>\n<li>\n<pre><code> 不遵守竞赛规则和赛场规定；\n</code></pre>\n</li>\n<li>\n<pre><code> 其他可能影响公平竞赛的其他行为。\n</code></pre>\n</li>\n</ol>\n</blockquote>\n<p>嘿我有个写小说的点子，《第八条条例》，我想它一定比《第二十二条军规》更好。</p>\n<h2 id=\"将心比心\"><a class=\"markdownIt-Anchor\" href=\"#将心比心\"></a> 将心比心</h2>\n<p>中国的OIers若何CCFers对调一下位置，OI界所有问题都会得到解决。</p>\n<p>（大家别光顾着指责CCF，试想若他们跑路了，我们吃什么？）</p>\n<p>（国人别光顾着指责清政府，试想他们跑路了，国人吃什么？）</p>\n<p>（德国人别光顾着指责纳粹，试想如果在工业发展期间他们跑路了，你们吃什么？）</p>\n<h1 id=\"参考文献\"><a class=\"markdownIt-Anchor\" href=\"#参考文献\"></a> 参考文献</h1>\n<p>[1] <a href=\"https://news.mydrivers.com/1/593/593774.htm\" target=\"_blank\" rel=\"noopener\">Intel盒装处理器大涨价：i7-8700K涨至2999元 - 快科技 - 驱动之家</a></p>\n<p>[2] <a href=\"https://oi-wiki.org/intro/mode/\" target=\"_blank\" rel=\"noopener\">OI赛事和赛制</a></p>\n<p>[3] <a href=\"http://scp-wiki-cn.wikidot.com/scp-cn-601\" target=\"_blank\" rel=\"noopener\">SCP-CN-601</a></p>\n","tags":[{"name":"随笔","slug":"随笔","permalink":"https://keepthethink.github.io/tags/随笔/"}]},{"title":"计算几何：凸包","date":"2019-04-05T07:33:00.000Z","path":"archives/704167021/","text":"对于初学计算几何的OIer来说，Graham算法是个不错的凸包算法。Graham算法相比极角排序法来说，更为直观也更容易理解。 数据定义 class Point { public: double x, y; Point(double x = 0, double y = 0):x(x), y(y) {} Point(Point a, Point b) { //构造从a到b的向量 x = b.x - a.x; y = b.y - a.y; } double dist(const Point&amp; p) const { //计算从自身到点P的距离 return sqrt((x - p.x) * (x - p.x) + (y - p.y) * (y - p.y)); } double operator * (const Point&amp; p) const { //计算向量叉积 return x * p.y - p.x * y; } bool operator &lt; (const Point&amp; p) const { //按照X轴排序 return (x == p.x) ? (y &lt; p.y) : (x &lt; p.x); } friend istream&amp; operator &gt;&gt; (istream&amp; in, Point&amp; p) { //重载 &gt;&gt; 运算符使得cin可以输入 in &gt;&gt; p.x &gt;&gt; p.y; return in; } }; const int MAXN = 10000 + 5; Point p[MAXN]; int st[MAXN], top = -1; //点栈 int n; 主程序 void input() { //输入所有点 cin &gt;&gt; n; for(int i = 0; i &lt; n; i++) { cin &gt;&gt; p[i]; } } int main() { input(); sort(p, p + n); //对点进行直角坐标排序􏰣􏰳􏰣􏰳􏰮􏰂 double ans = 0; st[++top] = 0; //将第一个点入栈 st[++top] = 1; //将第二个点入栈 for(int i = 2; i &lt; n; i++) { Point u(p[st[top - 1]], p[st[top]]); //计算栈顶两个点构成的向量 Point v(p[st[top]], p[i]); //计算当前点与栈顶构成的向量 while(u * v &lt; 0) { //若叉积小于0 if(top == 0) { //当栈中只有一个元素时，退出循环 break; } top--; //弹出栈顶 u = Point(p[st[top - 1]], p[st[top]]); //更新 v = Point(p[st[top]], p[i]); //更新 } st[++top] = i; //将第i个点压入栈中 } for(int i = 0; i &lt;= top - 1; i++) { ans += p[st[i]].dist(p[st[i + 1]]); //累加下半个凸包的长度 } top = -1; //清空栈 //求出上半个凸包，与前半部分大同小异 st[++top] = 0; st[++top] = 1; for(int i = 2; i &lt; n; i++) { Point u(p[st[top - 1]], p[st[top]]); Point v(p[st[top]], p[i]); while(u * v &gt; 0) { if(top == 0) { break; } top--; u = Point(p[st[top - 1]], p[st[top]]); v = Point(p[st[top]], p[i]); } st[++top] = i; } for(int i = 0; i &lt;= top - 1; i++) { ans += p[st[i]].dist(p[st[i + 1]]); } top = -1; cout &lt;&lt; setprecision(2) &lt;&lt; fixed &lt;&lt; ans &lt;&lt; endl; //控制精度 return 0; }","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>对于初学计算几何的OIer来说，Graham算法是个不错的凸包算法。Graham算法相比极角排序法来说，更为直观也更容易理解。</p>\n<h1 id=\"数据定义\"><a class=\"markdownIt-Anchor\" href=\"#数据定义\"></a> 数据定义</h1>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Point</span> {</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-keyword\">double</span> x, y;\n\n    Point(<span class=\"hljs-keyword\">double</span> x = <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">double</span> y = <span class=\"hljs-number\">0</span>):x(x), y(y) {}\n\n    Point(Point a, Point b) {\n        <span class=\"hljs-comment\">//构造从a到b的向量</span>\n        x = b.x - a.x;\n        y = b.y - a.y;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">dist</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Point&amp; p)</span> <span class=\"hljs-keyword\">const</span> </span>{\n        <span class=\"hljs-comment\">//计算从自身到点P的距离</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sqrt</span>((x - p.x) * (x - p.x) + (y - p.y) * (y - p.y));\n    }\n\n    <span class=\"hljs-keyword\">double</span> <span class=\"hljs-keyword\">operator</span> * (<span class=\"hljs-keyword\">const</span> Point&amp; p) <span class=\"hljs-keyword\">const</span> {\n        <span class=\"hljs-comment\">//计算向量叉积</span>\n        <span class=\"hljs-keyword\">return</span> x * p.y - p.x * y;\n    }\n\n    <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-keyword\">operator</span> &lt; (<span class=\"hljs-keyword\">const</span> Point&amp; p) <span class=\"hljs-keyword\">const</span> {\n        <span class=\"hljs-comment\">//按照X轴排序</span>\n        <span class=\"hljs-keyword\">return</span> (x == p.x) ? (y &lt; p.y) : (x &lt; p.x);\n    }\n\n    <span class=\"hljs-keyword\">friend</span> istream&amp; <span class=\"hljs-keyword\">operator</span> &gt;&gt; (istream&amp; in, Point&amp; p) {\n        <span class=\"hljs-comment\">//重载 &gt;&gt; 运算符使得cin可以输入</span>\n        in &gt;&gt; p.x &gt;&gt; p.y;\n\n        <span class=\"hljs-keyword\">return</span> in;\n    }\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> MAXN = <span class=\"hljs-number\">10000</span> + <span class=\"hljs-number\">5</span>;\n\nPoint p[MAXN];\n<span class=\"hljs-keyword\">int</span> st[MAXN], top = <span class=\"hljs-number\">-1</span>; <span class=\"hljs-comment\">//点栈</span>\n<span class=\"hljs-keyword\">int</span> n;\n</code></pre>\n<h1 id=\"主程序\"><a class=\"markdownIt-Anchor\" href=\"#主程序\"></a> 主程序</h1>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">input</span><span class=\"hljs-params\">()</span> </span>{ <span class=\"hljs-comment\">//输入所有点</span>\n    <span class=\"hljs-built_in\">cin</span> &gt;&gt; n;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n        <span class=\"hljs-built_in\">cin</span> &gt;&gt; p[i];\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    input();\n    sort(p, p + n); <span class=\"hljs-comment\">//对点进行直角坐标排序􏰣􏰳􏰣􏰳􏰮􏰂</span>\n    <span class=\"hljs-keyword\">double</span> ans = <span class=\"hljs-number\">0</span>;\n\n    st[++top] = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">//将第一个点入栈</span>\n    st[++top] = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">//将第二个点入栈</span>\n\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">2</span>; i &lt; n; i++) {\n        <span class=\"hljs-function\">Point <span class=\"hljs-title\">u</span><span class=\"hljs-params\">(p[st[top - <span class=\"hljs-number\">1</span>]], p[st[top]])</span></span>; <span class=\"hljs-comment\">//计算栈顶两个点构成的向量</span>\n        <span class=\"hljs-function\">Point <span class=\"hljs-title\">v</span><span class=\"hljs-params\">(p[st[top]], p[i])</span></span>; <span class=\"hljs-comment\">//计算当前点与栈顶构成的向量</span>\n\n        <span class=\"hljs-keyword\">while</span>(u * v &lt; <span class=\"hljs-number\">0</span>) { <span class=\"hljs-comment\">//若叉积小于0</span>\n            <span class=\"hljs-keyword\">if</span>(top == <span class=\"hljs-number\">0</span>) { <span class=\"hljs-comment\">//当栈中只有一个元素时，退出循环</span>\n                <span class=\"hljs-keyword\">break</span>;\n            }\n            top--; <span class=\"hljs-comment\">//弹出栈顶</span>\n            u = Point(p[st[top - <span class=\"hljs-number\">1</span>]], p[st[top]]); <span class=\"hljs-comment\">//更新</span>\n            v = Point(p[st[top]], p[i]); <span class=\"hljs-comment\">//更新</span>\n        }\n        st[++top] = i; <span class=\"hljs-comment\">//将第i个点压入栈中</span>\n    }\n\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;= top - <span class=\"hljs-number\">1</span>; i++) {\n        ans += p[st[i]].dist(p[st[i + <span class=\"hljs-number\">1</span>]]); <span class=\"hljs-comment\">//累加下半个凸包的长度</span>\n    }\n    top = <span class=\"hljs-number\">-1</span>; <span class=\"hljs-comment\">//清空栈</span>\n    \n    <span class=\"hljs-comment\">//求出上半个凸包，与前半部分大同小异</span>\n    st[++top] = <span class=\"hljs-number\">0</span>;\n    st[++top] = <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">2</span>; i &lt; n; i++) {\n        <span class=\"hljs-function\">Point <span class=\"hljs-title\">u</span><span class=\"hljs-params\">(p[st[top - <span class=\"hljs-number\">1</span>]], p[st[top]])</span></span>;\n        <span class=\"hljs-function\">Point <span class=\"hljs-title\">v</span><span class=\"hljs-params\">(p[st[top]], p[i])</span></span>;\n\n        <span class=\"hljs-keyword\">while</span>(u * v &gt; <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">if</span>(top == <span class=\"hljs-number\">0</span>) {\n                <span class=\"hljs-keyword\">break</span>;\n            }\n            top--;\n            u = Point(p[st[top - <span class=\"hljs-number\">1</span>]], p[st[top]]);\n            v = Point(p[st[top]], p[i]);\n        }\n        st[++top] = i;\n    }\n\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;= top - <span class=\"hljs-number\">1</span>; i++) {\n        ans += p[st[i]].dist(p[st[i + <span class=\"hljs-number\">1</span>]]);\n    }\n    top = <span class=\"hljs-number\">-1</span>;\n\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; setprecision(<span class=\"hljs-number\">2</span>) &lt;&lt; fixed &lt;&lt; ans &lt;&lt; <span class=\"hljs-built_in\">endl</span>; <span class=\"hljs-comment\">//控制精度</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n","tags":[{"name":"计算几何","slug":"计算几何","permalink":"https://keepthethink.github.io/tags/计算几何/"}]},{"title":"Splay学习笔记","date":"2019-03-28T12:59:00.000Z","path":"archives/1401793044/","text":"前言 伸展树（英语：Splay Tree）是一种能够自我平衡的二叉查找树，它能在均摊O(log n)的时间内完成基于伸展（Splay）操作的插入、查找、修改和删除操作。 众所周知，普通BST在进行各种操作时很容易因为左子树与右子树高度差的问题导致时间复杂度退化为O(n)，Splay为了避免这个问题，使用了一种叫做“伸展”的操作来使左右子树平衡，在后面会介绍。 定义 节点 node.v：节点node的值 node.father：节点node的父节点 node.ch[0]与node.ch[1]：节点node的左子节点与右子节点 node.size：以节点node为根节点的子树的节点总数 node.cnt：数值与节点node相同的节点的数量（都储存在节点node中） 代码： class Node { public: int v, father, ch[2], size, cnt; Node(int v = 0, int father = 0, int size = 0, int cnt = 0):v(v), father(father), size(size), cnt(cnt) { ch[0] = ch[1] = 0; } }; 树 root：根节点 cnt：总结点数 Node node[MAXN]; int root = 0, cnt = 0; 操作 基本操作 pushup pushup()函数：更新节点p的size值 void pushup(int p) { node[p].size = node[node[p].ch[0]].size + node[p].cnt + node[node[p].ch[1]].size; //节点数 = 左子树节点数 + 本身的节点数 + 右子树节点数 } check check()函数：询问节点p是其父节点的左子节点还是右子节点 int check(int p) { return node[node[p].father].ch[0] == p ? 0 : 1; //0代表左子节点，1代表右子节点 } connect connect()函数：将节点x连接为节点f的子节点，方向为d (d = 0, 1，同上) void connect(int x, int f, int d) { node[f].ch[d] = x; //将节点f的子节点设置为x node[x].father = f; //将节点x的父节点设置为f } 旋转 rotate 旋转是平衡树最主要的操作，其本质在于，每次进行旋转时，左右子树当中之一高度 -1，另外一棵高度 +1，以达到平衡的目的。 左旋： 第一次连边，节点x的子节点成为x的父节点的右子节点 第二次连边，节点x成为节点x的父节点的父节点的子节点，方向与x的父节点相同 第三次连边，节点x的父节点成为节点x的左子节点 右旋： 第一次连边，节点x的子节点成为x的父节点的左子节点 第二次连边，节点x成为节点x的父节点的父节点的子节点，方向与x的父节点相同 第三次连边，节点x的父节点成为节点x的右子节点 旋转操作只与标为红，蓝，绿的三个部分有关。 void rotate(int x) { int y = node[x].father, z = node[y].father, d = check(x), w = node[x].ch[d ^ 1]; //w判断应该左旋还是右旋 connect(w, y, d); //第一次连边，节点x的子节点连接到x的父节点，方向与节点x相同 connect(x, z, check(y)); //第二次连边，节点x连接到节点x的父节点的父节点，方向与x的父节点相同 connect(y, x, d ^ 1); //第三次连边，节点x的父节点连接到节点x，方向与节点x原先的方向相反 pushup(y); //更新子树 pushup(x); //更新子树 } 伸展 splay Splay操作：将节点x旋转到节点dist的子节点。通常是将该节点旋转到根节点，在这种情况下，应当将root置为x 最朴素的想法：只要父节点不是dist就一直旋转该节点，但这样很容易被某些机（wu）智（liang）出题人卡。 void splay(int x, int dist = 0) { while(node[x].father != dist) { rotate(x); } if(dist == 0) { root = x; } } 所以，在实际操作中，通常会预判节点x的父节点的方向，若方向一致则旋转其父节点，减少被卡的可能性。 void splay(int x, int dist = 0) { for(int f = node[x].father; f = node[x].father, f != dist; rotate(x)) { if(node[f].father != dist) { if(check(x) == check(f)) { rotate(f); //方向一致则旋转x的父节点 } else { rotate(x); //方向不一致则旋转x } } } if(dist == 0) { root = x; } } 查找 find 查找值为x的节点，找到后将其置为root以便操作。 find操作的意义在于将值为x的节点伸展（splay）到根，在不存在值为x的节点的情况下，应将小于x的节点中最大的节点伸展（splay）到根。 void find(int x) { int cur = root; while(node[cur].ch[x &gt; node[cur].v] != 0 &amp;&amp; x != node[cur].v) { cur = node[cur].ch[x &gt; node[cur].v]; //查找值为x的节点 } splay(cur); } 公共操作 如果将本文讲的Splay打包成一个class，则前文所述的操作应包含在private中，本节所述的操作应包含在public中。 insert Splay中的insert其实与朴素BST中的insert没有什么区别，但若直接插入可能导致树退化为链，所以要在末尾处调用一次splay()函数，使Splay树保持平衡。 void insert(int x) { int cur = root, p = 0; while(cur != 0 &amp;&amp; node[cur].v != x) { p = cur; cur = node[cur].ch[x &lt; node[cur].v ? 0 : 1]; } if(cur != 0) { node[cur].cnt++; } else { cur = ++cnt; if(p != 0) { node[p].ch[x &lt;= node[p].v ? 0 : 1] = cur; } node[cur] = Node(x, p, 1, 1); } splay(cur); } serial serial操作：查询值为x的节点，在find操作的基础上，serial只需要在find过后输出左子树节点数量即可。 int serial(int x) { find(x); return node[node[root].ch[0]].size } pre 找出值为x的节点的前驱，将节点splay到root后在左子树查找最大值即可。 int pre(int x) { find(x); if(node[root].v &lt; x) { return root; } int cur = node[root].ch[0]; while(node[cur].ch[1] != 0) { cur = node[cur].ch[1]; } return cur; } suc 找出值为x的点的后继，与前驱同理。 int suc(int x) { find(x); if(node[root].v &gt; x) { return root; } int cur = node[root].ch[1]; while(node[cur].ch[0] != 0) { cur = node[cur].ch[0]; } return cur; } remove 删除一个节点。 删除较为复杂，分四步来完成： 定义last为节点的前驱，next为节点的后继。 将last节点splay到root，这时last的左子树皆小于x 将next节点splay到last的子节右点，此时next的右子树皆大于x next的左节点rm必然满足 last &lt; rm &lt; next，删除rm即可 void remove(int x) { int last = pre(x), next = suc(x); splay(last); splay(next, last); int rm = node[next].ch[0]; if(node[rm].cnt &gt; 1) { node[rm].cnt--; splay(rm); } else { node[next].ch[0] = 0; pushup(next); pushup(root); } } rank 查找排名为k的节点 用一个指针cur从root开始查找，每次根据左子树大小于k的关系修改cur以及k。 int rank(int k) { int cur = root; while(1) { if(node[cur].ch[0] != 0 &amp;&amp; k &lt;= node[node[cur].ch[0]].size) { cur = node[cur].ch[0]; } else if(k &gt; node[node[cur].ch[0]].size + node[cur].cnt) { k -= node[node[cur].ch[0]].size + node[cur].cnt; cur = node[cur].ch[1]; } else { return cur; } } } 参考资料 伸展树- 维基百科，自由的百科全书 Splay Tree Introduction","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\"></a> 前言</h1>\n<p>伸展树（英语：Splay Tree）是一种能够<strong>自我平衡</strong>的二叉查找树，它能在均摊O(log n)的时间内完成基于伸展（Splay）操作的插入、查找、修改和删除操作。</p>\n<p>众所周知，普通BST在进行各种操作时很容易因为左子树与右子树高度差的问题导致时间复杂度退化为O(n)，Splay为了避免这个问题，使用了一种叫做“伸展”的操作来使左右子树平衡，在后面会介绍。</p>\n<h1 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\"></a> 定义</h1>\n<h2 id=\"节点\"><a class=\"markdownIt-Anchor\" href=\"#节点\"></a> 节点</h2>\n<p><code>node.v</code>：节点node的值</p>\n<p><code>node.father</code>：节点node的父节点</p>\n<p><code>node.ch[0]</code>与<code>node.ch[1]</code>：节点node的左子节点与右子节点</p>\n<p><code>node.size</code>：以节点node为根节点的子树的节点总数</p>\n<p><code>node.cnt</code>：数值与节点node相同的节点的数量（都储存在节点node中）</p>\n<p>代码：</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span> {</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-keyword\">int</span> v, father, ch[<span class=\"hljs-number\">2</span>], size, cnt;\n\n    Node(<span class=\"hljs-keyword\">int</span> v = <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">int</span> father = <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">int</span> size = <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">int</span> cnt = <span class=\"hljs-number\">0</span>):v(v), father(father), size(size), cnt(cnt) {\n        ch[<span class=\"hljs-number\">0</span>] = ch[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0</span>;\n    }\n};\n</code></pre>\n<h2 id=\"树\"><a class=\"markdownIt-Anchor\" href=\"#树\"></a> 树</h2>\n<p><code>root</code>：根节点</p>\n<p><code>cnt</code>：总结点数</p>\n<pre class=\"highlight\"><code class=\"cpp\">Node node[MAXN];\n<span class=\"hljs-keyword\">int</span> root = <span class=\"hljs-number\">0</span>, cnt = <span class=\"hljs-number\">0</span>;\n</code></pre>\n<h1 id=\"操作\"><a class=\"markdownIt-Anchor\" href=\"#操作\"></a> 操作</h1>\n<h2 id=\"基本操作\"><a class=\"markdownIt-Anchor\" href=\"#基本操作\"></a> 基本操作</h2>\n<h3 id=\"pushup\"><a class=\"markdownIt-Anchor\" href=\"#pushup\"></a> pushup</h3>\n<p><code>pushup()</code>函数：<strong>更新</strong>节点p的<code>size</code>值</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">pushup</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> p)</span> </span>{\n    node[p].size = node[node[p].ch[<span class=\"hljs-number\">0</span>]].size + node[p].cnt + node[node[p].ch[<span class=\"hljs-number\">1</span>]].size; <span class=\"hljs-comment\">//节点数 = 左子树节点数 + 本身的节点数 + 右子树节点数</span>\n}\n</code></pre>\n<hr>\n<h3 id=\"check\"><a class=\"markdownIt-Anchor\" href=\"#check\"></a> check</h3>\n<p><code>check()</code>函数：询问节点p是其父节点的左子节点还是右子节点</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">check</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> p)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> node[node[p].father].ch[<span class=\"hljs-number\">0</span>] == p ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">//0代表左子节点，1代表右子节点</span>\n}\n</code></pre>\n<hr>\n<h3 id=\"connect\"><a class=\"markdownIt-Anchor\" href=\"#connect\"></a> connect</h3>\n<p><code>connect()</code>函数：将节点x连接为节点f的子节点，方向为d (d = 0, 1，同上)</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">connect</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> f, <span class=\"hljs-keyword\">int</span> d)</span> </span>{\n    node[f].ch[d] = x; <span class=\"hljs-comment\">//将节点f的子节点设置为x</span>\n    node[x].father = f; <span class=\"hljs-comment\">//将节点x的父节点设置为f</span>\n}\n</code></pre>\n<h2 id=\"旋转\"><a class=\"markdownIt-Anchor\" href=\"#旋转\"></a> 旋转</h2>\n<h3 id=\"rotate\"><a class=\"markdownIt-Anchor\" href=\"#rotate\"></a> rotate</h3>\n<p>旋转是平衡树最主要的操作，其本质在于，每次进行旋转时，左右子树当中之一高度 -1，另外一棵高度 +1，以达到平衡的目的。</p>\n<p>左旋：</p>\n<p>第一次连边，节点x的子节点成为x的父节点的右子节点</p>\n<p>第二次连边，节点x成为节点x的父节点的父节点的子节点，方向与x的父节点相同</p>\n<p>第三次连边，节点x的父节点成为节点x的左子节点</p>\n<p><img src=\"https://keepthethink.github.io/images/left_rotate.jpg\" alt></p>\n<p>右旋：</p>\n<p>第一次连边，节点x的子节点成为x的父节点的左子节点</p>\n<p>第二次连边，节点x成为节点x的父节点的父节点的子节点，方向与x的父节点相同</p>\n<p>第三次连边，节点x的父节点成为节点x的右子节点</p>\n<p><img src=\"https://keepthethink.github.io/images/right_rotate.jpg\" alt></p>\n<p>旋转操作只与标为红，蓝，绿的三个部分有关。</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">rotate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span> </span>{\n    <span class=\"hljs-keyword\">int</span> y = node[x].father, z = node[y].father, d = check(x), w = node[x].ch[d ^ <span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">//w判断应该左旋还是右旋</span>\n    connect(w, y, d); <span class=\"hljs-comment\">//第一次连边，节点x的子节点连接到x的父节点，方向与节点x相同</span>\n    connect(x, z, check(y)); <span class=\"hljs-comment\">//第二次连边，节点x连接到节点x的父节点的父节点，方向与x的父节点相同</span>\n    connect(y, x, d ^ <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//第三次连边，节点x的父节点连接到节点x，方向与节点x原先的方向相反</span>\n    pushup(y); <span class=\"hljs-comment\">//更新子树</span>\n    pushup(x); <span class=\"hljs-comment\">//更新子树</span>\n}\n</code></pre>\n<h2 id=\"伸展\"><a class=\"markdownIt-Anchor\" href=\"#伸展\"></a> 伸展</h2>\n<h3 id=\"splay\"><a class=\"markdownIt-Anchor\" href=\"#splay\"></a> splay</h3>\n<p>Splay操作：将节点x旋转到节点dist的子节点。通常是将该节点旋转到根节点，在这种情况下，应当将<code>root</code>置为x</p>\n<p>最朴素的想法：只要父节点不是dist就一直旋转该节点，但这样很容易被某些机（wu）智（liang）出题人卡。</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">splay</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> dist = <span class=\"hljs-number\">0</span>)</span> </span>{\n    <span class=\"hljs-keyword\">while</span>(node[x].father != dist) {\n        rotate(x);\n    }\n    <span class=\"hljs-keyword\">if</span>(dist == <span class=\"hljs-number\">0</span>) {\n        root = x;\n    }\n}\n</code></pre>\n<p>所以，在实际操作中，通常会预判节点x的父节点的方向，若方向一致则旋转其父节点，减少被卡的可能性。</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">splay</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> dist = <span class=\"hljs-number\">0</span>)</span> </span>{\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> f = node[x].father; f = node[x].father, f != dist; rotate(x)) {\n        <span class=\"hljs-keyword\">if</span>(node[f].father != dist) {\n            <span class=\"hljs-keyword\">if</span>(check(x) == check(f)) {\n                rotate(f); <span class=\"hljs-comment\">//方向一致则旋转x的父节点</span>\n            } <span class=\"hljs-keyword\">else</span> {\n                rotate(x); <span class=\"hljs-comment\">//方向不一致则旋转x</span>\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">if</span>(dist == <span class=\"hljs-number\">0</span>) {\n        root = x;\n    }\n}\n</code></pre>\n<h2 id=\"查找\"><a class=\"markdownIt-Anchor\" href=\"#查找\"></a> 查找</h2>\n<h3 id=\"find\"><a class=\"markdownIt-Anchor\" href=\"#find\"></a> find</h3>\n<p>查找值为x的节点，找到后将其置为<code>root</code>以便操作。</p>\n<p><code>find</code>操作的意义在于将值为x的节点伸展（splay）到根，在不存在值为x的节点的情况下，应将小于x的节点中最大的节点伸展（splay）到根。</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span> </span>{\n    <span class=\"hljs-keyword\">int</span> cur = root;\n    <span class=\"hljs-keyword\">while</span>(node[cur].ch[x &gt; node[cur].v] != <span class=\"hljs-number\">0</span> &amp;&amp; x != node[cur].v) {\n        cur = node[cur].ch[x &gt; node[cur].v]; <span class=\"hljs-comment\">//查找值为x的节点</span>\n    }\n    splay(cur);\n}\n</code></pre>\n<h2 id=\"公共操作\"><a class=\"markdownIt-Anchor\" href=\"#公共操作\"></a> 公共操作</h2>\n<p>如果将本文讲的Splay打包成一个<code>class</code>，则前文所述的操作应包含在<code>private</code>中，本节所述的操作应包含在<code>public</code>中。</p>\n<h3 id=\"insert\"><a class=\"markdownIt-Anchor\" href=\"#insert\"></a> insert</h3>\n<p>Splay中的<code>insert</code>其实与朴素BST中的<code>insert</code>没有什么区别，但若直接插入可能导致树退化为链，所以要在末尾处调用一次splay()函数，使Splay树保持平衡。</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span> </span>{\n    <span class=\"hljs-keyword\">int</span> cur = root, p = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span>(cur != <span class=\"hljs-number\">0</span> &amp;&amp; node[cur].v != x) {\n        p = cur;\n        cur = node[cur].ch[x &lt; node[cur].v ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">1</span>];\n    }\n    <span class=\"hljs-keyword\">if</span>(cur != <span class=\"hljs-number\">0</span>) {\n        node[cur].cnt++;\n    } <span class=\"hljs-keyword\">else</span> {\n        cur = ++cnt;\n        <span class=\"hljs-keyword\">if</span>(p != <span class=\"hljs-number\">0</span>) {\n            node[p].ch[x &lt;= node[p].v ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">1</span>] = cur;\n        }\n        node[cur] = Node(x, p, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);\n    }\n    splay(cur);\n}\n</code></pre>\n<h3 id=\"serial\"><a class=\"markdownIt-Anchor\" href=\"#serial\"></a> serial</h3>\n<p><code>serial</code>操作：查询值为x的节点，在<code>find</code>操作的基础上，<code>serial</code>只需要在<code>find</code>过后输出左子树节点数量即可。</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">serial</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span> </span>{\n    find(x);\n    <span class=\"hljs-keyword\">return</span> node[node[root].ch[<span class=\"hljs-number\">0</span>]].size\n}\n</code></pre>\n<h3 id=\"pre\"><a class=\"markdownIt-Anchor\" href=\"#pre\"></a> pre</h3>\n<p>找出值为x的节点的前驱，将节点splay到root后在左子树查找最大值即可。</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">pre</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span> </span>{\n    find(x);\n    <span class=\"hljs-keyword\">if</span>(node[root].v &lt; x) {\n        <span class=\"hljs-keyword\">return</span> root;\n    }\n    <span class=\"hljs-keyword\">int</span> cur = node[root].ch[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-keyword\">while</span>(node[cur].ch[<span class=\"hljs-number\">1</span>] != <span class=\"hljs-number\">0</span>) {\n        cur = node[cur].ch[<span class=\"hljs-number\">1</span>];\n    }\n    <span class=\"hljs-keyword\">return</span> cur;\n}\n</code></pre>\n<h3 id=\"suc\"><a class=\"markdownIt-Anchor\" href=\"#suc\"></a> suc</h3>\n<p>找出值为x的点的后继，与前驱同理。</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">suc</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span> </span>{\n    find(x);\n    <span class=\"hljs-keyword\">if</span>(node[root].v &gt; x) {\n        <span class=\"hljs-keyword\">return</span> root;\n    }\n    <span class=\"hljs-keyword\">int</span> cur = node[root].ch[<span class=\"hljs-number\">1</span>];\n    <span class=\"hljs-keyword\">while</span>(node[cur].ch[<span class=\"hljs-number\">0</span>] != <span class=\"hljs-number\">0</span>) {\n        cur = node[cur].ch[<span class=\"hljs-number\">0</span>];\n    }\n    <span class=\"hljs-keyword\">return</span> cur;\n}\n</code></pre>\n<h3 id=\"remove\"><a class=\"markdownIt-Anchor\" href=\"#remove\"></a> remove</h3>\n<p>删除一个节点。</p>\n<p>删除较为复杂，分四步来完成：</p>\n<ol>\n<li>定义<code>last</code>为节点的前驱，<code>next</code>为节点的后继。</li>\n<li>将<code>last</code>节点splay到<code>root</code>，这时<code>last</code>的左子树皆小于x</li>\n<li>将<code>next</code>节点splay到<code>last</code>的子节右点，此时<code>next</code>的右子树皆大于x</li>\n<li><code>next</code>的左节点<code>rm</code>必然满足 <code>last</code> &lt; rm &lt; <code>next</code>，删除<code>rm</code>即可</li>\n</ol>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">remove</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span> </span>{\n    <span class=\"hljs-keyword\">int</span> last = pre(x), next = suc(x);\n    splay(last);\n    splay(next, last);\n    <span class=\"hljs-keyword\">int</span> rm = node[next].ch[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-keyword\">if</span>(node[rm].cnt &gt; <span class=\"hljs-number\">1</span>) {\n        node[rm].cnt--;\n        splay(rm);\n    } <span class=\"hljs-keyword\">else</span> {\n        node[next].ch[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;\n        pushup(next);\n        pushup(root);\n    }\n}\n</code></pre>\n<h3 id=\"rank\"><a class=\"markdownIt-Anchor\" href=\"#rank\"></a> rank</h3>\n<p>查找排名为k的节点</p>\n<p>用一个指针cur从root开始查找，每次根据左子树大小于k的关系修改cur以及k。</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">rank</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> k)</span> </span>{\n    <span class=\"hljs-keyword\">int</span> cur = root;\n    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-keyword\">if</span>(node[cur].ch[<span class=\"hljs-number\">0</span>] != <span class=\"hljs-number\">0</span> &amp;&amp; k &lt;= node[node[cur].ch[<span class=\"hljs-number\">0</span>]].size) {\n            cur = node[cur].ch[<span class=\"hljs-number\">0</span>];\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(k &gt; node[node[cur].ch[<span class=\"hljs-number\">0</span>]].size + node[cur].cnt) {\n            k -= node[node[cur].ch[<span class=\"hljs-number\">0</span>]].size + node[cur].cnt;\n            cur = node[cur].ch[<span class=\"hljs-number\">1</span>];\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> cur;\n        }\n    }\n}\n</code></pre>\n<h1 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h1>\n<p><a href=\"https://zh.wikipedia.org/zh-hans/%E4%BC%B8%E5%B1%95%E6%A0%91\" target=\"_blank\" rel=\"noopener\">伸展树- 维基百科，自由的百科全书</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=IBY4NtxmGg8\" target=\"_blank\" rel=\"noopener\">Splay Tree Introduction</a></p>\n","tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://keepthethink.github.io/tags/数据结构/"},{"name":"平衡树","slug":"平衡树","permalink":"https://keepthethink.github.io/tags/平衡树/"}]},{"title":"一维数据结构学习笔记","date":"2019-03-15T02:15:00.000Z","path":"archives/1580237458/","text":"一维数据结构学习笔记 链表 链表:按顺序记录元素的线性数据结构。 其中的“顺序”是逻辑上的顺序，不一定是物理存储上的顺序。 链表分为单向与双向两种： 1.单向链表:每个元素只记录了下一个元素的位置。 2.双向链表:每个元素记录了上一个及下一个元素的位置。 代码实现： //用类来定义链表中的每个元素。 class Node { public: int v = 0; Node * next = NULL, * prev = NULL; /*前一个元素或者后一个元素可以不存在，所以必须要使用指针类型。*/ Node(int v = 0, Node * next = NULL, Node * prev = NULL):v(v), next(next), prev(prev) {} }; 链表常用操作:构造链表 通过实例化链表类，创建链表的每个元素并建立元素之间的关系。 代码实现： //构造一个只有头尾两个元素的链表。 Node* head = new Node(); Node* tail = new Node(); head -&gt; next = tail; tile -&gt; prev = head; 链表常用操作:遍历链表 将链表头赋值给临时变量，然后不断寻找下一个元素直到空。 代码实现： Node* i = head; while (i -&gt; next != NULL) { i = i -&gt; next; //需要对链表元素进行的操作 } 链表常用操作:插入元素 找到要插入元素的位置，一般是记录前一个元素。 重新设置插入位置两边的元素和插入元素的关系。 代码实现： //在元素p后面插入元素i i -&gt; next = p -&gt; next; i -&gt; prev = p; if (p -&gt; next != NULL) { p -&gt; next -&gt; prev = i; } p -&gt; next = i; 注意: 1.修改关系的顺序. 2.特判插入链表头的情况。 链表常用操作:删除元素 首先，找到要删除的元素。 重新设置该元素的前后元素之间的关系，并根据需要释放元素。 代码实现： if (i -&gt; next != NULL) { i -&gt; next -&gt; prev = i -&gt; prev; } if (i -&gt; prev != NULL) { i -&gt; prev -&gt; next = i -&gt; next; } delete i; 注意: 如果有变量用来记录链表头，头被删除时要记得更新。 链表尾同理。 链表 Q&amp;A Q： 单向链表可以进行删除元素操作吗? A： 可以。通过预判下一个元素的方式，找到要删除元素的上一个元素，再更新下一个元素。 if (pr -&gt; next != NULL) { pr -&gt; next = pr -&gt; next -&gt; next; } 当然，还是要特判删除链表头的情况。 Q： 还有别的方式可以用来实现链表吗? A： 通常情况下，使用数组来实现链表会更加简便。 给每个元素一个编号(地址)，以代替指针的引用。 为了记录每个元素的属性，可以使用结构体、二维数组或者多个数组。 Q： 用数组实现链表有哪些缺点? A： 1.数组必须一次性初始化，并且长度固定。2.删除元素不会真正的释放空间。 队列 从严格意义上来说，队列是一种特殊的链表，只支持添加队列尾元素和删除队列头元素两种操作。 或者说，队列是链表的子集。 队列常用操作:从队列尾部添加元素 创建一个新元素，将队尾元素的下一个元素指向新元素。 将队尾移动到新元素。 代码实现： Node* newTail = new Node(); tail -&gt; next = newTail; tail = newTail; 队列常用操作:从队列头部删除元素 记录队头元素。 将队头元素移动到它的下一个元素。根据需要释放旧的队头元素。 代码实现： Node* oldHead = head; head = head -&gt; next; oldHead -&gt; next = NULL; 注意： 还要特判队列为空的情况。 数组:一种特殊的队列 用两个整数表示数组的下标，作为队头和队尾的指针。 删除元素则将队头指针+1，添加元素则将队尾指针+1。 队头指针超过的队尾指针表示队列为空。 循环队列:循环重复利用被删除空间的数组队列 移动指针后如果超出了数组长度，则重置为0。 当尾指针追赶上头指针时，表示队列溢出。 定义： const int LENGTH = 100; Node* queue[LENGTH]; int head = 0, tile = 0; 添加元素： bool push(Node* t) { if(head != (tail + 2)) { // 判断满。 tail = (tail + 1) % LENGTH; queue[tail] = t; return true; } else { return false; } } 删除元素： Node* pop() { if (head != (tail + 1)) { // 判断空。 Node* h = queue[head]; head = (head + 1) % LENGTH; return h; } else { return NULL; } } 队列 Q&amp;A Q： 队列是单向链表还是双向链表? A： 使用单向链表足以支持队列的操作。 Q： 如果是双向队列，需要额外增加哪些操作? A： 添加时要设置新元素的前一个元素，删除时要清空新队头的前一个元素。 Q： 数组队列有哪些优点与缺点? A： 优点：队列不需要删除中间元素，数组完全满足队列的操作要求。 缺点：删除掉的空间无法被重复利用。 Q： 如何区分循环队列是满还是空? A： 有两种方案： 1.用一个额外的变量记录队列的元素个数。 2.将实际队列的容量变为数组长度-1，让队列空和满时的队尾指针在不同的位置。 本文代码采用的是第二种方案 栈 从严格意义上来说栈是一种特殊的链表，只支持添加栈尾元素和删除栈尾元素两种操作。 或者说，栈是链表的子集。 栈常用操作:从栈尾部添加元素 1.创建一个新元素。 2.将新元素的上一个元素指向栈尾元素。 3.将栈尾移动到新元素。 Node* newTail = new Node(); newTail -&gt; prev = tail; tail = newTail; 注意：还要特判栈为空的情况。 栈常用操作:从栈尾部删除元素 1.记录栈尾元素。 2.将栈尾元素移动到它的上一个元素。 3.将旧栈尾元素的上一个元素置空。根据需要释放旧的栈尾元素。 Node* oldTail = tail; tail = tail -&gt; prev; oldTail -&gt; prev = NULL; 注意：还要特判栈为空的情况。 数组:一种特殊的栈 用一个整数表示数组的下标，作为栈尾的指针。 添加元素则将栈尾指针+1，删除元素则将栈尾指针-1。 栈尾指针小于栈头元素的下标则表示栈为空。","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"一维数据结构学习笔记\"><a class=\"markdownIt-Anchor\" href=\"#一维数据结构学习笔记\"></a> 一维数据结构学习笔记</h1>\n<h2 id=\"链表\"><a class=\"markdownIt-Anchor\" href=\"#链表\"></a> 链表</h2>\n<p>链表:按顺序记录元素的线性数据结构。</p>\n<p>其中的“顺序”是逻辑上的顺序，不一定是物理存储上的顺序。</p>\n<p>链表分为单向与双向两种：</p>\n<p>1.单向链表:每个元素只记录了下一个元素的位置。</p>\n<p>2.双向链表:每个元素记录了上一个及下一个元素的位置。</p>\n<p>代码实现：</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-comment\">//用类来定义链表中的每个元素。</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span> {</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-keyword\">int</span> v = <span class=\"hljs-number\">0</span>;\n    Node * next = <span class=\"hljs-literal\">NULL</span>, * prev = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-comment\">/*前一个元素或者后一个元素可以不存在，所以必须要使用指针类型。*/</span>\n    \n    Node(<span class=\"hljs-keyword\">int</span> v = <span class=\"hljs-number\">0</span>, Node * next = <span class=\"hljs-literal\">NULL</span>, Node * prev = <span class=\"hljs-literal\">NULL</span>):v(v), next(next), prev(prev) {}\n};\n</code></pre>\n<h3 id=\"链表常用操作构造链表\"><a class=\"markdownIt-Anchor\" href=\"#链表常用操作构造链表\"></a> 链表常用操作:构造链表</h3>\n<p>通过实例化链表类，创建链表的每个元素并建立元素之间的关系。</p>\n<p>代码实现：</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-comment\">//构造一个只有头尾两个元素的链表。</span>\nNode* head = <span class=\"hljs-keyword\">new</span> Node(); \nNode* tail = <span class=\"hljs-keyword\">new</span> Node(); \n\nhead -&gt; next = tail;\ntile -&gt; prev = head;\n</code></pre>\n<h3 id=\"链表常用操作遍历链表\"><a class=\"markdownIt-Anchor\" href=\"#链表常用操作遍历链表\"></a> 链表常用操作:遍历链表</h3>\n<p>将链表头赋值给临时变量，然后不断寻找下一个元素直到空。</p>\n<p>代码实现：</p>\n<pre class=\"highlight\"><code class=\"cpp\">Node* i = head;\n<span class=\"hljs-keyword\">while</span> (i -&gt; next != <span class=\"hljs-literal\">NULL</span>) {\n    i = i -&gt; next;\n    <span class=\"hljs-comment\">//需要对链表元素进行的操作</span>\n}\n</code></pre>\n<h3 id=\"链表常用操作插入元素\"><a class=\"markdownIt-Anchor\" href=\"#链表常用操作插入元素\"></a> 链表常用操作:插入元素</h3>\n<p>找到要插入元素的位置，一般是记录前一个元素。<br>\n重新设置插入位置两边的元素和插入元素的关系。</p>\n<p>代码实现：</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-comment\">//在元素p后面插入元素i</span>\ni -&gt; next = p -&gt; next;\ni -&gt; prev = p;\n<span class=\"hljs-keyword\">if</span> (p -&gt; next != <span class=\"hljs-literal\">NULL</span>) {\n    p -&gt; next -&gt; prev = i;\n}\np -&gt; next = i;\n</code></pre>\n<p>注意:</p>\n<blockquote>\n<p>1.修改关系的顺序.</p>\n<p>2.特判插入链表头的情况。</p>\n</blockquote>\n<h3 id=\"链表常用操作删除元素\"><a class=\"markdownIt-Anchor\" href=\"#链表常用操作删除元素\"></a> 链表常用操作:删除元素</h3>\n<p>首先，找到要删除的元素。</p>\n<p>重新设置该元素的前后元素之间的关系，并根据需要释放元素。<br>\n代码实现：</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-keyword\">if</span> (i -&gt; next != <span class=\"hljs-literal\">NULL</span>) {\n    i -&gt; next -&gt; prev = i -&gt; prev;\n}\n<span class=\"hljs-keyword\">if</span> (i -&gt; prev != <span class=\"hljs-literal\">NULL</span>) {\n    i -&gt; prev -&gt; next = i -&gt; next;\n}\n<span class=\"hljs-keyword\">delete</span> i;\n</code></pre>\n<p>注意:</p>\n<blockquote>\n<p>如果有变量用来记录链表头，头被删除时要记得更新。</p>\n<p>链表尾同理。</p>\n</blockquote>\n<h3 id=\"链表-qa\"><a class=\"markdownIt-Anchor\" href=\"#链表-qa\"></a> 链表 Q&amp;A</h3>\n<p><strong>Q：</strong> 单向链表可以进行删除元素操作吗?</p>\n<p><strong>A：</strong> 可以。通过预判下一个元素的方式，找到要删除元素的上一个元素，再更新下一个元素。</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-keyword\">if</span> (pr -&gt; next != <span class=\"hljs-literal\">NULL</span>) {\n    pr -&gt; next = pr -&gt; next -&gt; next;\n}\n</code></pre>\n<p>当然，还是要特判删除链表头的情况。</p>\n<p><strong>Q：</strong> 还有别的方式可以用来实现链表吗?</p>\n<p><strong>A：</strong> 通常情况下，使用数组来实现链表会更加简便。</p>\n<p>给每个元素一个编号(地址)，以代替指针的引用。</p>\n<p>为了记录每个元素的属性，可以使用结构体、二维数组或者多个数组。</p>\n<p><strong>Q：</strong> 用数组实现链表有哪些缺点?</p>\n<p><strong>A：</strong> 1.数组必须一次性初始化，并且长度固定。2.删除元素不会真正的释放空间。</p>\n<h2 id=\"队列\"><a class=\"markdownIt-Anchor\" href=\"#队列\"></a> 队列</h2>\n<p>从严格意义上来说，队列是一种特殊的链表，只支持添加队列尾元素和删除队列头元素两种操作。</p>\n<p>或者说，队列是链表的子集。</p>\n<h3 id=\"队列常用操作从队列尾部添加元素\"><a class=\"markdownIt-Anchor\" href=\"#队列常用操作从队列尾部添加元素\"></a> 队列常用操作:从队列尾部添加元素</h3>\n<p>创建一个新元素，将队尾元素的下一个元素指向新元素。</p>\n<p>将队尾移动到新元素。</p>\n<p>代码实现：</p>\n<pre class=\"highlight\"><code class=\"cpp\">Node* newTail = <span class=\"hljs-keyword\">new</span> Node();\ntail -&gt; next = newTail;\ntail = newTail;\n</code></pre>\n<h3 id=\"队列常用操作从队列头部删除元素\"><a class=\"markdownIt-Anchor\" href=\"#队列常用操作从队列头部删除元素\"></a> 队列常用操作:从队列头部删除元素</h3>\n<p>记录队头元素。</p>\n<p>将队头元素移动到它的下一个元素。根据需要释放旧的队头元素。</p>\n<p>代码实现：</p>\n<pre class=\"highlight\"><code class=\"cpp\">Node* oldHead = head;\nhead = head -&gt; next;\noldHead -&gt; next = <span class=\"hljs-literal\">NULL</span>;\n</code></pre>\n<p>注意：</p>\n<blockquote>\n<p>还要特判队列为空的情况。</p>\n</blockquote>\n<h3 id=\"数组一种特殊的队列\"><a class=\"markdownIt-Anchor\" href=\"#数组一种特殊的队列\"></a> 数组:一种特殊的队列</h3>\n<p>用两个整数表示数组的下标，作为队头和队尾的指针。</p>\n<p>删除元素则将队头指针+1，添加元素则将队尾指针+1。</p>\n<p>队头指针超过的队尾指针表示队列为空。</p>\n<h3 id=\"循环队列循环重复利用被删除空间的数组队列\"><a class=\"markdownIt-Anchor\" href=\"#循环队列循环重复利用被删除空间的数组队列\"></a> 循环队列:循环重复利用被删除空间的数组队列</h3>\n<p>移动指针后如果超出了数组长度，则重置为0。</p>\n<p>当尾指针追赶上头指针时，表示队列溢出。</p>\n<p>定义：</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> LENGTH = <span class=\"hljs-number\">100</span>;\nNode* <span class=\"hljs-built_in\">queue</span>[LENGTH];\n<span class=\"hljs-keyword\">int</span> head = <span class=\"hljs-number\">0</span>, tile = <span class=\"hljs-number\">0</span>;\n</code></pre>\n<p>添加元素：</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">push</span><span class=\"hljs-params\">(Node* t)</span> </span>{\n    <span class=\"hljs-keyword\">if</span>(head != (tail + <span class=\"hljs-number\">2</span>)) { <span class=\"hljs-comment\">// 判断满。 </span>\n        tail = (tail + <span class=\"hljs-number\">1</span>) % LENGTH; \n        <span class=\"hljs-built_in\">queue</span>[tail] = t;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n}\n</code></pre>\n<p>删除元素：</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-function\">Node* <span class=\"hljs-title\">pop</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (head != (tail + <span class=\"hljs-number\">1</span>)) { <span class=\"hljs-comment\">// 判断空。 </span>\n        Node* h = <span class=\"hljs-built_in\">queue</span>[head];\n        head = (head + <span class=\"hljs-number\">1</span>) % LENGTH;\n        <span class=\"hljs-keyword\">return</span> h;\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;\n    }\n}\n</code></pre>\n<h3 id=\"队列-qa\"><a class=\"markdownIt-Anchor\" href=\"#队列-qa\"></a> 队列 Q&amp;A</h3>\n<p><strong>Q：</strong> 队列是单向链表还是双向链表?</p>\n<p><strong>A：</strong> 使用单向链表足以支持队列的操作。</p>\n<p><strong>Q：</strong> 如果是双向队列，需要额外增加哪些操作?</p>\n<p><strong>A：</strong> 添加时要设置新元素的前一个元素，删除时要清空新队头的前一个元素。</p>\n<p><strong>Q：</strong> 数组队列有哪些优点与缺点?</p>\n<p><strong>A：</strong> 优点：队列不需要删除中间元素，数组完全满足队列的操作要求。</p>\n<p>缺点：删除掉的空间无法被重复利用。</p>\n<p><strong>Q：</strong> 如何区分循环队列是满还是空?</p>\n<p><strong>A：</strong> 有两种方案：</p>\n<blockquote>\n<p>1.用一个额外的变量记录队列的元素个数。</p>\n<p>2.将实际队列的容量变为数组长度-1，让队列空和满时的队尾指针在不同的位置。</p>\n</blockquote>\n<p>本文代码采用的是第二种方案</p>\n<h2 id=\"栈\"><a class=\"markdownIt-Anchor\" href=\"#栈\"></a> 栈</h2>\n<p>从严格意义上来说栈是一种特殊的链表，只支持添加栈尾元素和删除栈尾元素两种操作。</p>\n<p>或者说，栈是链表的子集。</p>\n<h3 id=\"栈常用操作从栈尾部添加元素\"><a class=\"markdownIt-Anchor\" href=\"#栈常用操作从栈尾部添加元素\"></a> 栈常用操作:从栈尾部添加元素</h3>\n<p>1.创建一个新元素。<br>\n2.将新元素的上一个元素指向栈尾元素。<br>\n3.将栈尾移动到新元素。</p>\n<pre class=\"highlight\"><code class=\"cpp\">Node* newTail = <span class=\"hljs-keyword\">new</span> Node();\nnewTail -&gt; prev = tail;\ntail = newTail;\n</code></pre>\n<p>注意：还要特判栈为空的情况。</p>\n<h3 id=\"栈常用操作从栈尾部删除元素\"><a class=\"markdownIt-Anchor\" href=\"#栈常用操作从栈尾部删除元素\"></a> 栈常用操作:从栈尾部删除元素</h3>\n<p>1.记录栈尾元素。<br>\n2.将栈尾元素移动到它的上一个元素。<br>\n3.将旧栈尾元素的上一个元素置空。根据需要释放旧的栈尾元素。</p>\n<pre class=\"highlight\"><code class=\"cpp\">Node* oldTail = tail;\ntail = tail -&gt; prev;\noldTail -&gt; prev = <span class=\"hljs-literal\">NULL</span>;\n</code></pre>\n<p>注意：还要特判栈为空的情况。</p>\n<h3 id=\"数组一种特殊的栈\"><a class=\"markdownIt-Anchor\" href=\"#数组一种特殊的栈\"></a> 数组:一种特殊的栈</h3>\n<p>用一个整数表示数组的下标，作为栈尾的指针。</p>\n<p>添加元素则将栈尾指针+1，删除元素则将栈尾指针-1。</p>\n<p>栈尾指针小于栈头元素的下标则表示栈为空。</p>\n","tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://keepthethink.github.io/tags/数据结构/"}]},{"title":"洛谷题解P1119【灾后重建】","date":"2019-03-09T11:19:00.000Z","path":"archives/1827780785/","text":"题目背景 BBB地区在地震过后，所有村庄都造成了一定的损毁，而这场地震却没对公路造成什么影响。但是在村庄重建好之前，所有与未重建完成的村庄的公路均无法通车。换句话说，只有连接着两个重建完成的村庄的公路才能通车，只能到达重建完成的村庄。 题目描述 给出BBB地区的村庄数NNN，村庄编号从000到N−1N-1N−1，和所有MMM条公路的长度，公路是双向的。并给出第iii个村庄重建完成的时间tit_iti​，你可以认为是同时开始重建并在第tit_iti​天重建完成，并且在当天即可通车。若tit_iti​为000则说明地震未对此地区造成损坏，一开始就可以通车。之后有QQQ个询问(x,y,t)(x, y, t)(x,y,t)，对于每个询问你要回答在第ttt天，从村庄xxx到村庄yyy的最短路径长度为多少。如果无法找到从xxx村庄到yyy村庄的路径，经过若干个已重建完成的村庄，或者村庄xxx或村庄yyy在第ttt天仍未重建完成 ，则需要返回−1-1−1。 输入输出格式 输入格式： 第一行包含两个正整数N,MN,MN,M，表示了村庄的数目与公路的数量。 第二行包含NNN个非负整数t0,t1,…,tN−1t_0, t_1,…, t_{N-1}t0​,t1​,…,tN−1​​，表示了每个村庄重建完成的时间，数据保证了t0≤t1≤…≤tN−1​t_0 ≤ t_1 ≤ … ≤ t_{N-1}​t0​≤t1​≤…≤tN−1​​。 接下来MMM行，每行333个非负整数i,j,wi, j, wi,j,w，www为不超过100001000010000的正整数，表示了有一条连接村庄iii与村庄jjj的道路，长度为www，保证i≠ji≠ji​=j，且对于任意一对村庄只会存在一条道路。 接下来一行也就是M+3M+3M+3行包含一个正整数QQQ，表示QQQ个询问。 接下来QQQ行，每行333个非负整数x,y,tx, y, tx,y,t，询问在第ttt天，从村庄xxx到村庄yyy的最短路径长度为多少，数据保证了ttt是不下降的。 输出格式： 共QQQ行，对每一个询问(x,y,t)(x, y, t)(x,y,t)输出对应的答案，即在第ttt天，从村庄xxx到村庄yyy的最短路径长度为多少。如果在第ttt天无法找到从xxx村庄到yyy村庄的路径，经过若干个已重建完成的村庄，或者村庄xxx或村庄yyy在第ttt天仍未修复完成，则输出−1-1−1。 输入输出样例 输入样例#1： 4 5 1 2 3 4 0 2 1 2 3 1 3 1 2 2 1 4 0 3 5 4 2 0 2 0 1 2 0 1 3 0 1 4 输出样例#1： -1 -1 5 4 说明 对于30%30\\%30%的数据，有N≤50N≤50N≤50； 对于30%30\\%30%的数据，有ti=0t_i= 0ti​=0，其中有20%20%的数据有ti=0t_i = 0ti​=0且N&gt;50N&gt;50N&gt;50； 对于50%50\\%50%的数据，有Q≤100Q≤100Q≤100； 对于100%100\\%100%的数据，有N≤200N≤200N≤200，M≤N×(N−1)/2M≤N \\times (N-1)/2M≤N×(N−1)/2，Q≤50000Q≤50000Q≤50000，所有输入数据涉及整数均不超过100000100000100000。 说明 本题基本上是Floyd的模版题，适合初学Floyd的OIer练习。 本题的重点在于并非在每一个时刻，每一个节点都可以到达，所以应枚举目前所有可以到达的节点k，并以k为中转点进行更新。 同时，因为出题人已经给数据排好了顺序，发现未建成时直接中断即可。 闲话少说，主要看代码注释。 #代码 #include&lt;cstdio&gt; #include&lt;algorithm&gt; using namespace std; const int MAXN = 200 + 5; const int INF = 1e9; int edge[MAXN][MAXN], times[MAXN]; int n, m, q; /* init()函数： Floyd初始化 */ void init() { for(int i = 0; i &lt; n; i++) { for(int j = 0; j &lt; n; j++) { edge[i][j] = (i == j ? 0 : INF);//节点到自身的距离为0 } } } /* addEdge()函数： 在邻接矩阵中添加一条（双向）边 */ void addEdge(int i, int j, int v) { edge[i][j] = edge[j][i] = v;//双向边处理 } /* input()函数： 输入数据 */ void input() { scanf(\"%d%d\", &amp;n, &amp;m); init(); //读入n, m后进行初始化 for(int i = 0; i &lt; n; i++) { scanf(\"%d\", &amp;times[i]); } for(int i = 0; i &lt; m; i++) { int x, y, v; scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;v); addEdge(x, y, v); } } /* update()函数： 以k为中转点更新最短路 */ void update(int k) { for(int i = 0; i &lt; n; i++) { for(int j = 0; j &lt; n; j++) { edge[i][j] = min(edge[i][j], edge[i][k] + edge[k][j]); } } } void work() { int cur = 0; scanf(\"%d\", &amp;q); for(int i = 0; i &lt; q; i++) { int x, y, t; scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;t); //这里是重点 while(times[cur] &lt;= t &amp;&amp; cur &lt; n) { update(cur);//若当前可以经过村庄cur，以cur为中转点更新最短路径 cur++; } if(times[x] &gt; t || times[y] &gt; t || edge[x][y] == INF) { printf(\"-1\\n\");//村庄x尚未建成,村庄x尚未建成或村庄x与村庄y在t时并不连通 } else { printf(\"%d\\n\", edge[x][y]); } } } int main() { //简洁的main()函数 input(); work(); return 0; }","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"题目背景\"><a class=\"markdownIt-Anchor\" href=\"#题目背景\"></a> 题目背景</h1>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>地区在地震过后，所有村庄都造成了一定的损毁，而这场地震却没对公路造成什么影响。但是在村庄重建好之前，所有与未重建完成的村庄的公路均无法通车。换句话说，只有连接着两个重建完成的村庄的公路才能通车，只能到达重建完成的村庄。</p>\n<h1 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\"></a> 题目描述</h1>\n<p>给出<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>地区的村庄数<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span>，村庄编号从<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">N-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，和所有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span>条公路的长度，公路是双向的。并给出第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>个村庄重建完成的时间<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">t_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，你可以认为是同时开始重建并在第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">t_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>天重建完成，并且在当天即可通车。若<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">t_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>则说明地震未对此地区造成损坏，一开始就可以通车。之后有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">Q</span></span></span></span>个询问<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x, y, t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span>，对于每个询问你要回答在第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span></span></span></span>天，从村庄<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>到村庄<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span>的最短路径长度为多少。如果无法找到从<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>村庄到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span>村庄的路径，经过若干个已重建完成的村庄，或者村庄<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>或村庄<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span>在第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span></span></span></span>天仍未重建完成 ，则需要返回<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>。</p>\n<h1 id=\"输入输出格式\"><a class=\"markdownIt-Anchor\" href=\"#输入输出格式\"></a> 输入输出格式</h1>\n<h2 id=\"输入格式\"><a class=\"markdownIt-Anchor\" href=\"#输入格式\"></a> 输入格式：</h2>\n<p>第一行包含两个正整数<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi><mo separator=\"true\">,</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">N,M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span>，表示了村庄的数目与公路的数量。</p>\n<p>第二行包含<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span>个非负整数<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>t</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>t</mi><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">t_0, t_1,…, t_{N-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8234109999999999em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.328331em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10903em;\">N</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span>​，表示了每个村庄重建完成的时间，数据保证了<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mn>0</mn></msub><mo>≤</mo><msub><mi>t</mi><mn>1</mn></msub><mo>≤</mo><mo>…</mo><mo>≤</mo><msub><mi>t</mi><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></msub><mi mathvariant=\"normal\">​</mi></mrow><annotation encoding=\"application/x-tex\">t_0 ≤ t_1 ≤ … ≤ t_{N-1}​</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7859700000000001em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7859700000000001em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8234109999999999em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.328331em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10903em;\">N</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mord\">​</span></span></span></span>。</p>\n<p>接下来<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span>行，每行<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>个非负整数<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo separator=\"true\">,</mo><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">i, j, w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02691em;\">w</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02691em;\">w</span></span></span></span>为不超过<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>10000</mn></mrow><annotation encoding=\"application/x-tex\">10000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>的正整数，表示了有一条连接村庄<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>与村庄<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span></span></span></span>的道路，长度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02691em;\">w</span></span></span></span>，保证<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi mathvariant=\"normal\">≠</mi><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">i≠j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span></span></span></span>，且对于任意一对村庄只会存在一条道路。</p>\n<p>接下来一行也就是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi><mo>+</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">M+3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>行包含一个正整数<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">Q</span></span></span></span>，表示<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">Q</span></span></span></span>个询问。</p>\n<p>接下来<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">Q</span></span></span></span>行，每行<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>个非负整数<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">x, y, t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80952em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">t</span></span></span></span>，询问在第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span></span></span></span>天，从村庄<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>到村庄<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span>的最短路径长度为多少，数据保证了<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span></span></span></span>是不下降的。</p>\n<h2 id=\"输出格式\"><a class=\"markdownIt-Anchor\" href=\"#输出格式\"></a> 输出格式：</h2>\n<p>共<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">Q</span></span></span></span>行，对每一个询问<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x, y, t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span>输出对应的答案，即在第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span></span></span></span>天，从村庄<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>到村庄<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span>的最短路径长度为多少。如果在第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span></span></span></span>天无法找到从<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>村庄到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span>村庄的路径，经过若干个已重建完成的村庄，或者村庄<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>或村庄<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span>在第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span></span></span></span>天仍未修复完成，则输出<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>。</p>\n<h1 id=\"输入输出样例\"><a class=\"markdownIt-Anchor\" href=\"#输入输出样例\"></a> 输入输出样例</h1>\n<h2 id=\"输入样例1\"><a class=\"markdownIt-Anchor\" href=\"#输入样例1\"></a> 输入样例#1：</h2>\n<p>4 5<br>\n1 2 3 4<br>\n0 2 1<br>\n2 3 1<br>\n3 1 2<br>\n2 1 4<br>\n0 3 5<br>\n4<br>\n2 0 2<br>\n0 1 2<br>\n0 1 3<br>\n0 1 4</p>\n<h2 id=\"输出样例1\"><a class=\"markdownIt-Anchor\" href=\"#输出样例1\"></a> 输出样例#1：</h2>\n<p>-1<br>\n-1<br>\n5<br>\n4</p>\n<h1 id=\"说明\"><a class=\"markdownIt-Anchor\" href=\"#说明\"></a> 说明</h1>\n<p>对于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>30</mn><mi mathvariant=\"normal\">%</mi></mrow><annotation encoding=\"application/x-tex\">30\\%</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">3</span><span class=\"mord\">0</span><span class=\"mord\">%</span></span></span></span>的数据，有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi><mo>≤</mo><mn>50</mn></mrow><annotation encoding=\"application/x-tex\">N≤50</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mord\">0</span></span></span></span>；</p>\n<p>对于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>30</mn><mi mathvariant=\"normal\">%</mi></mrow><annotation encoding=\"application/x-tex\">30\\%</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">3</span><span class=\"mord\">0</span><span class=\"mord\">%</span></span></span></span>的数据，有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>i</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">t_i= 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>，其中有20%20%的数据有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>i</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">t_i = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>且<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi><mo>&gt;</mo><mn>50</mn></mrow><annotation encoding=\"application/x-tex\">N&gt;50</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mord\">0</span></span></span></span>；</p>\n<p>对于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>50</mn><mi mathvariant=\"normal\">%</mi></mrow><annotation encoding=\"application/x-tex\">50\\%</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">5</span><span class=\"mord\">0</span><span class=\"mord\">%</span></span></span></span>的数据，有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>Q</mi><mo>≤</mo><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">Q≤100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">Q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>；</p>\n<p>对于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>100</mn><mi mathvariant=\"normal\">%</mi></mrow><annotation encoding=\"application/x-tex\">100\\%</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">%</span></span></span></span>的数据，有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi><mo>≤</mo><mn>200</mn></mrow><annotation encoding=\"application/x-tex\">N≤200</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi><mo>≤</mo><mi>N</mi><mo>×</mo><mo stretchy=\"false\">(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">M≤N \\times (N-1)/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord\">2</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>Q</mi><mo>≤</mo><mn>50000</mn></mrow><annotation encoding=\"application/x-tex\">Q≤50000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">Q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>，所有输入数据涉及整数均不超过<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>100000</mn></mrow><annotation encoding=\"application/x-tex\">100000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>。</p>\n<h1 id=\"说明-2\"><a class=\"markdownIt-Anchor\" href=\"#说明-2\"></a> 说明</h1>\n<p>本题基本上是Floyd的模版题，适合初学Floyd的OIer练习。</p>\n<p>本题的重点在于并非在每一个时刻，每一个节点都可以到达，所以应枚举目前所有可以到达的节点k，并以k为中转点进行更新。</p>\n<p>同时，因为出题人已经给数据排好了顺序，发现未建成时直接中断即可。</p>\n<p>闲话少说，主要看代码注释。</p>\n<p>#代码</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;cstdio&gt; </span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;algorithm&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> MAXN = <span class=\"hljs-number\">200</span> + <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> INF = <span class=\"hljs-number\">1e9</span>;\n\n<span class=\"hljs-keyword\">int</span> edge[MAXN][MAXN], times[MAXN];\n<span class=\"hljs-keyword\">int</span> n, m, q;\n\n<span class=\"hljs-comment\">/*\ninit()函数：\nFloyd初始化\n*/</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span> </span>{\n\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) {\n\t\t\tedge[i][j] = (i == j ? <span class=\"hljs-number\">0</span> : INF);<span class=\"hljs-comment\">//节点到自身的距离为0</span>\n\t\t}\n\t}\n}\n\n<span class=\"hljs-comment\">/*\naddEdge()函数：\n在邻接矩阵中添加一条（双向）边\n*/</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i, <span class=\"hljs-keyword\">int</span> j, <span class=\"hljs-keyword\">int</span> v)</span> </span>{\n\tedge[i][j] = edge[j][i] = v;<span class=\"hljs-comment\">//双向边处理</span>\n}\n\n<span class=\"hljs-comment\">/*\ninput()函数：\n输入数据\n*/</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">input</span><span class=\"hljs-params\">()</span> </span>{\n\t<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d%d\"</span>, &amp;n, &amp;m);\n\tinit(); <span class=\"hljs-comment\">//读入n, m后进行初始化</span>\n\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n\t\t<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>, &amp;times[i]);\n\t}\n\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i++) {\n\t\t<span class=\"hljs-keyword\">int</span> x, y, v;\n\t\t\n\t\t<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d%d%d\"</span>, &amp;x, &amp;y, &amp;v);\n\t\taddEdge(x, y, v);\n\t}\n}\n\n<span class=\"hljs-comment\">/*\nupdate()函数：\n以k为中转点更新最短路\n*/</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">update</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> k)</span> </span>{\n\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) {\n\t\t\tedge[i][j] = min(edge[i][j], edge[i][k] + edge[k][j]);\n\t\t}\n\t}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">work</span><span class=\"hljs-params\">()</span> </span>{\n\t<span class=\"hljs-keyword\">int</span> cur = <span class=\"hljs-number\">0</span>;\n\t\n\t<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>, &amp;q);\n\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; q; i++) {\n\t\t<span class=\"hljs-keyword\">int</span> x, y, t;\n\t\t\n\t\t<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d%d%d\"</span>, &amp;x, &amp;y, &amp;t);\n        \n\t\t<span class=\"hljs-comment\">//这里是重点</span>\n\t\t<span class=\"hljs-keyword\">while</span>(times[cur] &lt;= t &amp;&amp; cur &lt; n) {\n\t\t\tupdate(cur);<span class=\"hljs-comment\">//若当前可以经过村庄cur，以cur为中转点更新最短路径</span>\n                        cur++;\n\t\t}\n\t\t<span class=\"hljs-keyword\">if</span>(times[x] &gt; t || times[y] &gt; t || edge[x][y] == INF) {\n\t\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"-1\\n\"</span>);<span class=\"hljs-comment\">//村庄x尚未建成,村庄x尚未建成或村庄x与村庄y在t时并不连通</span>\n\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\\n\"</span>, edge[x][y]);\n\t\t}\n\t}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{ <span class=\"hljs-comment\">//简洁的main()函数</span>\n\tinput();\n\twork();\n    \n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n","tags":[{"name":"洛谷","slug":"洛谷","permalink":"https://keepthethink.github.io/tags/洛谷/"},{"name":"题解","slug":"题解","permalink":"https://keepthethink.github.io/tags/题解/"}]},{"title":"NOIP2018游记","date":"2019-03-08T14:39:00.000Z","path":"archives/3769932704/","text":"出师 （1） 起床看见洛谷首页上显示的“距NOIP2018还有-1天”时，差点把嘴里的一口早饭喷了出来。 不过又想一下，要是一大早看见个“距NOIP2019还有365天”，估计瞬间会感觉压力山大。。。 (2) 进考场前竟然下起了倾盆大雨，从地铁站出来后，举着伞转了一个小时才找到考场，期间不停的被地图坑。 （我才不会告诉你浪费这么多时间的真正原因是使用迭代加深搜索找考场。） 进了考场发现有惊喜。。。机房竟然有网！有网！~~结果在考试前网断了。。。~~然后开始调整编辑器，以至于没注意到别人都开始打代码了。。。 第一题，水题，鉴定完毕。 分析：可能连模拟都算不上，直接从头到尾扫描一遍即可。 但虽说是水题，也有一些坑点： 读入要用 string + cin + getline()! 读入要用 string + cin + getline()! 读入要用 string + cin + getline()! 重要的事情说三遍！ @垃圾一个 就是在这一点上炸了。 判断时要自编函数或alnum，不能用ctype.h中的isprint()函数，要用isalnum()函数。 如果你问&quot;isprint()函数是什么&quot;或&quot;isalnum()函数是什么&quot;,请自行忽略这段话并自觉编写判断函数。 别问我为什么，Luogu自测只有20分。 代码： #include&lt;iostream&gt; #include&lt;string&gt; using namespace std; bool check(char c) { if('0' &lt;= c &amp;&amp; c &lt;= '9') { return true; } if('a' &lt;= c &amp;&amp; c &lt;= 'z') { return true; } if('A' &lt;= c &amp;&amp; c &lt;= 'Z') { return true; } return false; } int main() { string s; getline(cin, s); int len = s.length(); int ans = 0; for(int i = 0; i &lt; len; i++) { if(check(s[i])) { ans++; } } cout &lt;&lt; ans &lt;&lt; endl; return 0; } 第二题，暴力枚举，鉴定完毕。 分析： 先计算好每一个军营的气势，同时累加双方的气势总和（输入后处理） 枚举每一个军营，检查若将工兵放在此位置是否可减少双方差距，并更新最小值与位置。 输出位置 写第一遍时大概思路就酱。 运行结果： 样例#1:Pass 样例#1:Pass 样例#3: Beng! 又看了一下数据范围，对于 100% 的数据，n ≤ 10 ^ 5,ci,s1,s2≤10^9。 10^9? “十年OI一场空，没开long long 见祖宗”，这话果然没错。 除int main()外的所有int皆换成long long，OK。 PS:如 #define int long long signed main() { //some code return 0; } 之类的旁门左道，为了安全起见，大家不要滥用哦QwQ。有本事你写个typedef int long long看报不报错 第三题。。。 我这种小蒟蒻怎么可能作对前三题呢QwQ,又怎么可能想到DP正解QwQ 所以我挥手打了贪心。。。当我发现第三个样例没过时已经来不及了 先说说贪心具体思路： 将学生按照到达时间从小到大排个序 用一个光标变量记录目前接到了第几个学生，如果还有人没被接到，就继续循环知道所有人都被接到为止。 每次循环时检查当前这个人是否值得带，若值得则将光标后移。 每次循环后将时间加上开车所需要的时间。 最后累加总等待时间并输出。 答案正确率：玄学 到各大网站上测之，30分有之，80分有之，一切随缘。 第四题本蒟蒻骗了分，没脸来这胡说了。。。 总结 咳咳咳。。。 (1)考试策略的应用 亏得我这只小蒟蒻还在进考场前看了1h AK NOI 的各位dalao 呕心沥血写的各种考场策略，结果一进考场简直就像接受了A级记忆删除，什么都忘得一干二净： 一，二题打完过了样例就去打第三题。（double-plus-scared） 第三题贪心死活过不了第三个点还执迷不悟认为就是贪心。 第四题明明有子任务放着不做打随机数。 (2)考场心态的调整 众所周知，在NOIP考场这种地方要想保持心态稳定是不可能的。然而如果吓得完全写不出代码就凉凉了。总结就是一定要冷静冷静冷静再冷静，一定不要像某人一样，贪心错了都想不到半个动规。 最后，祝大家： while(NOIP2019.rp &lt; NOIP2019.rp + 1) { NOIP2019.rp++; }","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"出师\"><a class=\"markdownIt-Anchor\" href=\"#出师\"></a> 出师</h1>\n<p>（1）</p>\n<p>起床看见洛谷首页上显示的“距NOIP2018还有-1天”时，差点把嘴里的一口早饭喷了出来。</p>\n<p>不过又想一下，要是一大早看见个“距NOIP2019还有365天”，估计瞬间会感觉压力山大。。。</p>\n<p>(2)</p>\n<p>进考场前竟然下起了倾盆大雨，从地铁站出来后，举着伞转了一个小时才找到考场，期间不停的被地图坑。</p>\n<p>（我才不会告诉你浪费这么多时间的真正原因是使用迭代加深搜索找考场。）</p>\n<p>进了考场发现有惊喜。。。机房竟然有网！有网！~~结果在考试前网断了。。。~~然后开始调整编辑器，<s>以至于没注意到别人都开始打代码了。。。</s></p>\n<h1 id=\"第一题水题鉴定完毕\"><a class=\"markdownIt-Anchor\" href=\"#第一题水题鉴定完毕\"></a> 第一题，<s>水题，鉴定完毕。</s></h1>\n<p>分析：可能连模拟都算不上，直接从头到尾扫描一遍即可。</p>\n<p>但虽说是水题，也有一些坑点：</p>\n<ol>\n<li>\n<p>读入要用 string + cin + getline()!</p>\n<p>读入要用 string + cin + getline()!</p>\n<p>读入要用 string + cin + getline()!</p>\n<p>重要的事情说三遍！</p>\n<p>@垃圾一个 就是在这一点上炸了。</p>\n</li>\n<li>\n<p>判断时要自编函数或alnum，不能用ctype.h中的isprint()函数，要用isalnum()函数。</p>\n<p>如果你问&quot;isprint()函数是什么&quot;或&quot;isalnum()函数是什么&quot;,请自行忽略这段话并自觉编写判断函数。</p>\n<p>别问我为什么，Luogu自测只有20分。</p>\n</li>\n</ol>\n<p>代码：</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;string&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">check</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> c)</span> </span>{\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-string\">'0'</span> &lt;= c &amp;&amp; c &lt;= <span class=\"hljs-string\">'9'</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-string\">'a'</span> &lt;= c &amp;&amp; c &lt;= <span class=\"hljs-string\">'z'</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-string\">'A'</span> &lt;= c &amp;&amp; c &lt;= <span class=\"hljs-string\">'Z'</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">string</span> s;\n    getline(<span class=\"hljs-built_in\">cin</span>, s);\n    \n    <span class=\"hljs-keyword\">int</span> len = s.length();\n    \n    <span class=\"hljs-keyword\">int</span> ans = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) {\n        <span class=\"hljs-keyword\">if</span>(check(s[i])) {\n            ans++;\n        }\n    }\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<h1 id=\"第二题暴力枚举鉴定完毕\"><a class=\"markdownIt-Anchor\" href=\"#第二题暴力枚举鉴定完毕\"></a> 第二题，<s>暴力枚举，鉴定完毕。</s></h1>\n<p>分析：</p>\n<ol>\n<li>\n<p>先计算好每一个军营的气势，同时累加双方的气势总和（输入后处理）</p>\n</li>\n<li>\n<p>枚举每一个军营，检查若将工兵放在此位置是否可减少双方差距，并更新最小值与位置。</p>\n</li>\n<li>\n<p><s>输出位置</s></p>\n</li>\n</ol>\n<p>写第一遍时大概思路就酱。</p>\n<p>运行结果：</p>\n<p>样例#1:Pass</p>\n<p>样例#1:Pass</p>\n<p>样例#3:<br>\n<strong>Beng!</strong></p>\n<p>又看了一下数据范围，对于 100% 的数据，n ≤ 10 ^ 5,ci,s1,s2≤10^9。</p>\n<p>10^9?</p>\n<p>“十年OI一场空，没开long long 见祖宗”，这话果然没错。</p>\n<p>除int main()外的所有int皆换成long long，OK。</p>\n<p>PS:如</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> int long long</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">signed</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\t<span class=\"hljs-comment\">//some code</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<p>之类的旁门左道，为了安全起见，大家不要滥用哦QwQ。<s>有本事你写个typedef int long long看报不报错</s></p>\n<h1 id=\"第三题\"><a class=\"markdownIt-Anchor\" href=\"#第三题\"></a> 第三题。。。</h1>\n<p>我这种小蒟蒻怎么可能作对前三题呢QwQ,又怎么可能想到DP正解QwQ</p>\n<p>所以我挥手打了贪心。。。<s>当我发现第三个样例没过时已经来不及了</s></p>\n<p>先说说贪心具体思路：</p>\n<ol>\n<li>将学生按照到达时间从小到大排个序</li>\n<li>用一个光标变量记录目前接到了第几个学生，如果还有人没被接到，就继续循环知道所有人都被接到为止。</li>\n<li>每次循环时检查当前这个人是否值得带，若值得则将光标后移。</li>\n<li>每次循环后将时间加上开车所需要的时间。</li>\n<li>最后累加总等待时间并输出。</li>\n</ol>\n<p>答案正确率：玄学</p>\n<p>到各大网站上测之，30分有之，80分有之，一切随缘。</p>\n<h1 id=\"第四题本蒟蒻骗了分没脸来这胡说了\"><a class=\"markdownIt-Anchor\" href=\"#第四题本蒟蒻骗了分没脸来这胡说了\"></a> 第四题本蒟蒻骗了分，没脸来这胡说了。。。</h1>\n<h1 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h1>\n<p>咳咳咳。。。</p>\n<h2 id=\"1考试策略的应用\"><a class=\"markdownIt-Anchor\" href=\"#1考试策略的应用\"></a> (1)考试策略的应用</h2>\n<p>亏得我这只小蒟蒻还在进考场前看了1h AK NOI 的各位dalao 呕心沥血写的各种考场策略，结果一进考场简直就像接受了A级记忆删除，什么都忘得一干二净：</p>\n<ol>\n<li>一，二题打完过了样例就去打第三题。（double-plus-scared）</li>\n<li>第三题贪心死活过不了第三个点还执迷不悟认为就是贪心。</li>\n<li>第四题明明有子任务放着不做打随机数。</li>\n</ol>\n<h2 id=\"2考场心态的调整\"><a class=\"markdownIt-Anchor\" href=\"#2考场心态的调整\"></a> (2)考场心态的调整</h2>\n<p>众所周知，在NOIP考场这种地方要想保持心态稳定是不可能的。然而如果吓得完全写不出代码就凉凉了。总结就是一定要冷静冷静冷静再冷静，一定不要像某人一样，贪心错了都想不到半个动规。</p>\n<p>最后，祝大家：</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-keyword\">while</span>(NOIP2019.rp &lt; NOIP2019.rp + <span class=\"hljs-number\">1</span>) {\n    NOIP2019.rp++;\n}\n</code></pre>\n","tags":[{"name":"NOIP","slug":"NOIP","permalink":"https://keepthethink.github.io/tags/NOIP/"}]},{"title":"New Start","date":"2019-03-04T01:51:00.000Z","path":"archives/3735749857/","text":"折腾一番后终于把之前的文章迁移到GitHub Pages + Hexo的博客上了，之所以选择GitHub是因为这个平台忽然关闭的可能性很小，并且可定制性极强，虽然只能做静态网页，但搭个博客还是绰绰有余的。 从另一方面来讲，GitHub的信誉也不错，在服务品质上也比国内的诸多流氓公司强得多。 扯了这么多，博客的本质还是发布文章，就看自己能否坚持写下去了。","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>折腾一番后终于把之前的文章迁移到GitHub Pages + Hexo的博客上了，之所以选择GitHub是因为这个平台忽然关闭的可能性很小，并且可定制性极强，虽然只能做静态网页，但搭个博客还是绰绰有余的。</p>\n<p>从另一方面来讲，GitHub的信誉也不错，在服务品质上也比国内的诸多流氓公司强得多。</p>\n<a id=\"more\"></a>\n<p>扯了这么多，博客的本质还是发布文章，就看自己能否坚持写下去了。</p>\n","tags":[{"name":"随笔","slug":"随笔","permalink":"https://keepthethink.github.io/tags/随笔/"}]}]