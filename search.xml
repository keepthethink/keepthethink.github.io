<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DNS-over-HTTPS(DoH)简析与配置</title>
      <link href="/2019/04/15/DNS-over-HTTPS(DoH)%E7%AE%80%E6%9E%90/"/>
      <url>/2019/04/15/DNS-over-HTTPS(DoH)%E7%AE%80%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="DNS是什么"><a href="#DNS是什么" class="headerlink" title="DNS是什么"></a>DNS是什么</h1><p>DNS（Domain Name System）是一项网络服务，用途是对全球各个网站的域名进行解析。如果听不懂上面这句话也没关系，接下来会讲解。如果你是网络方面的大牛可以直接跳过或关闭此网页。</p><h2 id="简明易懂的DNS"><a href="#简明易懂的DNS" class="headerlink" title="简明易懂的DNS"></a>简明易懂的DNS</h2><p>举个例子，从前有个叫小明的人（目测此人已累死），他开了一家商店。顾客要去购物时就直接去商店里买就可以了。</p><p>但由于网络环境的复杂性，让顾客直接记住地址是不太可能的。（你试试看？）于是就有人动了脑筋，推出了一样类似DNS的服务：你只需要说出地点（小明杂货店），服务商就会开车送你去目的地。</p><p>很多大公司实际上都推出了这份服务，例如阿里，百度，谷歌，Cloudflare等。</p><p>实际网络中的DNS，则是向服务器询问域名，而服务器返回IP地址。</p><h2 id="DNS查询"><a href="#DNS查询" class="headerlink" title="DNS查询"></a>DNS查询</h2><p>看到这里你可能有疑惑了，难道每一台DNS服务器都储存了很多IP地址和域名的对应吗？不是。一这很浪费空间，二这样很难更新。</p><p>以我的博客地址<code>keepthethink.github.io</code>为例，当你输入地址后：</p><p>你的电脑首先会去询问DNS服务器；</p><p>DNS服务器询问所谓“根服务器”；</p><p>根服务器询问.io域名的权威服务器；</p><p>.io域名的权威服务器询问.github.io域名的权威服务器;</p><p>.github.io域名的权威服务器将IP告知.io域名的权威服务器；</p><p>.io域名的权威服务器将IP告知根服务器；</p><p>根服务器将IP告知DNS服务器；</p><p>DNS服务器将IP告知你的电脑；</p><p>OK</p><p>（这套措施实在是找不到合适的比喻，看不懂就跳过吧。）</p><h2 id="DNS缓存"><a href="#DNS缓存" class="headerlink" title="DNS缓存"></a>DNS缓存</h2><p>这么干，空间的确节省了很多，但效率显然就更慢了。所以，DNS服务器中一般有个“缓存”，当你重复询问同一个网址时，直接找出缓存记录并答复。当然，每个一定的时间会更新缓存。</p><p>既然这套措施已经很完美了，那DoH是干嘛的？别急，马上就讲。</p><h2 id="DNS劫持与HTTP劫持"><a href="#DNS劫持与HTTP劫持" class="headerlink" title="DNS劫持与HTTP劫持"></a>DNS劫持与HTTP劫持</h2><h3 id="DNS劫持"><a href="#DNS劫持" class="headerlink" title="DNS劫持"></a>DNS劫持</h3><p>打个比方：</p><p>从前有个叫小刚的，他也开了家杂货店；</p><p>小刚发现小明的杂货店有很多客户，分外眼红，便拿钱贿赂了DNS服务商，于是，当顾客要求DNS服务商将其带到“小明杂货店”是，DNS会不管三七二十一将其带到“小刚杂货店”。在网络中，则是DNS服务器故意给出错误的IP地址。</p><p>这显然是无计可施的，一般来说，遇到这种人品烂的掉渣的服务商，最好的办法就是换一家，好在这年头网络条件不错，大多数DNS都不搞这种事。</p><p><strong>但是</strong>，对于DNS劫持，刚才讲的一种情况并非最常见的，最常见的事下面这种：</p><p>假设只有服务商A收了贿赂，而服务商B没有。当你向DNS服务商B打电话时，你的<strong>电话服务商</strong>将其转接到服务商A，那你就前功尽弃了。唯一的方法是使用DNS-over-HTTPS，后面会讲解。</p><h3 id="HTTP劫持"><a href="#HTTP劫持" class="headerlink" title="HTTP劫持"></a>HTTP劫持</h3><p>假设你向DNS服务器打了个电话，“我要去小明杂货店。”结果你的电话服务商窃听了这句话，盗取了你的隐私；甚至将其修改为“我要去小刚杂货店。”，然后你就不明不白的被带到了另一个地方。</p><p>这种劫持的关键在于，DNS服务器与你之间的链接为“明文传输”，而非“加密传输”。这就导致每一个环节上的人都能随意修改你的链接。幸运的是，在9102年，加密技术早已像烂柿子一样成熟了，如HTTPS。</p><h1 id="DoH的具体原理"><a href="#DoH的具体原理" class="headerlink" title="DoH的具体原理"></a>DoH的具体原理</h1><p>DoH的具体原理其实就是在DNS外面套一层HTTPS。（而且更慢了）即流程变成了</p><blockquote><p>你的电脑 -&gt; DoH服务器 -&gt; DNS服务器 -&gt; DoH服务器 -&gt; 你的电脑</p></blockquote><p>以上流程中的一个箭头代表一个HTTPS加密链接，使得该过程中的所有流量皆受到强加密，这样一来，除非拖出量子计算机或智子，否则绝无可能被破解。</p><h2 id="在Firefox浏览器中体验DoH"><a href="#在Firefox浏览器中体验DoH" class="headerlink" title="在Firefox浏览器中体验DoH"></a>在Firefox浏览器中体验DoH</h2><p>首先，把你的Firefox Quantum更新到最新版。（废话）</p><p>点击右侧的“菜单”，就是那个三条横线的图标；</p><p>在菜单里点击“首选项”；</p><p>进入“常规”选项；</p><p><img src="https://keepthethink.github.io/images/Jietu20190416-142149@2x.jpg" alt></p><p>滚动页面到最下方，选择“网络设置”；</p><p><img src="https://keepthethink.github.io/images/Jietu20190416-142524@2x.jpg" alt></p><p>在弹出窗口的最下方选择“启用基于HTTPS的DNS”，点击“使用默认值”即可。</p><h2 id="在macOS中体验DoH"><a href="#在macOS中体验DoH" class="headerlink" title="在macOS中体验DoH"></a>在macOS中体验DoH</h2><p>首先，为了安装必要的组件，我们首先要安装Homebrew软件包管理器。在终端中输入：</p><pre class="line-numbers language-shell"><code class="language-shell">/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后，输入以下命令安装cloudflared：</p><pre><code>brew install cloudflare/cloudflare/cloudflared</code></pre><p>等待安装，这段时间内你可以去换（chuan）件（shang）衣（nv）服（zhuang）。</p><p>然后，我们要修改一下配置文件，新建一个文件<code>/usr/local/etc/cloudflared/config.yaml</code>，输入如下内容：</p><pre><code>proxy-dns: trueproxy-dns-upstream:  - https://1.1.1.1/dns-query  - https://1.0.0.1/dns-query</code></pre><p>配置结束，启动服务：</p><pre><code>sudo cloudflared service install</code></pre><p>QED！现在你的电脑已经成了一台DoH服务器，高兴的话你也可以把它当作DNS服务器来用。打开 系统首选项 -&gt; 网络 -&gt; 高级 -&gt; DNS，在列表的最顶端添加 127.0.0.1 即可。</p><h2 id="DoH的使用测试"><a href="#DoH的使用测试" class="headerlink" title="DoH的使用测试"></a>DoH的使用测试</h2><p>用dig命令测试一下，发现DOH的使用体验还是相当不错的。对域名<a href="http://www.google.com的查询结果如下：" target="_blank" rel="noopener">www.google.com的查询结果如下：</a></p><pre><code>$ dig @127.0.0.1 www.google.com; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; @127.0.0.1 www.google.com; (1 server found);; global options: +cmd;; Got answer:;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 48175;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1;; OPT PSEUDOSECTION:; EDNS: version: 0, flags:; udp: 1452; PAD: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 (&quot;.................................................................&quot;);; QUESTION SECTION:;www.google.com.            IN    A;; ANSWER SECTION:www.google.com.        66    IN    A    216.58.194.196;; Query time: 165 msec;; SERVER: 127.0.0.1#53(127.0.0.1);; WHEN: Tue Apr 16 16:33:38 CST 2019;; MSG SIZE  rcvd: 142</code></pre><p>注意最下方几行：165毫秒的查询时间不可谓不快。</p><p>事实上，如果你饱受各种小广告弹窗之苦，DoH是个不错的应对措施；</p><p>如果你的运营商直接进行DNS劫持，建议投诉或诉诸法律；</p><p>如果你的运营商进行HTTP劫持，推荐DoH。（不然我写这玩意干嘛。）</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「文章转载」他译作“维基”的那个网站消失在竹幕后</title>
      <link href="/2019/04/15/%E3%80%8C%E6%96%87%E7%AB%A0%E8%BD%AC%E8%BD%BD%E3%80%8D%E4%BB%96%E8%AF%91%E4%BD%9C%E2%80%9C%E7%BB%B4%E5%9F%BA%E2%80%9D%E7%9A%84%E9%82%A3%E4%B8%AA%E7%BD%91%E7%AB%99%E6%B6%88%E5%A4%B1%E5%9C%A8%E7%AB%B9%E5%B9%95%E5%90%8E/"/>
      <url>/2019/04/15/%E3%80%8C%E6%96%87%E7%AB%A0%E8%BD%AC%E8%BD%BD%E3%80%8D%E4%BB%96%E8%AF%91%E4%BD%9C%E2%80%9C%E7%BB%B4%E5%9F%BA%E2%80%9D%E7%9A%84%E9%82%A3%E4%B8%AA%E7%BD%91%E7%AB%99%E6%B6%88%E5%A4%B1%E5%9C%A8%E7%AB%B9%E5%B9%95%E5%90%8E/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>本文放弃一切经济权利，各网站、公号和其他各类载体可在保持原文完整的基础上自由转载。</p></blockquote><p>这个周末，维基百科终于整体离我们而去。它的404，意味着13亿人再次被隔离于一个“普世产品”之外。</p><p>Pingwest创始人托马斯·骆在山寨发布会群里分享了他勤奋更新的微信公众号文章，<a href="http://mp.weixin.qq.com/s?__biz=MzAxMzc1NTkwNQ==&amp;mid=400989696&amp;idx=1&amp;sn=d36df590742255b0cb95d054376149d2&amp;scene=25&amp;srcid=1206Z80ZDGf1hSTlJarvNJ9i#wechat_redirect" target="_blank" rel="noopener">《自由和美好的事物总是戛然而止：比如约翰 列侬和维基百科》</a>（点击链接可以访问过去，做好他的公众号无所不谈的准备，虽然都挺有趣的）。</p><p>知乎讨论这个问题的500多个回答在昨天上午戛然而止，消失无踪。托马斯的这篇文字也不知道能生存到何时。互联网这片沃土在别的地方长出了很多参天大树，在中国却总像城市人行道水泥砖之间的野草，顽强地露头，被碾压而过；又螳臂挡车地冒头，再被碾压。周而复始。</p><p>在这些野草之中，我翻出了2010年时采访第一个中文维基百科词条创建者、“维基”这个译名的提出者的随笔。当他以及最早期的维基中文十三人确定这个译名并胼手砥足地一条一条建立起中文维基时，未必能看到这灰暗的未来。但他接受采访时的淡然和话语间隐隐透露出的理想主义，却正是这些年来激励人们前赴后继地传播光明的原动力。</p><p>这篇东西同样不知道能存活多久，所以本文开头我就放弃了关于本文的一切权利，希望尽量多的自媒体、网站和无处不在的SEO页能收录它、转发它，让人知道中文互联网世界一直燃烧不灭的微弱火种。即使不转发，也可以把它发到邮箱里，存到梯子通达的墙外，在隐秘的一个个圈子里流传。在历史无法书写之处，我们口口相传。仿佛华氏451那个时代，消防员以焚书为业；但热爱文字的人们仍然找到办法，他们分工合作，背下了每一本人类历史的名著；他们</p><blockquote><p>跟普通人没什么两样，像是跑完了一段长路，经过漫长的寻觅，见过美好的事物被焚毁，如今已垂垂老矣，聚在一起等待曲终人散，灯干油尽。他们并不肯定自己脑中所记载的一切，能使未来每一个日出发出更纯净的光辉，他们对此并无把握。但他们确知，那些书储存在他们平静的眼眸之后，完好无缺地等待着将来某一天，那些手指干净或肮脏的读者再来翻动。</p></blockquote><p>以下为原文。斜体字为今日所加。</p><p><strong>那些改变中国互联网的小人物之一：维基百科命名者苑明理</strong></p><p>2002年10月24日，苑明理（维基用户名 mountain）撰写了第一个具有中文内容的维基百科主页。</p><p>此前，或许有其他用户也曾想尝试，但当时的维基主页不支持中文输入。借由工具软件，mountain巧妙地绕过了这个障碍。维基媒体基金会发现了这个微小但意义深远的变化，三天后，中文维基百科有了自己的服务器、域名，同时，后台程序也升级为支持中文输入的版本。世界上最大的百科全书与使用人口最多的语言成功握手。作为中文维基百科的第一位参与用户，苑明理启动了这一进程。</p><p>在完成了第一篇中文条目“计算机科学”后，苑明理又提出了中文命名的提案。尽管已经有了中文内容，但这个百科全书的命名仍然用英文名字Wikipedia。 当时正在北大读应用数学研究生的苑明理引经据典，提出以“维基百科”作为Wikipedia的中文名称。苑明理向淼叔解释了当时的思路：“维”的本意是系物的大绳，由“纲举目张”转引到“网”的含义。而在此前，“万维网”作为WWW流传最广中文译名，已经认可了“维”与互联网的对应；“维基百科”，基于互联网的百科全书，这个译名成为Web2.0概念中音义俱佳的翻译，其流行程度仅次于“博客”（但后者并未得到普遍认同，现在仍有大量业者坚持称为“网志”）。一年之后的2003年10月，中文维基的13个管理员用户投票决定正式中文名，其中有9人选择了“维基百科”。在今天看来，这次投票的意义堪比埃尔隆德会议。</p><p>发布首个维基百科中文条目，以及命名维基百科，这两项里程碑式工作，完成任何一项都可以在IT史甚至学术史上留名；但苑明理并不认为这些有多么重要。 “我不做，总有人会做。当时国内已经有一些人在英文维基上学习了。至于命名，其实当时参与投票的其他译名也有很不错的”。很难说这是一种故作姿态的谦虚， 因为相比浩淼如海的维基百科，无论是参与者，还是使用者，都会为海量的知识目眩神迷。</p><p>Wikipedia 自2001年在美国建立以来，迄今已经拥有1200万个以上的条目，最大的英文维基拥有316万个条目（大英百科全书不到七万条）；中文维基自建立以来， 也已经拥有将近30万个条目。截至2007年10月，维基百科已经经历了四亿次编辑。相对地，维基的注册用户达1500万之众——要知道，维基百科的查阅甚至修改都无需注册。</p><p>在这些数据背后，是仍然不断汇聚而来的知识，更多的编辑者，更多的条目，更多次搜索。苑明理参与维基社区时，中文用户寥寥，条目也以编译英文条目为主。“维基”之译名，自提案而至表决，长达一年。倒并非是争论激烈，而是一开始人数太少，不好遽然而定。“中文维基属于所有中文用户，人数太少时定下名字，对其他人不是很不公平。”</p><p>苑明理坦承，维基所倡导的民主与自由，对其自身影响很大。维基的原则是每一个人均可参与编辑，人人平等；由于每一个人均可以编辑条目、增删内容，因此所有用户在维基面前平等。即使作为开创者和管理员，苑明理也并未享有太多的特权。管理员所作的，更多是维持编辑秩序，锁定或清理恶意编辑者。而对条目的修改，管理员与普通用户权限并无不同，都需要反复讨论、辨析，表明观点。这使维基的管理员远远不像一些论坛版主那样跋扈，所有参与者的讨论反映到条目上，也显得冷静而客观。</p><p>早期参与编辑维基的用户，素质都较为卓越。“我从他们身上学到了很多。”苑明理很怀念一位新加坡籍管理员，后者致力于中文维基社区规则的建立与完善。维基开放给所有用户编写，汇聚知识领域的微力量，带来的副作用可能是信息杂化，和编辑者之间的争吵。既然管理员不能以权威压人，此时便需要依规则调解。另有管理员引入“共识”的标准，成为解决条目争议的重要规则。</p><p>“早期中文维基的管理者贡献良多。”苑明理回忆。他们贡献的不止是中文条目，更在于及时将中文维基解决争端、协调众声的机制和规则建立起来。作为一个参与者几乎无限的项目，维基能够在高速增长的同时，仍维持条目令人惊奇的准确与中立，规则之完善与争端调解机制的建立，功不可没。</p><p>在飞速发展的同时，维基百科也并非没有遇到障碍。尽管拥有世界上最高超的调和艺术和顶尖人才，但维基仍然常常爆发“编辑战”，即各位编辑者就词条的表达与取舍进行的激烈论战。较为典型的是，伊朗现任总统内贾德的词条，从他还是一个默默无闻的候选人时就出现在百科页面上，随着他仕途的通达和不断发表的争议性言论，维基内部也一次次爆发论战。他的哪些言行需要载入页面，哪些判断适合进入百科，“每一个字上都展开了殊死搏斗”。</p><p>内贾德代表了世界上所有尖锐的冲突：东方主义下的东西方冲突，文明冲突论下的伊斯兰文明与基督教文明冲突，政治学意义下的学者与政客的冲突。反映到维基百科上，就是长达三年的争吵，三个调解员因此去职，单一个积极用户就作了近400次修改；最后完成的词条力争记录了内贾德的言论，却仍然被指责为“过长，但没有信息量”。筋疲力尽的维基人们告诉后来者：“可以重新开始讨论……可是我们已经没有精力再参与”（本段内容参考了南方都市报的相关报道）。</p><p>中文维基百科面临相似的困扰，据mountain回忆，有时他甚至声称要因此退出维基项目。与大部分争吵的原因不同，对内容的讨论主要围绕中立原则，只不 过各方对“中立”的理解不同。维基的词条就是在这样严格得近乎苛刻的审查中诞生，每一个词条看上去都冷淡，平静，客观，不带任何感情色彩和倾向。维基的编写是天下大同的缩写，呈现出来的结果却是万籁俱寂的白描。“维基最大的特点，就是在规则之下的众声喧哗，直到共识。”苑明理总结。</p><p>除了内容上的争论，中文维基还面临许多“特色国情”的挑战。作为百科全书，基本目的就是无所不包，除了“根据当地的法律法规不予显示”的内容。但是，当法律法规并未明确规定内容的界限时，无所不包就成为一种冒险的行为。中文维基百科自2005年后，访问上始终存在一些滞涩。有时一些页面会载入后无法显示，有 些时候则干脆整站无法访问。在这段时间，百度百科、互动百科等国产百科开始占领市场。</p><p>在注意力就是资源的互联网，苑明理对这种蚕食并不是太在意。“维基百科不会死，其他山寨版不尊重版权，随意拷贝媒体内容，没有真正创作和学习的乐趣，对维基百科不会形成真正威胁。”似乎是为了证明这一点，科普作家方舟子在博客上发文，痛斥国内某搜索引擎的在线百科不尊重版权，随意剽窃他文章的内容，还设置了繁琐的投诉程序。</p><p>“海纳百川，有容乃大”是中文维基百科的副标题，苑明理似乎从这句话中获得了更多从容的力量。“英文维基不会死，维基用户数量就有了保障。竞争再激烈，时间总会说明一切。坚持中立、包容和分享知识的乐趣，维基精神就不灭。”在关于维基你或许不知道的十件事这个条目下，最后一条就是“维基是一个百年大计”。既然能长寿到所有敌人都死去，那还有什么值得焦躁和忧愁呢？</p><p>“维基汇聚了所有普通人的力量，分享着所有用户的知识，并以此为基础记录人类文明的成果。”苑明理终于谈到了自己的理想：“这就是我想要的，世界公民。”</p><p>补记：苑明理已经于三年前离开了他服务多年的国际IT巨头。现在他在知春路的一家创业公司中埋头做一款叫做“彩云天气”的产品。除此之外，生活没有任何变化。</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷题解 P1003 【铺地毯】</title>
      <link href="/2019/04/13/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-P1003-%E3%80%90%E9%93%BA%E5%9C%B0%E6%AF%AF%E3%80%91/"/>
      <url>/2019/04/13/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-P1003-%E3%80%90%E9%93%BA%E5%9C%B0%E6%AF%AF%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>看标签</p><h1 id="枚举，模拟，暴力。"><a href="#枚举，模拟，暴力。" class="headerlink" title="枚举，模拟，暴力。"></a>枚举，模拟，暴力。</h1><p>很容易想到开一个大小N * N 的二维数组，然而数据范围是0 ≤ N ≤10,000</p><p>数组大小：10000 * 10000 = 100000000 Byte = 100000 KB = 100MB</p><p>刚好跨过了RE与MLE的红线。</p><p>另外一种方法是用四个数组来记录长方形的四个参数，再扫一遍检查最上面的地毯。</p><p>亲测，完美AC。</p><p>没有反作弊代码，因为我相信你们都有良心。代码公开计划都被我打开了。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">10000</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//程序里出现幻数可不是好习惯哦~</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入</span>    <span class="token punctuation">}</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">>=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">>=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ans的最终值恰好是最上面的那张地毯编号</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人类首张黑洞照片</title>
      <link href="/2019/04/13/%E4%BA%BA%E7%B1%BB%E9%A6%96%E5%BC%A0%E9%BB%91%E6%B4%9E%E7%85%A7%E7%89%87/"/>
      <url>/2019/04/13/%E4%BA%BA%E7%B1%BB%E9%A6%96%E5%BC%A0%E9%BB%91%E6%B4%9E%E7%85%A7%E7%89%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>2019年4月10日9：00，人类首张对黑洞进行直接拍摄的照片发布。</p><p><img src="https://i.loli.net/2019/04/12/5cb090dea8dcc.jpg" alt></p><p>这张照片可能并不符合许多人想象中常见的“漩涡”形象，但这是最符合目前学术界公认理论的形象。爱因斯坦，史瓦西，克尔，霍金等历代科学家的理论终于在这一天得到了论证，只不过他们都没有活到看到他们预言之物终于被光学设备记录到的那一天。</p><p>“黑洞”这个概念在20世纪就早已名扬四海，但这个概念一直只是存在于物理学家的计算中，这多少让人想起海王星，但海王星被计算出后几乎是立刻就被天文望远镜所发现，而黑洞从被计算出（1915年12月德国天文学家卡尔·史瓦西计算出爱因斯坦方程的黑洞解。）到2019年黑洞终于被人类的天文望远镜拍摄到，时隔整整103年。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 天文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷题解 P1002 【过河卒】</title>
      <link href="/2019/04/12/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-P1002-%E3%80%90%E8%BF%87%E6%B2%B3%E5%8D%92%E3%80%91/"/>
      <url>/2019/04/12/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-P1002-%E3%80%90%E8%BF%87%E6%B2%B3%E5%8D%92%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>看到题目二话不说用了搜索，直到在提交前看了一下算法标签，又看了一下数据范围。。。</p><p>状态转移方程的推导并不复杂，每次判断卒是否能走到这个格子，不可以则为0（显而易见），可以则为下方与左方的值之和。</p><p>上代码，这道题算是一道DP入门题吧。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> attack<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> dist<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> map<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">+</span> attack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> x <span class="token operator">+</span> attack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">+</span> attack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> y <span class="token operator">+</span> attack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                map<span class="token punctuation">[</span>x <span class="token operator">+</span> attack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> attack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> k <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">:</span> k<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> map<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> k <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">:</span> k<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> dist<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理性看待CCF</title>
      <link href="/2019/04/06/%E7%90%86%E6%80%A7%E7%9C%8B%E5%BE%85CCF/"/>
      <url>/2019/04/06/%E7%90%86%E6%80%A7%E7%9C%8B%E5%BE%85CCF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>几个月过去了，关于CCF的一切事件基本上都已经风平浪静。</p><p>从事实角度来讲，CCF的<strong>大部分</strong>行为是无可厚非的，CCF垄断国内OI界并不停抬价，由于OI不属于商业范畴，似乎不违反现有任何法律；抬价，似乎也没有抬到诸位承担不起的地步。当然，这些报名费里面有多少用于比赛举办，可能还得打个问号，但这里要注意两点：</p><ol><li>CCF不是政府机构，也就是说他们并不是广大OIer们的公仆，不像我们交的税，全部都用于国家发展与建设。</li><li>CCF这么个庞然大物一般的组织若要运转，需要很大一笔资金。</li></ol><p>其实NOIP2018时CCF就已经将评测机换成了i7-8700K 32GB RAM，但其耗费的资金必然只占我们的报名费中的一小部分。[1]简单估计一下，这台电脑撑死也就……5万？10万？但考虑到这之前的两点，这也不是什么奇怪的事。我们每年交了几百万上千万了，已经相当于一个中型企业的年收入。一言以蔽之，“把CCF的财务部门与CCF的竞赛组织部门的人对调，CCF的所有问题都会得到解决。”</p><p>既然CCF激起如此民愤，说他们什么亏心事都没做未免说不过去。只是要告诉屏幕前的各位，在对CCF进行道德判断时，应该以一种更为中肯的角度去看待。</p><h1 id="关于省队名额"><a href="#关于省队名额" class="headerlink" title="关于省队名额"></a>关于省队名额</h1><p>先谈省队。省队是什么？</p><p>省队是各省参加全国赛的代表队，各个省队的名额有复杂的计算公式，一般和之前的成绩和参赛人数有关。[2]</p><p>省队相当于什么难度？以下几个知识点取自“洛谷试炼场”：</p><ul><li>网络流</li><li>单调队列</li><li>概率期望</li><li>二分图</li><li>点分治</li><li>后缀数组</li><li>主席树</li><li>数位DP</li><li>AC自动机</li><li>平衡树</li><li>树链剖分</li><li>动态树</li><li>树套树</li><li>可持久化Trie树</li><li>莫队</li><li>分块</li><li>莫比乌斯反演</li></ul><p>要让以上知识点全部过关，刷题什么的暂且不提，文化课必定已经彻底停了。（不排除有同时AK文化课的大佬的存在，但这毕竟是个案。）在这种情况下，这位OIer必然是已经将自己的全部前途作为筹码押在了OI这条路上，要么是极其的热爱信息学，要么是坚信自己必然能夺魁榜首。几年来在各大OJ上留下的AC记录，几年来的无数个不眠之夜，几年来留下的汗水，却全都因为一句简单的“有复杂的计算公式，一般和之前的成绩和参赛人数有关”就被一笔勾销！在我们眼里这是个悲剧，在CCF眼里这想必就是一个统计数字！（魔改自斯大林某句被后人强行断章取义的话）</p><p>自法国大革命以后，世界的的主流价值观便是人文主义。人文主义的核心是什么？人是世界的中心！当我们判断一个OIer能否参加省选时，我们应该判断TA作为<strong>一个人</strong>的真才实学，而不是什么复杂的计算公式得到的数目！今天██省因为[数据删除]被减了名额，明天██省又因为[数据删除]被减了名额，其中到底有多少是我们广大OIer的过错呢？CCF吸金什么的倒不是主要问题，但他们到底要不要把OIer的前途放在眼里？</p><p><a href="http://www.noi.cn/newsview.html?id=625&amp;hash=B319A4&amp;type=1" target="_blank" rel="noopener">CCF关于NOIP2017复赛违规省份的处罚公告</a></p><p>呵呵，通报批评一下就了事了，真当我们是傻子？而且这不是重点，提高分数线是怎么回事？</p><p><a href="http://www.noi.cn/newsview.html?id=568&amp;hash=8139FE&amp;type=1" target="_blank" rel="noopener">CCF 关于NOIP2016违规事件的处罚公告</a></p><p>处罚作弊者是理所当然的，但整个学校禁赛一年？喵喵喵？这是退回的封建时代了，诛九族？</p><p>若一个省发生了作弊等乱象，犯错的是什么？在CCF眼里，犯错的主体是这个省，所以惩罚就降临到了这个省的头上：扣省队名额。请问在此项举措中，受害最大的是谁？好吧，从现实角度来讲，CCF这么大一个组织，即便是杜子徳也不是想改就能改的。但请问在CCF眼里，我们OIer到底是什么？</p><h1 id="NOIP2018初赛的那些事儿"><a href="#NOIP2018初赛的那些事儿" class="headerlink" title="NOIP2018初赛的那些事儿"></a>NOIP2018初赛的那些事儿</h1><p>首先放链接：<br><a href="http://www.noi.cn/newsview.html?id=760&amp;hash=02E485&amp;type=1" target="_blank" rel="noopener">CCF关于公布NOIP2018初赛违规事件的处罚公告</a></p><p>毫无疑问，这事引起的争议相当的大，俞x颜也瞬间名扬天下，放眼望去遍地都是各种“俞x颜是我同学”之类的回复。扯远了，让我们先把视线聚焦在第一个事件上：</p><h2 id="山东赛区违规情况及处罚通报"><a href="#山东赛区违规情况及处罚通报" class="headerlink" title="山东赛区违规情况及处罚通报"></a>山东赛区违规情况及处罚通报</h2><p>相比民主烈士俞x颜的事迹，这起事件反而不那么引人注目。但要注意的是，这起事件波及的是整个省的名额，而浙江的事件只波及到了一个人。</p><p>CCF在处理这起事件的时候，逻辑似乎是这样的：</p><ol><li>山东赛区青州考点（青州二中）负责人潍坊青州市电化教育中心田志杰擅自提前比赛时间</li><li>山东省计算机学会对竞赛相关责任人培训不足，应对此事负责任</li><li>对山东省进行处罚，故对山东省名额进行扣除</li></ol><p>还是那句话：在对一个省的处罚中，利益真正受到损害的是谁？CCF就算没有专心致志办比赛的诚意，起码也应该注意到谁是无辜的！如果因为选手作弊而引起“灭族”至少还可以用CCF的逻辑硬解析过去，这种因为<strong>负责人</strong>行为不当而引起的问题还要扣名额，emmmm</p><h2 id="浙江赛区违规情况调查及处罚通报"><a href="#浙江赛区违规情况调查及处罚通报" class="headerlink" title="浙江赛区违规情况调查及处罚通报"></a>浙江赛区违规情况调查及处罚通报</h2><blockquote><p>10月16日， CCF接到实名举报，指出浙江赛区出现影响比赛秩序的行为，经调查核实，情况属实。</p></blockquote><p>“出现影响比赛秩序的行为”？请问具体怎么样才算出现影响比赛秩序？有相关规定么？情况属实？这不等于开门还没见山，就先给人家俞x颜扣帽子吗？</p><blockquote><p>在竞赛前一天，10月12日15:29，余姚中学选手俞x颜（女）在网上发布名为“NOIP2018提高组初赛解析”的博客，13日下午初赛结束后，俞x颜从网上获取NOIP2018提高组初赛答案PDF版本后上传至“NOIP2018提高组初赛提高组解析”博客内。经验证，该博客网站不会显示更新的时间，而只显示该条博客内容首次发布的时间。因此，俞x颜的这一行为造成了NOIP2018提高组初赛答案泄露的假象。</p></blockquote><p>所以说，这是假象？真是让人白高兴一场。</p><p>请问CCF，哪条条例规定了不能制造假象？当然了，这是我们可以援引万能的<strong>第八条条例</strong>：</p><blockquote><p>选手违规行为是指：</p><p>1)      将不允许夹带的物品带入考场并经指出后仍不予改正；</p><p>2)      在考场通过不正当途径获得与竞赛有关的信息或为其他选手提供与竞赛有关的信息；</p><p>3)      用不正当途径和介质将答案带入考场；</p><p>4)      以不正当方式提前得到竞赛题目；</p><p>5)      让他人替代参加竞赛或以他人或其他单位的名义参加竞赛；</p><p>6)      抄袭或拷贝他人的答案或程序，有意提供给他人答案或程序；</p><p>7)      不遵守竞赛规则和赛场规定；</p><p>8)      其他可能影响公平竞赛的其他行为。</p></blockquote><p>其他可能影响公平竞赛的其他行为。</p><p>Sorry，负责制定规则真的可以为所欲为。</p><blockquote><p>“NOIP2018提高组初赛解析”博客一事系选手“俞x颜”（女）为吸引网上点击量而做出的行为，<strong>俞x颜本人也予以承认</strong>。她的这一行为在选手中造成一定的恐慌和混乱，干扰了正常的竞赛秩序，有损竞赛的声誉，也给组织方带来不必要的负担和干扰。</p></blockquote><p>本人予以承认？俞同学啊，你既然有在CCF眼皮底子下玩火的觉悟，就应该有不被屈打成招的觉悟吧。你要是斩钉截铁地说就是先占坑等会来填，CCF也不至于把你弄成这样。</p><blockquote><p>NOIP是CCF主办的NOI系列赛事之一。公平公正是竞赛的生命，任何违规行为对竞赛都是极大的伤害。CCF NOI各相关机构会带头遵守规则，严格保密，同时也承担维护竞赛公平公正良好秩序的重任，对任何违规或作弊的行为均按竞赛条例给予严肃处理。NOI各组织单位、学校、教师均要严格按照规定和流程开展工作，诚实守信，保证赛事的公正进行。</p></blockquote><p>刚泼完脏水又来扣帽子？人家俞同学哪里破坏公平公正了？</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这里引用一位大佬的话：</p><blockquote><p>用伤害无辜者来掩盖自己的错误是心虚的体现，也永远掩盖不了。 ——Hannah_AI [3]</p></blockquote><p>综上所述，俞同学的所作所为只不过是发博客的事件提前了一点而已，只要点进去就可以知道发生了什么。（当然，初赛完成之后可能有一点点误会，但俞同学肯定在自己的博客里注明了。）恐慌？历史上有过OIer恐慌的事吗？</p><p>CCF，你到底是想干嘛？把一个活生生的人当作垫脚石吗？</p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>关于CCF的事，应该以一种理性的方式去看待。</p><p><img src="https://pic2.zhimg.com/80/v2-9a49f4e1981a4653446d9b165c43a7c5_hd.jpg" alt></p><p>以上就是个完美的反面教材</p><p>像 China Chasing-money Foundation 这种为黑而黑，真的能为广大OIer的权利起到什么帮助吗？并没有。</p><p>那么，我们到底可以为此做些什么？什么也做不了。</p><h1 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h1><h2 id="所谓“吃人”"><a href="#所谓“吃人”" class="headerlink" title="所谓“吃人”"></a>所谓“吃人”</h2><p>吃人是什么？先想自己的利，再想别人的命，便是吃人。</p><h2 id="所谓“连坐”"><a href="#所谓“连坐”" class="headerlink" title="所谓“连坐”"></a>所谓“连坐”</h2><p>连坐是野蛮人的象征，譬如诛九族与扣省队名额。</p><p>方孝孺至少还有个成王败寇的说法，他的弟子，门生们做错了什么？</p><h2 id="《第八条条例》"><a href="#《第八条条例》" class="headerlink" title="《第八条条例》"></a>《第八条条例》</h2><blockquote><p>选手违规行为是指：</p><p>1)      将不允许夹带的物品带入考场并经指出后仍不予改正；</p><p>2)      在考场通过不正当途径获得与竞赛有关的信息或为其他选手提供与竞赛有关的信息；</p><p>3)      用不正当途径和介质将答案带入考场；</p><p>4)      以不正当方式提前得到竞赛题目；</p><p>5)      让他人替代参加竞赛或以他人或其他单位的名义参加竞赛；</p><p>6)      抄袭或拷贝他人的答案或程序，有意提供给他人答案或程序；</p><p>7)      不遵守竞赛规则和赛场规定；</p><p>8)      其他可能影响公平竞赛的其他行为。</p></blockquote><p>嘿我有个写小说的点子，《第八条条例》，我想它一定比《第二十二条军规》更好。</p><h2 id="将心比心"><a href="#将心比心" class="headerlink" title="将心比心"></a>将心比心</h2><p>中国的OIers若何CCFers对调一下位置，OI界所有问题都会得到解决。</p><p>（大家别光顾着指责CCF，试想若他们跑路了，我们吃什么？）</p><p>（国人别光顾着指责清政府，试想他们跑路了，国人吃什么？）</p><p>（德国人别光顾着指责纳粹，试想如果在工业发展期间他们跑路了，你们吃什么？）</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] <a href="https://news.mydrivers.com/1/593/593774.htm" target="_blank" rel="noopener">Intel盒装处理器大涨价：i7-8700K涨至2999元 - 快科技 - 驱动之家</a></p><p>[2] <a href="https://oi-wiki.org/intro/mode/" target="_blank" rel="noopener">OI赛事和赛制</a></p><p>[3] <a href="http://scp-wiki-cn.wikidot.com/scp-cn-601" target="_blank" rel="noopener">SCP-CN-601</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算几何：凸包</title>
      <link href="/2019/04/05/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%EF%BC%9A%E5%87%B8%E5%8C%85/"/>
      <url>/2019/04/05/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%EF%BC%9A%E5%87%B8%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>对于初学计算几何的OIer来说，Graham算法是个不错的凸包算法。Graham算法相比极角排序法来说，更为直观也更容易理解。</p><h1 id="数据定义"><a href="#数据定义" class="headerlink" title="数据定义"></a>数据定义</h1><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>    <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">double</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">Point</span><span class="token punctuation">(</span>Point a<span class="token punctuation">,</span> Point b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//构造从a到b的向量</span>        x <span class="token operator">=</span> b<span class="token punctuation">.</span>x <span class="token operator">-</span> a<span class="token punctuation">.</span>x<span class="token punctuation">;</span>        y <span class="token operator">=</span> b<span class="token punctuation">.</span>y <span class="token operator">-</span> a<span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">double</span> <span class="token function">dist</span><span class="token punctuation">(</span><span class="token keyword">const</span> Point<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//计算从自身到点P的距离</span>        <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">-</span> p<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> p<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> p<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> p<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">double</span> <span class="token keyword">operator</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Point<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//计算向量叉积</span>        <span class="token keyword">return</span> x <span class="token operator">*</span> p<span class="token punctuation">.</span>y <span class="token operator">-</span> p<span class="token punctuation">.</span>x <span class="token operator">*</span> y<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Point<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//按照X轴排序</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> p<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">friend</span> istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">>></span> <span class="token punctuation">(</span>istream<span class="token operator">&amp;</span> in<span class="token punctuation">,</span> Point<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//重载 >> 运算符使得cin可以输入</span>        in <span class="token operator">>></span> p<span class="token punctuation">.</span>x <span class="token operator">>></span> p<span class="token punctuation">.</span>y<span class="token punctuation">;</span>        <span class="token keyword">return</span> in<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">10000</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>Point p<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> st<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//点栈</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h1><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//输入所有点</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">>></span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> p <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对点进行直角坐标排序􏰣􏰳􏰣􏰳􏰮􏰂</span>    <span class="token keyword">double</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    st<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将第一个点入栈</span>    st<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将第二个点入栈</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Point <span class="token function">u</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>st<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>st<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//计算栈顶两个点构成的向量</span>        Point <span class="token function">v</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>st<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//计算当前点与栈顶构成的向量</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>u <span class="token operator">*</span> v <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//若叉积小于0</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>top <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//当栈中只有一个元素时，退出循环</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            top<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//弹出栈顶</span>            u <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>st<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>st<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//更新</span>            v <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>st<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//更新</span>        <span class="token punctuation">}</span>        st<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将第i个点压入栈中</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans <span class="token operator">+</span><span class="token operator">=</span> p<span class="token punctuation">[</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">dist</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>st<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//累加下半个凸包的长度</span>    <span class="token punctuation">}</span>    top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清空栈</span>    <span class="token comment" spellcheck="true">//求出上半个凸包，与前半部分大同小异</span>    st<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    st<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Point <span class="token function">u</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>st<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>st<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Point <span class="token function">v</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>st<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>u <span class="token operator">*</span> v <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>top <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            top<span class="token operator">--</span><span class="token punctuation">;</span>            u <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>st<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>st<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            v <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>st<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        st<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans <span class="token operator">+</span><span class="token operator">=</span> p<span class="token punctuation">[</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">dist</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>st<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> fixed <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//控制精度</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Splay学习笔记</title>
      <link href="/2019/03/28/Splay%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/03/28/Splay%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>伸展树（英语：Splay Tree）是一种能够<strong>自我平衡</strong>的二叉查找树，它能在均摊O(log n)的时间内完成基于伸展（Splay）操作的插入、查找、修改和删除操作。</p><p>众所周知，普通BST在进行各种操作时很容易因为左子树与右子树高度差的问题导致时间复杂度退化为O(n)，Splay为了避免这个问题，使用了一种叫做“伸展”的操作来使左右子树平衡，在后面会介绍。</p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><p><code>node.v</code>：节点node的值</p><p><code>node.father</code>：节点node的父节点</p><p><code>node.ch[0]</code>与<code>node.ch[1]</code>：节点node的左子节点与右子节点</p><p><code>node.size</code>：以节点node为根节点的子树的节点总数</p><p><code>node.cnt</code>：数值与节点node相同的节点的数量（都储存在节点node中）</p><p>代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> v<span class="token punctuation">,</span> father<span class="token punctuation">,</span> ch<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> cnt<span class="token punctuation">;</span>    <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> father <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">v</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">father</span><span class="token punctuation">(</span>father<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">size</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cnt</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p><code>root</code>：根节点</p><p><code>cnt</code>：总结点数</p><pre class="line-numbers language-cpp"><code class="language-cpp">Node node<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> root <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="pushup"><a href="#pushup" class="headerlink" title="pushup"></a>pushup</h3><p><code>pushup()</code>函数：<strong>更新</strong>节点p的<code>size</code>值</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">pushup</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>size <span class="token operator">=</span> node<span class="token punctuation">[</span>node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>size <span class="token operator">+</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt <span class="token operator">+</span> node<span class="token punctuation">[</span>node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//节点数 = 左子树节点数 + 本身的节点数 + 右子树节点数</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h3 id="check"><a href="#check" class="headerlink" title="check"></a>check</h3><p><code>check()</code>函数：询问节点p是其父节点的左子节点还是右子节点</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> node<span class="token punctuation">[</span>node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>father<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> p <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//0代表左子节点，1代表右子节点</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h3 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h3><p><code>connect()</code>函数：将节点x连接为节点f的子节点，方向为d (d = 0, 1，同上)</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> f<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>    node<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将节点f的子节点设置为x</span>    node<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>father <span class="token operator">=</span> f<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将节点x的父节点设置为f</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><h3 id="rotate"><a href="#rotate" class="headerlink" title="rotate"></a>rotate</h3><p>旋转是平衡树最主要的操作，其本质在于，每次进行旋转时，左右子树当中之一高度 -1，另外一棵高度 +1，以达到平衡的目的。</p><p>左旋：</p><p>第一次连边，节点x的子节点成为x的父节点的右子节点</p><p>第二次连边，节点x成为节点x的父节点的父节点的子节点，方向与x的父节点相同</p><p>第三次连边，节点x的父节点成为节点x的左子节点</p><p><img src="https://keepthethink.github.io/images/left_rotate.jpg" alt></p><p>右旋：</p><p>第一次连边，节点x的子节点成为x的父节点的左子节点</p><p>第二次连边，节点x成为节点x的父节点的父节点的子节点，方向与x的父节点相同</p><p>第三次连边，节点x的父节点成为节点x的右子节点</p><p><img src="https://keepthethink.github.io/images/right_rotate.jpg" alt></p><p>旋转操作只与标为红，蓝，绿的三个部分有关。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> node<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>father<span class="token punctuation">,</span> z <span class="token operator">=</span> node<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>father<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> w <span class="token operator">=</span> node<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span>d <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//w判断应该左旋还是右旋</span>    <span class="token function">connect</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> y<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第一次连边，节点x的子节点连接到x的父节点，方向与节点x相同</span>    <span class="token function">connect</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> z<span class="token punctuation">,</span> <span class="token function">check</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第二次连边，节点x连接到节点x的父节点的父节点，方向与x的父节点相同</span>    <span class="token function">connect</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">,</span> d <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第三次连边，节点x的父节点连接到节点x，方向与节点x原先的方向相反</span>    <span class="token function">pushup</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//更新子树</span>    <span class="token function">pushup</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//更新子树</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="伸展"><a href="#伸展" class="headerlink" title="伸展"></a>伸展</h2><h3 id="splay"><a href="#splay" class="headerlink" title="splay"></a>splay</h3><p>Splay操作：将节点x旋转到节点dist的子节点。通常是将该节点旋转到根节点，在这种情况下，应当将<code>root</code>置为x</p><p>最朴素的想法：只要父节点不是dist就一直旋转该节点，但这样很容易被某些机（wu）智（liang）出题人卡。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">splay</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> dist <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>father <span class="token operator">!=</span> dist<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">rotate</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>dist <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        root <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以，在实际操作中，通常会预判节点x的父节点的方向，若方向一致则旋转其父节点，减少被卡的可能性。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">splay</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> dist <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> f <span class="token operator">=</span> node<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>father<span class="token punctuation">;</span> f <span class="token operator">=</span> node<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>father<span class="token punctuation">,</span> f <span class="token operator">!=</span> dist<span class="token punctuation">;</span> <span class="token function">rotate</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>father <span class="token operator">!=</span> dist<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">check</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">rotate</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//方向一致则旋转x的父节点</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">rotate</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//方向不一致则旋转x</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>dist <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        root <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>查找值为x的节点，找到后将其置为<code>root</code>以便操作。</p><p><code>find</code>操作的意义在于将值为x的节点伸展（splay）到根，在不存在值为x的节点的情况下，应将小于x的节点中最大的节点伸展（splay）到根。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span>x <span class="token operator">></span> node<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">!=</span> node<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cur <span class="token operator">=</span> node<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span>x <span class="token operator">></span> node<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//查找值为x的节点</span>    <span class="token punctuation">}</span>    <span class="token function">splay</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="公共操作"><a href="#公共操作" class="headerlink" title="公共操作"></a>公共操作</h2><p>如果将本文讲的Splay打包成一个<code>class</code>，则前文所述的操作应包含在<code>private</code>中，本节所述的操作应包含在<code>public</code>中。</p><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p>Splay中的<code>insert</code>其实与朴素BST中的<code>insert</code>没有什么区别，但若直接插入可能导致树退化为链，所以要在末尾处调用一次splay()函数，使Splay树保持平衡。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> cur <span class="token operator">=</span> root<span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">!=</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> cur<span class="token punctuation">;</span>        cur <span class="token operator">=</span> node<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span>x <span class="token operator">&lt;</span> node<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        node<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        cur <span class="token operator">=</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span>x <span class="token operator">&lt;=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        node<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Node</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">splay</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="serial"><a href="#serial" class="headerlink" title="serial"></a>serial</h3><p><code>serial</code>操作：查询值为x的节点，在<code>find</code>操作的基础上，<code>serial</code>只需要在<code>find</code>过后输出左子树节点数量即可。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">serial</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">[</span>node<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>size<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pre"><a href="#pre" class="headerlink" title="pre"></a>pre</h3><p>找出值为x的节点的前驱，将节点splay到root后在左子树查找最大值即可。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pre</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> cur <span class="token operator">=</span> node<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cur <span class="token operator">=</span> node<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cur<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="suc"><a href="#suc" class="headerlink" title="suc"></a>suc</h3><p>找出值为x的点的后继，与前驱同理。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">suc</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> cur <span class="token operator">=</span> node<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cur <span class="token operator">=</span> node<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cur<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><p>删除一个节点。</p><p>删除较为复杂，分四步来完成：</p><ol><li>定义<code>last</code>为节点的前驱，<code>next</code>为节点的后继。</li><li>将<code>last</code>节点splay到<code>root</code>，这时<code>last</code>的左子树皆小于x</li><li>将<code>next</code>节点splay到<code>last</code>的子节右点，此时<code>next</code>的右子树皆大于x</li><li><code>next</code>的左节点<code>rm</code>必然满足 <code>last</code> &lt; rm &lt; <code>next</code>，删除<code>rm</code>即可</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> last <span class="token operator">=</span> <span class="token function">pre</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> next <span class="token operator">=</span> <span class="token function">suc</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">splay</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">splay</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rm <span class="token operator">=</span> node<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>rm<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        node<span class="token punctuation">[</span>rm<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token function">splay</span><span class="token punctuation">(</span>rm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        node<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">pushup</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pushup</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="rank"><a href="#rank" class="headerlink" title="rank"></a>rank</h3><p>查找排名为k的节点</p><p>用一个指针cur从root开始查找，每次根据左子树大小于k的关系修改cur以及k。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">rank</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;=</span> node<span class="token punctuation">[</span>node<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cur <span class="token operator">=</span> node<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">></span> node<span class="token punctuation">[</span>node<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>size <span class="token operator">+</span> node<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token punctuation">)</span> <span class="token punctuation">{</span>            k <span class="token operator">-</span><span class="token operator">=</span> node<span class="token punctuation">[</span>node<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>size <span class="token operator">+</span> node<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token punctuation">;</span>            cur <span class="token operator">=</span> node<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> cur<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://zh.wikipedia.org/zh-hans/伸展树" target="_blank" rel="noopener">伸展树- 维基百科，自由的百科全书</a></p><p><a href="https://www.youtube.com/watch?v=IBY4NtxmGg8" target="_blank" rel="noopener">Splay Tree Introduction</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 平衡树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一维数据结构学习笔记</title>
      <link href="/2019/03/15/%E4%B8%80%E7%BB%B4%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/03/15/%E4%B8%80%E7%BB%B4%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一维数据结构学习笔记"><a href="#一维数据结构学习笔记" class="headerlink" title="一维数据结构学习笔记"></a>一维数据结构学习笔记</h1><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>链表:按顺序记录元素的线性数据结构。</p><p>其中的“顺序”是逻辑上的顺序，不一定是物理存储上的顺序。</p><p>链表分为单向与双向两种：</p><p>1.单向链表:每个元素只记录了下一个元素的位置。</p><p>2.双向链表:每个元素记录了上一个及下一个元素的位置。</p><p>代码实现：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//用类来定义链表中的每个元素。</span><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span> prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*前一个元素或者后一个元素可以不存在，所以必须要使用指针类型。*/</span>    <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> Node <span class="token operator">*</span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> Node <span class="token operator">*</span> prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">v</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">prev</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表常用操作-构造链表"><a href="#链表常用操作-构造链表" class="headerlink" title="链表常用操作:构造链表"></a>链表常用操作:构造链表</h3><p>通过实例化链表类，创建链表的每个元素并建立元素之间的关系。</p><p>代码实现：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//构造一个只有头尾两个元素的链表。</span>Node<span class="token operator">*</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Node<span class="token operator">*</span> tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> head <span class="token operator">-</span><span class="token operator">></span> next <span class="token operator">=</span> tail<span class="token punctuation">;</span>tile <span class="token operator">-</span><span class="token operator">></span> prev <span class="token operator">=</span> head<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表常用操作-遍历链表"><a href="#链表常用操作-遍历链表" class="headerlink" title="链表常用操作:遍历链表"></a>链表常用操作:遍历链表</h3><p>将链表头赋值给临时变量，然后不断寻找下一个元素直到空。</p><p>代码实现：</p><pre class="line-numbers language-cpp"><code class="language-cpp">Node<span class="token operator">*</span> i <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    i <span class="token operator">=</span> i <span class="token operator">-</span><span class="token operator">></span> next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//需要对链表元素进行的操作</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表常用操作-插入元素"><a href="#链表常用操作-插入元素" class="headerlink" title="链表常用操作:插入元素"></a>链表常用操作:插入元素</h3><p>找到要插入元素的位置，一般是记录前一个元素。<br>重新设置插入位置两边的元素和插入元素的关系。</p><p>代码实现：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//在元素p后面插入元素i</span>i <span class="token operator">-</span><span class="token operator">></span> next <span class="token operator">=</span> p <span class="token operator">-</span><span class="token operator">></span> next<span class="token punctuation">;</span>i <span class="token operator">-</span><span class="token operator">></span> prev <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">-</span><span class="token operator">></span> next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    p <span class="token operator">-</span><span class="token operator">></span> next <span class="token operator">-</span><span class="token operator">></span> prev <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span>p <span class="token operator">-</span><span class="token operator">></span> next <span class="token operator">=</span> i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:</p><blockquote><p>1.修改关系的顺序.</p><p>2.特判插入链表头的情况。</p></blockquote><h3 id="链表常用操作-删除元素"><a href="#链表常用操作-删除元素" class="headerlink" title="链表常用操作:删除元素"></a>链表常用操作:删除元素</h3><p>首先，找到要删除的元素。</p><p>重新设置该元素的前后元素之间的关系，并根据需要释放元素。<br>代码实现：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    i <span class="token operator">-</span><span class="token operator">></span> next <span class="token operator">-</span><span class="token operator">></span> prev <span class="token operator">=</span> i <span class="token operator">-</span><span class="token operator">></span> prev<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> prev <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    i <span class="token operator">-</span><span class="token operator">></span> prev <span class="token operator">-</span><span class="token operator">></span> next <span class="token operator">=</span> i <span class="token operator">-</span><span class="token operator">></span> next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">delete</span> i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:</p><blockquote><p>如果有变量用来记录链表头，头被删除时要记得更新。</p><p>链表尾同理。</p></blockquote><h3 id="链表-Q-amp-A"><a href="#链表-Q-amp-A" class="headerlink" title="链表 Q&amp;A"></a>链表 Q&amp;A</h3><p><strong>Q：</strong>单向链表可以进行删除元素操作吗?</p><p><strong>A：</strong>可以。通过预判下一个元素的方式，找到要删除元素的上一个元素，再更新下一个元素。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>pr <span class="token operator">-</span><span class="token operator">></span> next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    pr <span class="token operator">-</span><span class="token operator">></span> next <span class="token operator">=</span> pr <span class="token operator">-</span><span class="token operator">></span> next <span class="token operator">-</span><span class="token operator">></span> next<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当然，还是要特判删除链表头的情况。</p><p><strong>Q：</strong>还有别的方式可以用来实现链表吗?</p><p><strong>A：</strong>通常情况下，使用数组来实现链表会更加简便。</p><p>给每个元素一个编号(地址)，以代替指针的引用。</p><p>为了记录每个元素的属性，可以使用结构体、二维数组或者多个数组。</p><p><strong>Q：</strong>用数组实现链表有哪些缺点?</p><p><strong>A：</strong>1.数组必须一次性初始化，并且长度固定。2.删除元素不会真正的释放空间。</p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>从严格意义上来说，队列是一种特殊的链表，只支持添加队列尾元素和删除队列头元素两种操作。</p><p>或者说，队列是链表的子集。</p><h3 id="队列常用操作-从队列尾部添加元素"><a href="#队列常用操作-从队列尾部添加元素" class="headerlink" title="队列常用操作:从队列尾部添加元素"></a>队列常用操作:从队列尾部添加元素</h3><p>创建一个新元素，将队尾元素的下一个元素指向新元素。</p><p>将队尾移动到新元素。</p><p>代码实现：</p><pre class="line-numbers language-cpp"><code class="language-cpp">Node<span class="token operator">*</span> newTail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tail <span class="token operator">-</span><span class="token operator">></span> next <span class="token operator">=</span> newTail<span class="token punctuation">;</span>tail <span class="token operator">=</span> newTail<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="队列常用操作-从队列头部删除元素"><a href="#队列常用操作-从队列头部删除元素" class="headerlink" title="队列常用操作:从队列头部删除元素"></a>队列常用操作:从队列头部删除元素</h3><p>记录队头元素。</p><p>将队头元素移动到它的下一个元素。根据需要释放旧的队头元素。</p><p>代码实现：</p><pre class="line-numbers language-cpp"><code class="language-cpp">Node<span class="token operator">*</span> oldHead <span class="token operator">=</span> head<span class="token punctuation">;</span>head <span class="token operator">=</span> head <span class="token operator">-</span><span class="token operator">></span> next<span class="token punctuation">;</span>oldHead <span class="token operator">-</span><span class="token operator">></span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：</p><blockquote><p>还要特判队列为空的情况。</p></blockquote><h3 id="数组-一种特殊的队列"><a href="#数组-一种特殊的队列" class="headerlink" title="数组:一种特殊的队列"></a>数组:一种特殊的队列</h3><p>用两个整数表示数组的下标，作为队头和队尾的指针。</p><p>删除元素则将队头指针+1，添加元素则将队尾指针+1。</p><p>队头指针超过的队尾指针表示队列为空。</p><h3 id="循环队列-循环重复利用被删除空间的数组队列"><a href="#循环队列-循环重复利用被删除空间的数组队列" class="headerlink" title="循环队列:循环重复利用被删除空间的数组队列"></a>循环队列:循环重复利用被删除空间的数组队列</h3><p>移动指针后如果超出了数组长度，则重置为0。</p><p>当尾指针追赶上头指针时，表示队列溢出。</p><p>定义：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> LENGTH <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>Node<span class="token operator">*</span> queue<span class="token punctuation">[</span>LENGTH<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tile <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>添加元素：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">push</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token punctuation">(</span>tail <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 判断满。 </span>        tail <span class="token operator">=</span> <span class="token punctuation">(</span>tail <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> LENGTH<span class="token punctuation">;</span>         queue<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除元素：</p><pre class="line-numbers language-cpp"><code class="language-cpp">Node<span class="token operator">*</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token punctuation">(</span>tail <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 判断空。 </span>        Node<span class="token operator">*</span> h <span class="token operator">=</span> queue<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> LENGTH<span class="token punctuation">;</span>        <span class="token keyword">return</span> h<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="队列-Q-amp-A"><a href="#队列-Q-amp-A" class="headerlink" title="队列 Q&amp;A"></a>队列 Q&amp;A</h3><p><strong>Q：</strong>队列是单向链表还是双向链表?</p><p><strong>A：</strong>使用单向链表足以支持队列的操作。</p><p><strong>Q：</strong>如果是双向队列，需要额外增加哪些操作?</p><p><strong>A：</strong>添加时要设置新元素的前一个元素，删除时要清空新队头的前一个元素。</p><p><strong>Q：</strong>数组队列有哪些优点与缺点?</p><p><strong>A：</strong>优点：队列不需要删除中间元素，数组完全满足队列的操作要求。</p><p>缺点：删除掉的空间无法被重复利用。</p><p><strong>Q：</strong>如何区分循环队列是满还是空?</p><p><strong>A：</strong>有两种方案：</p><blockquote><p>1.用一个额外的变量记录队列的元素个数。</p><p>2.将实际队列的容量变为数组长度-1，让队列空和满时的队尾指针在不同的位置。</p></blockquote><p>本文代码采用的是第二种方案</p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>从严格意义上来说栈是一种特殊的链表，只支持添加栈尾元素和删除栈尾元素两种操作。</p><p>或者说，栈是链表的子集。</p><h3 id="栈常用操作-从栈尾部添加元素"><a href="#栈常用操作-从栈尾部添加元素" class="headerlink" title="栈常用操作:从栈尾部添加元素"></a>栈常用操作:从栈尾部添加元素</h3><p>1.创建一个新元素。<br>2.将新元素的上一个元素指向栈尾元素。<br>3.将栈尾移动到新元素。</p><pre class="line-numbers language-cpp"><code class="language-cpp">Node<span class="token operator">*</span> newTail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newTail <span class="token operator">-</span><span class="token operator">></span> prev <span class="token operator">=</span> tail<span class="token punctuation">;</span>tail <span class="token operator">=</span> newTail<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：还要特判栈为空的情况。</p><h3 id="栈常用操作-从栈尾部删除元素"><a href="#栈常用操作-从栈尾部删除元素" class="headerlink" title="栈常用操作:从栈尾部删除元素"></a>栈常用操作:从栈尾部删除元素</h3><p>1.记录栈尾元素。<br>2.将栈尾元素移动到它的上一个元素。<br>3.将旧栈尾元素的上一个元素置空。根据需要释放旧的栈尾元素。</p><pre class="line-numbers language-cpp"><code class="language-cpp">Node<span class="token operator">*</span> oldTail <span class="token operator">=</span> tail<span class="token punctuation">;</span>tail <span class="token operator">=</span> tail <span class="token operator">-</span><span class="token operator">></span> prev<span class="token punctuation">;</span>oldTail <span class="token operator">-</span><span class="token operator">></span> prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：还要特判栈为空的情况。</p><h3 id="数组-一种特殊的栈"><a href="#数组-一种特殊的栈" class="headerlink" title="数组:一种特殊的栈"></a>数组:一种特殊的栈</h3><p>用一个整数表示数组的下标，作为栈尾的指针。</p><p>添加元素则将栈尾指针+1，删除元素则将栈尾指针-1。</p><p>栈尾指针小于栈头元素的下标则表示栈为空。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷题解P1119【灾后重建】</title>
      <link href="/2019/03/09/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3P1119%E3%80%90%E7%81%BE%E5%90%8E%E9%87%8D%E5%BB%BA%E3%80%91/"/>
      <url>/2019/03/09/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3P1119%E3%80%90%E7%81%BE%E5%90%8E%E9%87%8D%E5%BB%BA%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本题基本上是Floyd的模版题，适合初学Floyd的OIer练习。</p><p>本题的重点在于并非在每一个时刻，每一个节点都可以到达，所以应枚举目前所有可以到达的节点k，并以k为中转点进行更新。</p><p>同时，因为出题人已经给数据排好了顺序，发现未建成时直接中断即可。</p><p>闲话少说，主要看代码注释。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span> </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">200</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">1e9</span><span class="token punctuation">;</span><span class="token keyword">int</span> edge<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> times<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*init()函数：Floyd初始化*/</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> INF<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//节点到自身的距离为0</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*addEdge()函数：在邻接矩阵中添加一条（双向）边*/</span><span class="token keyword">void</span> <span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> edge<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//双向边处理</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*input()函数：输入数据*/</span><span class="token keyword">void</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//读入n, m后进行初始化</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>times<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> v<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addEdge</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*update()函数：以k为中转点更新最短路*/</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> edge<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> q<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> t<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//这里是重点</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>times<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> t <span class="token operator">&amp;&amp;</span> cur <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">update</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//若当前可以经过村庄cur，以cur为中转点更新最短路径</span>                        cur<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>times<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">></span> t <span class="token operator">||</span> times<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">></span> t <span class="token operator">||</span> edge<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> INF<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//村庄x尚未建成,村庄x尚未建成或村庄x与村庄y在t时并不连通</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> edge<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//简洁的main()函数</span>    <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOIP2018游记</title>
      <link href="/2019/03/08/NOIP2018%E6%B8%B8%E8%AE%B0/"/>
      <url>/2019/03/08/NOIP2018%E6%B8%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="出师"><a href="#出师" class="headerlink" title="出师"></a>出师</h1><p>（1）</p><p>起床看见洛谷首页上显示的“距NOIP2018还有-1天”时，差点把嘴里的一口早饭喷了出来。</p><p>不过又想一下，要是一大早看见个“距NOIP2019还有365天”，估计瞬间会感觉压力山大。。。</p><p>(2)</p><p>进考场前竟然下起了倾盆大雨，从地铁站出来后，举着伞转了一个小时才找到考场，期间不停的被地图坑。</p><p>（我才不会告诉你浪费这么多时间的真正原因是使用迭代加深搜索找考场。）</p><p>进了考场发现有惊喜。。。机房竟然有网！有网！<del>结果在考试前网断了。。。</del>然后开始调整编辑器，<del>以至于没注意到别人都开始打代码了。。。</del></p><h1 id="第一题，水题，鉴定完毕。"><a href="#第一题，水题，鉴定完毕。" class="headerlink" title="第一题，水题，鉴定完毕。"></a>第一题，<del>水题，鉴定完毕。</del></h1><p>分析：可能连模拟都算不上，直接从头到尾扫描一遍即可。</p><p>但虽说是水题，也有一些坑点：</p><ol><li><p>读入要用 string + cin + getline()!</p><p> 读入要用 string + cin + getline()!</p><p> 读入要用 string + cin + getline()!</p><p> 重要的事情说三遍！</p><p> @垃圾一个 就是在这一点上炸了。</p></li><li><p>判断时要自编函数或alnum，不能用ctype.h中的isprint()函数，要用isalnum()函数。</p><p> 如果你问”isprint()函数是什么”或”isalnum()函数是什么”,请自行忽略这段话并自觉编写判断函数。</p><p> 别问我为什么，Luogu自测只有20分。</p></li></ol><p>代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">&lt;=</span> c <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">&lt;=</span> c <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">&lt;=</span> c <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    string s<span class="token punctuation">;</span>    <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第二题，暴力枚举，鉴定完毕。"><a href="#第二题，暴力枚举，鉴定完毕。" class="headerlink" title="第二题，暴力枚举，鉴定完毕。"></a>第二题，<del>暴力枚举，鉴定完毕。</del></h1><p>分析：</p><ol><li><p>先计算好每一个军营的气势，同时累加双方的气势总和（输入后处理）</p></li><li><p>枚举每一个军营，检查若将工兵放在此位置是否可减少双方差距，并更新最小值与位置。</p></li><li><p><del>输出位置</del></p></li></ol><p>写第一遍时大概思路就酱。</p><p>运行结果：</p><p>样例#1:Pass</p><p>样例#1:Pass</p><p>样例#3:<br><strong>Beng!</strong></p><p>又看了一下数据范围，对于 100% 的数据，n ≤ 10 ^ 5,ci,s1,s2≤10^9。</p><p>10^9?</p><p>“十年OI一场空，没开long long 见祖宗”，这话果然没错。</p><p>除int main()外的所有int皆换成long long，OK。</p><p>PS:如</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">define</span> int long long</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//some code</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之类的旁门左道，为了安全起见，大家不要滥用哦QwQ。<del>有本事你写个typedef int long long看报不报错</del></p><h1 id="第三题。。。"><a href="#第三题。。。" class="headerlink" title="第三题。。。"></a>第三题。。。</h1><p>我这种小蒟蒻怎么可能作对前三题呢QwQ,又怎么可能想到DP正解QwQ</p><p>所以我挥手打了贪心。。。<del>当我发现第三个样例没过时已经来不及了</del></p><p>先说说贪心具体思路：</p><ol><li>将学生按照到达时间从小到大排个序</li><li>用一个光标变量记录目前接到了第几个学生，如果还有人没被接到，就继续循环知道所有人都被接到为止。</li><li>每次循环时检查当前这个人是否值得带，若值得则将光标后移。</li><li>每次循环后将时间加上开车所需要的时间。</li><li>最后累加总等待时间并输出。</li></ol><p>答案正确率：玄学</p><p>到各大网站上测之，30分有之，80分有之，一切随缘。</p><h1 id="第四题本蒟蒻骗了分，没脸来这胡说了。。。"><a href="#第四题本蒟蒻骗了分，没脸来这胡说了。。。" class="headerlink" title="第四题本蒟蒻骗了分，没脸来这胡说了。。。"></a>第四题本蒟蒻骗了分，没脸来这胡说了。。。</h1><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>咳咳咳。。。</p><h2 id="1-考试策略的应用"><a href="#1-考试策略的应用" class="headerlink" title="(1)考试策略的应用"></a>(1)考试策略的应用</h2><p>亏得我这只小蒟蒻还在进考场前看了1h AK NOI 的各位dalao 呕心沥血写的各种考场策略，结果一进考场简直就像接受了A级记忆删除，什么都忘得一干二净：</p><ol><li>一，二题打完过了样例就去打第三题。（double-plus-scared）</li><li>第三题贪心死活过不了第三个点还执迷不悟认为就是贪心。</li><li>第四题明明有子任务放着不做打随机数。</li></ol><h2 id="2-考场心态的调整"><a href="#2-考场心态的调整" class="headerlink" title="(2)考场心态的调整"></a>(2)考场心态的调整</h2><p>众所周知，在NOIP考场这种地方要想保持心态稳定是不可能的。然而如果吓得完全写不出代码就凉凉了。总结就是一定要冷静冷静冷静再冷静，一定不要像某人一样，贪心错了都想不到半个动规。</p><p>最后，祝大家：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">while</span><span class="token punctuation">(</span>NOIP2019<span class="token punctuation">.</span>rp <span class="token operator">&lt;</span> NOIP2019<span class="token punctuation">.</span>rp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    NOIP2019<span class="token punctuation">.</span>rp<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 游记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NOIP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>New Start</title>
      <link href="/2019/03/04/New-Start/"/>
      <url>/2019/03/04/New-Start/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>折腾一番后终于把之前的文章迁移到GitHub Pages + Hexo的博客上了，之所以选择GitHub是因为这个平台忽然关闭的可能性很小，并且可定制性极强，虽然只能做静态网页，但搭个博客还是绰绰有余的。</p><p>从另一方面来讲，GitHub的信誉也不错，在服务品质上也比国内的诸多流氓公司强得多。</p><p>扯了这么多，博客的本质还是发布文章，就看自己能否坚持写下去了。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
